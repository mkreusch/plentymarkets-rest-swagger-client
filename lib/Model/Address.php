<?php
/**
 * Address
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'gender' => 'string',
        'name1' => 'string',
        'name2' => 'string',
        'name3' => 'string',
        'name4' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'address4' => 'string',
        'postal_code' => 'string',
        'town' => 'string',
        'country_id' => 'int',
        'state_id' => 'int',
        'read_only' => 'bool',
        'company_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'care_of' => 'string',
        'street' => 'string',
        'house_number' => 'string',
        'additional' => 'string',
        'checked_at' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'tax_id_number' => 'string',
        'external_id' => 'string',
        'entry_certificate' => 'bool',
        'phone' => 'string',
        'email' => 'string',
        'postident' => 'string',
        'personal_number' => 'string',
        'fsk' => 'string',
        'birthday' => 'string',
        'title' => 'string',
        'session_id' => 'string',
        'contact_person' => 'string',
        'packstation_no' => 'string',
        'is_packstation' => 'bool',
        'is_postfiliale' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'gender' => null,
        'name1' => null,
        'name2' => null,
        'name3' => null,
        'name4' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'address4' => null,
        'postal_code' => null,
        'town' => null,
        'country_id' => null,
        'state_id' => null,
        'read_only' => null,
        'company_name' => null,
        'first_name' => null,
        'last_name' => null,
        'care_of' => null,
        'street' => null,
        'house_number' => null,
        'additional' => null,
        'checked_at' => null,
        'created_at' => null,
        'updated_at' => null,
        'tax_id_number' => null,
        'external_id' => null,
        'entry_certificate' => null,
        'phone' => null,
        'email' => null,
        'postident' => null,
        'personal_number' => null,
        'fsk' => null,
        'birthday' => null,
        'title' => null,
        'session_id' => null,
        'contact_person' => null,
        'packstation_no' => null,
        'is_packstation' => null,
        'is_postfiliale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'gender' => 'gender',
        'name1' => 'name1',
        'name2' => 'name2',
        'name3' => 'name3',
        'name4' => 'name4',
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'address4' => 'address4',
        'postal_code' => 'postalCode',
        'town' => 'town',
        'country_id' => 'countryId',
        'state_id' => 'stateId',
        'read_only' => 'readOnly',
        'company_name' => 'companyName',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'care_of' => 'careOf',
        'street' => 'street',
        'house_number' => 'houseNumber',
        'additional' => 'additional',
        'checked_at' => 'checkedAt',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'tax_id_number' => 'taxIdNumber',
        'external_id' => 'externalId',
        'entry_certificate' => 'entryCertificate',
        'phone' => 'phone',
        'email' => 'email',
        'postident' => 'postident',
        'personal_number' => 'personalNumber',
        'fsk' => 'fsk',
        'birthday' => 'birthday',
        'title' => 'title',
        'session_id' => 'sessionId',
        'contact_person' => 'contactPerson',
        'packstation_no' => 'packstationNo',
        'is_packstation' => 'isPackstation',
        'is_postfiliale' => 'isPostfiliale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'gender' => 'setGender',
        'name1' => 'setName1',
        'name2' => 'setName2',
        'name3' => 'setName3',
        'name4' => 'setName4',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'address4' => 'setAddress4',
        'postal_code' => 'setPostalCode',
        'town' => 'setTown',
        'country_id' => 'setCountryId',
        'state_id' => 'setStateId',
        'read_only' => 'setReadOnly',
        'company_name' => 'setCompanyName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'care_of' => 'setCareOf',
        'street' => 'setStreet',
        'house_number' => 'setHouseNumber',
        'additional' => 'setAdditional',
        'checked_at' => 'setCheckedAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'tax_id_number' => 'setTaxIdNumber',
        'external_id' => 'setExternalId',
        'entry_certificate' => 'setEntryCertificate',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'postident' => 'setPostident',
        'personal_number' => 'setPersonalNumber',
        'fsk' => 'setFsk',
        'birthday' => 'setBirthday',
        'title' => 'setTitle',
        'session_id' => 'setSessionId',
        'contact_person' => 'setContactPerson',
        'packstation_no' => 'setPackstationNo',
        'is_packstation' => 'setIsPackstation',
        'is_postfiliale' => 'setIsPostfiliale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'gender' => 'getGender',
        'name1' => 'getName1',
        'name2' => 'getName2',
        'name3' => 'getName3',
        'name4' => 'getName4',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'address4' => 'getAddress4',
        'postal_code' => 'getPostalCode',
        'town' => 'getTown',
        'country_id' => 'getCountryId',
        'state_id' => 'getStateId',
        'read_only' => 'getReadOnly',
        'company_name' => 'getCompanyName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'care_of' => 'getCareOf',
        'street' => 'getStreet',
        'house_number' => 'getHouseNumber',
        'additional' => 'getAdditional',
        'checked_at' => 'getCheckedAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'tax_id_number' => 'getTaxIdNumber',
        'external_id' => 'getExternalId',
        'entry_certificate' => 'getEntryCertificate',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'postident' => 'getPostident',
        'personal_number' => 'getPersonalNumber',
        'fsk' => 'getFsk',
        'birthday' => 'getBirthday',
        'title' => 'getTitle',
        'session_id' => 'getSessionId',
        'contact_person' => 'getContactPerson',
        'packstation_no' => 'getPackstationNo',
        'is_packstation' => 'getIsPackstation',
        'is_postfiliale' => 'getIsPostfiliale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['name1'] = isset($data['name1']) ? $data['name1'] : null;
        $this->container['name2'] = isset($data['name2']) ? $data['name2'] : null;
        $this->container['name3'] = isset($data['name3']) ? $data['name3'] : null;
        $this->container['name4'] = isset($data['name4']) ? $data['name4'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['address3'] = isset($data['address3']) ? $data['address3'] : null;
        $this->container['address4'] = isset($data['address4']) ? $data['address4'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['town'] = isset($data['town']) ? $data['town'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['state_id'] = isset($data['state_id']) ? $data['state_id'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['care_of'] = isset($data['care_of']) ? $data['care_of'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['additional'] = isset($data['additional']) ? $data['additional'] : null;
        $this->container['checked_at'] = isset($data['checked_at']) ? $data['checked_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['tax_id_number'] = isset($data['tax_id_number']) ? $data['tax_id_number'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['entry_certificate'] = isset($data['entry_certificate']) ? $data['entry_certificate'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['postident'] = isset($data['postident']) ? $data['postident'] : null;
        $this->container['personal_number'] = isset($data['personal_number']) ? $data['personal_number'] : null;
        $this->container['fsk'] = isset($data['fsk']) ? $data['fsk'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['packstation_no'] = isset($data['packstation_no']) ? $data['packstation_no'] : null;
        $this->container['is_packstation'] = isset($data['is_packstation']) ? $data['is_packstation'] : null;
        $this->container['is_postfiliale'] = isset($data['is_postfiliale']) ? $data['is_postfiliale'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the address
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender (\"female\", \"male\" or \"diverse\")
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets name1
     *
     * @return string|null
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string|null $name1 The name 1 field (defaults to: company name)
     *
     * @return $this
     */
    public function setName1($name1)
    {
        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string|null
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string|null $name2 The name 2 field (defaults to: first name)
     *
     * @return $this
     */
    public function setName2($name2)
    {
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name3
     *
     * @return string|null
     */
    public function getName3()
    {
        return $this->container['name3'];
    }

    /**
     * Sets name3
     *
     * @param string|null $name3 The name 3 field (defaults to: last name)
     *
     * @return $this
     */
    public function setName3($name3)
    {
        $this->container['name3'] = $name3;

        return $this;
    }

    /**
     * Gets name4
     *
     * @return string|null
     */
    public function getName4()
    {
        return $this->container['name4'];
    }

    /**
     * Sets name4
     *
     * @param string|null $name4 The name 4 field (defaults to: c/o)
     *
     * @return $this
     */
    public function setName4($name4)
    {
        $this->container['name4'] = $name4;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 The address 2 field (defaults to: houseNumber|packstationNo)
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string|null
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string|null $address3 The address 3 field (defaults to: additional)
     *
     * @return $this
     */
    public function setAddress3($address3)
    {
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets address4
     *
     * @return string|null
     */
    public function getAddress4()
    {
        return $this->container['address4'];
    }

    /**
     * Sets address4
     *
     * @param string|null $address4 The address 4 field is currently undefined and can be freely used.
     *
     * @return $this
     */
    public function setAddress4($address4)
    {
        $this->container['address4'] = $address4;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code The postcode
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string|null
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string|null $town The town
     *
     * @return $this
     */
    public function setTown($town)
    {
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int|null
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int|null $country_id The ID of the country
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return int|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param int|null $state_id The ID of the state
     *
     * @return $this
     */
    public function setStateId($state_id)
    {
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only Flag that indicates if the data record is read only
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name The company name (alias for name1, <i>read only</i>)
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name (alias for name2, <i>read only</i>)
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name (alias for name3, <i>read only</i>)
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets care_of
     *
     * @return string|null
     */
    public function getCareOf()
    {
        return $this->container['care_of'];
    }

    /**
     * Sets care_of
     *
     * @param string|null $care_of The c/o (alias for name4, <i>read only</i>)
     *
     * @return $this
     */
    public function setCareOf($care_of)
    {
        $this->container['care_of'] = $care_of;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street The street (alias for address1, <i>read only</i>)
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string|null $house_number The house number (alias for address2, <i>read only</i>)
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets additional
     *
     * @return string|null
     */
    public function getAdditional()
    {
        return $this->container['additional'];
    }

    /**
     * Sets additional
     *
     * @param string|null $additional The additional address information (alias for address3, <i>read only</i>)
     *
     * @return $this
     */
    public function setAdditional($additional)
    {
        $this->container['additional'] = $additional;

        return $this;
    }

    /**
     * Gets checked_at
     *
     * @return string|null
     */
    public function getCheckedAt()
    {
        return $this->container['checked_at'];
    }

    /**
     * Sets checked_at
     *
     * @param string|null $checked_at The time the address was checked as unix timestamp
     *
     * @return $this
     */
    public function setCheckedAt($checked_at)
    {
        $this->container['checked_at'] = $checked_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The time the address was created as unix timestamp
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The time the address was last updated as unix timestamp
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets tax_id_number
     *
     * @return string|null
     */
    public function getTaxIdNumber()
    {
        return $this->container['tax_id_number'];
    }

    /**
     * Sets tax_id_number
     *
     * @param string|null $tax_id_number The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *
     * @return $this
     */
    public function setTaxIdNumber($tax_id_number)
    {
        $this->container['tax_id_number'] = $tax_id_number;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The externalId option (alias for option with typeId 2, <i>read only</i>)
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets entry_certificate
     *
     * @return bool|null
     */
    public function getEntryCertificate()
    {
        return $this->container['entry_certificate'];
    }

    /**
     * Sets entry_certificate
     *
     * @param bool|null $entry_certificate The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *
     * @return $this
     */
    public function setEntryCertificate($entry_certificate)
    {
        $this->container['entry_certificate'] = $entry_certificate;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The phone option (alias for option with typeId 4, <i>read only</i>)
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email option (alias for option with typeId 5, <i>read only</i>)
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets postident
     *
     * @return string|null
     */
    public function getPostident()
    {
        return $this->container['postident'];
    }

    /**
     * Sets postident
     *
     * @param string|null $postident The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *
     * @return $this
     */
    public function setPostident($postident)
    {
        $this->container['postident'] = $postident;

        return $this;
    }

    /**
     * Gets personal_number
     *
     * @return string|null
     */
    public function getPersonalNumber()
    {
        return $this->container['personal_number'];
    }

    /**
     * Sets personal_number
     *
     * @param string|null $personal_number The personal number option (alias for option with typeId 7, <i>read only</i>)
     *
     * @return $this
     */
    public function setPersonalNumber($personal_number)
    {
        $this->container['personal_number'] = $personal_number;

        return $this;
    }

    /**
     * Gets fsk
     *
     * @return string|null
     */
    public function getFsk()
    {
        return $this->container['fsk'];
    }

    /**
     * Sets fsk
     *
     * @param string|null $fsk The age rating option (alias for option with typeId 8, <i>read only</i>)
     *
     * @return $this
     */
    public function setFsk($fsk)
    {
        $this->container['fsk'] = $fsk;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string|null $birthday The birthday option (alias for option with typeId 9, <i>read only</i>)
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title option (alias for option with typeId 11, <i>read only</i>)
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return string|null
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param string|null $contact_person The contact person option (alias for option with typeId 12, <i>read only</i>)
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets packstation_no
     *
     * @return string|null
     */
    public function getPackstationNo()
    {
        return $this->container['packstation_no'];
    }

    /**
     * Sets packstation_no
     *
     * @param string|null $packstation_no The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *
     * @return $this
     */
    public function setPackstationNo($packstation_no)
    {
        $this->container['packstation_no'] = $packstation_no;

        return $this;
    }

    /**
     * Gets is_packstation
     *
     * @return bool|null
     */
    public function getIsPackstation()
    {
        return $this->container['is_packstation'];
    }

    /**
     * Sets is_packstation
     *
     * @param bool|null $is_packstation Flag that indicates if the address is a packstation
     *
     * @return $this
     */
    public function setIsPackstation($is_packstation)
    {
        $this->container['is_packstation'] = $is_packstation;

        return $this;
    }

    /**
     * Gets is_postfiliale
     *
     * @return bool|null
     */
    public function getIsPostfiliale()
    {
        return $this->container['is_postfiliale'];
    }

    /**
     * Sets is_postfiliale
     *
     * @param bool|null $is_postfiliale Flag that indicates if the address is a postfiliale (post office)
     *
     * @return $this
     */
    public function setIsPostfiliale($is_postfiliale)
    {
        $this->container['is_postfiliale'] = $is_postfiliale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


