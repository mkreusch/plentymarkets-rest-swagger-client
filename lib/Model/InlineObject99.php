<?php
/**
 * InlineObject99
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject99 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject99 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_99';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_id' => 'int',
        'position' => 'int',
        'file_type' => 'string',
        'upload_file_name' => 'string',
        'upload_image_data' => 'string',
        'upload_url' => 'string',
        'names' => '\OpenAPI\Client\Model\ItemImageName[]',
        'lang' => 'string',
        'name' => 'string',
        'alternate' => 'string',
        'availabilities' => '\OpenAPI\Client\Model\ItemImageAvailability[]',
        'type' => 'string',
        'value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'item_id' => null,
        'position' => null,
        'file_type' => null,
        'upload_file_name' => null,
        'upload_image_data' => null,
        'upload_url' => null,
        'names' => null,
        'lang' => null,
        'name' => null,
        'alternate' => null,
        'availabilities' => null,
        'type' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'itemId',
        'position' => 'position',
        'file_type' => 'fileType',
        'upload_file_name' => 'uploadFileName',
        'upload_image_data' => 'uploadImageData',
        'upload_url' => 'uploadUrl',
        'names' => 'names',
        'lang' => 'lang',
        'name' => 'name',
        'alternate' => 'alternate',
        'availabilities' => 'availabilities',
        'type' => 'type',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'position' => 'setPosition',
        'file_type' => 'setFileType',
        'upload_file_name' => 'setUploadFileName',
        'upload_image_data' => 'setUploadImageData',
        'upload_url' => 'setUploadUrl',
        'names' => 'setNames',
        'lang' => 'setLang',
        'name' => 'setName',
        'alternate' => 'setAlternate',
        'availabilities' => 'setAvailabilities',
        'type' => 'setType',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'position' => 'getPosition',
        'file_type' => 'getFileType',
        'upload_file_name' => 'getUploadFileName',
        'upload_image_data' => 'getUploadImageData',
        'upload_url' => 'getUploadUrl',
        'names' => 'getNames',
        'lang' => 'getLang',
        'name' => 'getName',
        'alternate' => 'getAlternate',
        'availabilities' => 'getAvailabilities',
        'type' => 'getType',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['upload_file_name'] = isset($data['upload_file_name']) ? $data['upload_file_name'] : null;
        $this->container['upload_image_data'] = isset($data['upload_image_data']) ? $data['upload_image_data'] : null;
        $this->container['upload_url'] = isset($data['upload_url']) ? $data['upload_url'] : null;
        $this->container['names'] = isset($data['names']) ? $data['names'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['alternate'] = isset($data['alternate']) ? $data['alternate'] : null;
        $this->container['availabilities'] = isset($data['availabilities']) ? $data['availabilities'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_id'] === null) {
            $invalidProperties[] = "'item_id' can't be null";
        }
        if ($this->container['upload_file_name'] === null) {
            $invalidProperties[] = "'upload_file_name' can't be null";
        }
        if ($this->container['lang'] === null) {
            $invalidProperties[] = "'lang' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id The ID of the item the image is associated with
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the image. The position is used for sorting images in the online store. optional
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string|null
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string|null $file_type The file format of the image. Possible file formats: JPG, JPEG, PNG, GIF, SVG optional
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets upload_file_name
     *
     * @return string
     */
    public function getUploadFileName()
    {
        return $this->container['upload_file_name'];
    }

    /**
     * Sets upload_file_name
     *
     * @param string $upload_file_name The file name assigned to the uploaded image. Permitted characters for file names: alphanumeric (a-z, A-Z, 0-9), hypens (-), underscores (_).  with uploadImageData
     *
     * @return $this
     */
    public function setUploadFileName($upload_file_name)
    {
        $this->container['upload_file_name'] = $upload_file_name;

        return $this;
    }

    /**
     * Gets upload_image_data
     *
     * @return string|null
     */
    public function getUploadImageData()
    {
        return $this->container['upload_image_data'];
    }

    /**
     * Sets upload_image_data
     *
     * @param string|null $upload_image_data The base64 encoded image data of the image
     *
     * @return $this
     */
    public function setUploadImageData($upload_image_data)
    {
        $this->container['upload_image_data'] = $upload_image_data;

        return $this;
    }

    /**
     * Gets upload_url
     *
     * @return string|null
     */
    public function getUploadUrl()
    {
        return $this->container['upload_url'];
    }

    /**
     * Sets upload_url
     *
     * @param string|null $upload_url The URL under which the image can be accessed for uploading. Permitted characters for file names: alphanumeric (a-z, A-Z, 0-9), hypens (-), underscores (_).
     *
     * @return $this
     */
    public function setUploadUrl($upload_url)
    {
        $this->container['upload_url'] = $upload_url;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \OpenAPI\Client\Model\ItemImageName[]|null
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \OpenAPI\Client\Model\ItemImageName[]|null $names names
     *
     * @return $this
     */
    public function setNames($names)
    {
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang The language of the image name
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the image in the specified language
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets alternate
     *
     * @return string|null
     */
    public function getAlternate()
    {
        return $this->container['alternate'];
    }

    /**
     * Sets alternate
     *
     * @param string|null $alternate The alternative name of the image in the specified language optional
     *
     * @return $this
     */
    public function setAlternate($alternate)
    {
        $this->container['alternate'] = $alternate;

        return $this;
    }

    /**
     * Gets availabilities
     *
     * @return \OpenAPI\Client\Model\ItemImageAvailability[]|null
     */
    public function getAvailabilities()
    {
        return $this->container['availabilities'];
    }

    /**
     * Sets availabilities
     *
     * @param \OpenAPI\Client\Model\ItemImageAvailability[]|null $availabilities availabilities
     *
     * @return $this
     */
    public function setAvailabilities($availabilities)
    {
        $this->container['availabilities'] = $availabilities;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of referrer for which the image is available. Possible types: mandant = The image can be made available for clients (stores).marketplace = The image can be made available for markets.listing = The image can be made available for listings.  allowed values are mandant, marketplace, listing
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value For the type mandant, this is the plentyID of the client (store) for which the image is available. For the types marketplace and listing, this is the ID of the referrer for which the image is available. -1.00 = The image is available for all referrers of this type.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


