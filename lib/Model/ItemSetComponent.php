<?php
/**
 * ItemSetComponent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ItemSetComponent Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemSetComponent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemSetComponent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'set_id' => 'int',
        'item_id' => 'int',
        'minimal_order_quantity' => 'float',
        'maximum_order_quantity' => 'float',
        'order_quantity_possible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'set_id' => null,
        'item_id' => null,
        'minimal_order_quantity' => null,
        'maximum_order_quantity' => null,
        'order_quantity_possible' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'set_id' => 'setId',
        'item_id' => 'itemId',
        'minimal_order_quantity' => 'minimalOrderQuantity',
        'maximum_order_quantity' => 'maximumOrderQuantity',
        'order_quantity_possible' => 'orderQuantityPossible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'set_id' => 'setSetId',
        'item_id' => 'setItemId',
        'minimal_order_quantity' => 'setMinimalOrderQuantity',
        'maximum_order_quantity' => 'setMaximumOrderQuantity',
        'order_quantity_possible' => 'setOrderQuantityPossible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'set_id' => 'getSetId',
        'item_id' => 'getItemId',
        'minimal_order_quantity' => 'getMinimalOrderQuantity',
        'maximum_order_quantity' => 'getMaximumOrderQuantity',
        'order_quantity_possible' => 'getOrderQuantityPossible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['set_id'] = isset($data['set_id']) ? $data['set_id'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['minimal_order_quantity'] = isset($data['minimal_order_quantity']) ? $data['minimal_order_quantity'] : null;
        $this->container['maximum_order_quantity'] = isset($data['maximum_order_quantity']) ? $data['maximum_order_quantity'] : null;
        $this->container['order_quantity_possible'] = isset($data['order_quantity_possible']) ? $data['order_quantity_possible'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The item set component ID. The ID must be unique.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets set_id
     *
     * @return int|null
     */
    public function getSetId()
    {
        return $this->container['set_id'];
    }

    /**
     * Sets set_id
     *
     * @param int|null $set_id The item ID of the item set. The ID must be unique.
     *
     * @return $this
     */
    public function setSetId($set_id)
    {
        $this->container['set_id'] = $set_id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id The item ID of the set component
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets minimal_order_quantity
     *
     * @return float|null
     */
    public function getMinimalOrderQuantity()
    {
        return $this->container['minimal_order_quantity'];
    }

    /**
     * Sets minimal_order_quantity
     *
     * @param float|null $minimal_order_quantity Minimum order quantity.
     *
     * @return $this
     */
    public function setMinimalOrderQuantity($minimal_order_quantity)
    {
        $this->container['minimal_order_quantity'] = $minimal_order_quantity;

        return $this;
    }

    /**
     * Gets maximum_order_quantity
     *
     * @return float|null
     */
    public function getMaximumOrderQuantity()
    {
        return $this->container['maximum_order_quantity'];
    }

    /**
     * Sets maximum_order_quantity
     *
     * @param float|null $maximum_order_quantity Maximum order quantity.
     *
     * @return $this
     */
    public function setMaximumOrderQuantity($maximum_order_quantity)
    {
        $this->container['maximum_order_quantity'] = $maximum_order_quantity;

        return $this;
    }

    /**
     * Gets order_quantity_possible
     *
     * @return bool|null
     */
    public function getOrderQuantityPossible()
    {
        return $this->container['order_quantity_possible'];
    }

    /**
     * Sets order_quantity_possible
     *
     * @param bool|null $order_quantity_possible Order quantities possible.
     *
     * @return $this
     */
    public function setOrderQuantityPossible($order_quantity_possible)
    {
        $this->container['order_quantity_possible'] = $order_quantity_possible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


