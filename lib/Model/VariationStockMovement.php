<?php
/**
 * VariationStockMovement
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VariationStockMovement Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VariationStockMovement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VariationStockMovement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'item_id' => 'int',
        'variation_id' => 'int',
        'warehouse_id' => 'int',
        'reason_string' => 'string',
        'attribute_values' => 'string',
        'process_row_id' => 'int',
        'quantity' => 'int',
        'reason' => 'int',
        'created_at' => 'string',
        'process_row_type' => 'int',
        'best_before_date' => 'string',
        'batch' => 'string',
        'storage_location_name' => 'string',
        'warehouse_name' => 'string',
        'purchase_price' => 'int',
        'user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'item_id' => null,
        'variation_id' => null,
        'warehouse_id' => null,
        'reason_string' => null,
        'attribute_values' => null,
        'process_row_id' => null,
        'quantity' => null,
        'reason' => null,
        'created_at' => null,
        'process_row_type' => null,
        'best_before_date' => null,
        'batch' => null,
        'storage_location_name' => null,
        'warehouse_name' => null,
        'purchase_price' => null,
        'user_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'item_id' => 'itemId',
        'variation_id' => 'variationId',
        'warehouse_id' => 'warehouseId',
        'reason_string' => 'reasonString',
        'attribute_values' => 'attributeValues',
        'process_row_id' => 'processRowId',
        'quantity' => 'quantity',
        'reason' => 'reason',
        'created_at' => 'createdAt',
        'process_row_type' => 'processRowType',
        'best_before_date' => 'bestBeforeDate',
        'batch' => 'batch',
        'storage_location_name' => 'storageLocationName',
        'warehouse_name' => 'warehouseName',
        'purchase_price' => 'purchasePrice',
        'user_id' => 'userId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'item_id' => 'setItemId',
        'variation_id' => 'setVariationId',
        'warehouse_id' => 'setWarehouseId',
        'reason_string' => 'setReasonString',
        'attribute_values' => 'setAttributeValues',
        'process_row_id' => 'setProcessRowId',
        'quantity' => 'setQuantity',
        'reason' => 'setReason',
        'created_at' => 'setCreatedAt',
        'process_row_type' => 'setProcessRowType',
        'best_before_date' => 'setBestBeforeDate',
        'batch' => 'setBatch',
        'storage_location_name' => 'setStorageLocationName',
        'warehouse_name' => 'setWarehouseName',
        'purchase_price' => 'setPurchasePrice',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'item_id' => 'getItemId',
        'variation_id' => 'getVariationId',
        'warehouse_id' => 'getWarehouseId',
        'reason_string' => 'getReasonString',
        'attribute_values' => 'getAttributeValues',
        'process_row_id' => 'getProcessRowId',
        'quantity' => 'getQuantity',
        'reason' => 'getReason',
        'created_at' => 'getCreatedAt',
        'process_row_type' => 'getProcessRowType',
        'best_before_date' => 'getBestBeforeDate',
        'batch' => 'getBatch',
        'storage_location_name' => 'getStorageLocationName',
        'warehouse_name' => 'getWarehouseName',
        'purchase_price' => 'getPurchasePrice',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['variation_id'] = isset($data['variation_id']) ? $data['variation_id'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['reason_string'] = isset($data['reason_string']) ? $data['reason_string'] : null;
        $this->container['attribute_values'] = isset($data['attribute_values']) ? $data['attribute_values'] : null;
        $this->container['process_row_id'] = isset($data['process_row_id']) ? $data['process_row_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['process_row_type'] = isset($data['process_row_type']) ? $data['process_row_type'] : null;
        $this->container['best_before_date'] = isset($data['best_before_date']) ? $data['best_before_date'] : null;
        $this->container['batch'] = isset($data['batch']) ? $data['batch'] : null;
        $this->container['storage_location_name'] = isset($data['storage_location_name']) ? $data['storage_location_name'] : null;
        $this->container['warehouse_name'] = isset($data['warehouse_name']) ? $data['warehouse_name'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the stock movement
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id The ID of the item
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets variation_id
     *
     * @return int|null
     */
    public function getVariationId()
    {
        return $this->container['variation_id'];
    }

    /**
     * Sets variation_id
     *
     * @param int|null $variation_id The ID of the variation
     *
     * @return $this
     */
    public function setVariationId($variation_id)
    {
        $this->container['variation_id'] = $variation_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int|null $warehouse_id The ID of the warehouse
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets reason_string
     *
     * @return string|null
     */
    public function getReasonString()
    {
        return $this->container['reason_string'];
    }

    /**
     * Sets reason_string
     *
     * @param string|null $reason_string The reason string
     *
     * @return $this
     */
    public function setReasonString($reason_string)
    {
        $this->container['reason_string'] = $reason_string;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return string|null
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param string|null $attribute_values The attribute values of a variation
     *
     * @return $this
     */
    public function setAttributeValues($attribute_values)
    {
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets process_row_id
     *
     * @return int|null
     */
    public function getProcessRowId()
    {
        return $this->container['process_row_id'];
    }

    /**
     * Sets process_row_id
     *
     * @param int|null $process_row_id The ID is either the actual ID of an order or of an incoming item data set. Whether it is an order ID or an incoming item data set ID depends on the processRowType.
     *
     * @return $this
     */
    public function setProcessRowId($process_row_id)
    {
        $this->container['process_row_id'] = $process_row_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return int|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param int|null $reason The reason for the movement
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date and time that the movement was created. This date is in W3C format.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets process_row_type
     *
     * @return int|null
     */
    public function getProcessRowType()
    {
        return $this->container['process_row_type'];
    }

    /**
     * Sets process_row_type
     *
     * @param int|null $process_row_type The type of the stock movement <ul>  <li>1 = incoming item data set</li>  <li>2 = order</li>                                      <li>3 = deleted stock movement</li>                                      <li>4 = new stock intake</li> </ul>
     *
     * @return $this
     */
    public function setProcessRowType($process_row_type)
    {
        $this->container['process_row_type'] = $process_row_type;

        return $this;
    }

    /**
     * Gets best_before_date
     *
     * @return string|null
     */
    public function getBestBeforeDate()
    {
        return $this->container['best_before_date'];
    }

    /**
     * Sets best_before_date
     *
     * @param string|null $best_before_date The best before date for the movement
     *
     * @return $this
     */
    public function setBestBeforeDate($best_before_date)
    {
        $this->container['best_before_date'] = $best_before_date;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch The batch for the movement
     *
     * @return $this
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets storage_location_name
     *
     * @return string|null
     */
    public function getStorageLocationName()
    {
        return $this->container['storage_location_name'];
    }

    /**
     * Sets storage_location_name
     *
     * @param string|null $storage_location_name The name of the storage location
     *
     * @return $this
     */
    public function setStorageLocationName($storage_location_name)
    {
        $this->container['storage_location_name'] = $storage_location_name;

        return $this;
    }

    /**
     * Gets warehouse_name
     *
     * @return string|null
     */
    public function getWarehouseName()
    {
        return $this->container['warehouse_name'];
    }

    /**
     * Sets warehouse_name
     *
     * @param string|null $warehouse_name The name of the warehouse
     *
     * @return $this
     */
    public function setWarehouseName($warehouse_name)
    {
        $this->container['warehouse_name'] = $warehouse_name;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return int|null
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param int|null $purchase_price The purchase price of a variation
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The id of the user. Can be null if the movement was not triggered by an user.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


