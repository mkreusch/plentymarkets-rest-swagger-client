<?php
/**
 * Wizard
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Wizard Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Wizard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Wizard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'key' => 'string',
        'settings_handler_class' => 'string',
        'short_description' => 'string',
        'translation_key' => 'string',
        'delete_confirmation_text' => 'string',
        'topics' => 'object[]',
        'steps' => 'object[]',
        'priority' => 'int',
        'relevance' => 'string',
        'keywords' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'title' => null,
        'key' => null,
        'settings_handler_class' => null,
        'short_description' => null,
        'translation_key' => null,
        'delete_confirmation_text' => null,
        'topics' => null,
        'steps' => null,
        'priority' => null,
        'relevance' => null,
        'keywords' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'key' => 'key',
        'settings_handler_class' => 'settingsHandlerClass',
        'short_description' => 'shortDescription',
        'translation_key' => 'translationKey',
        'delete_confirmation_text' => 'deleteConfirmationText',
        'topics' => 'topics',
        'steps' => 'steps',
        'priority' => 'priority',
        'relevance' => 'relevance',
        'keywords' => 'keywords'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'key' => 'setKey',
        'settings_handler_class' => 'setSettingsHandlerClass',
        'short_description' => 'setShortDescription',
        'translation_key' => 'setTranslationKey',
        'delete_confirmation_text' => 'setDeleteConfirmationText',
        'topics' => 'setTopics',
        'steps' => 'setSteps',
        'priority' => 'setPriority',
        'relevance' => 'setRelevance',
        'keywords' => 'setKeywords'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'key' => 'getKey',
        'settings_handler_class' => 'getSettingsHandlerClass',
        'short_description' => 'getShortDescription',
        'translation_key' => 'getTranslationKey',
        'delete_confirmation_text' => 'getDeleteConfirmationText',
        'topics' => 'getTopics',
        'steps' => 'getSteps',
        'priority' => 'getPriority',
        'relevance' => 'getRelevance',
        'keywords' => 'getKeywords'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['settings_handler_class'] = isset($data['settings_handler_class']) ? $data['settings_handler_class'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['translation_key'] = isset($data['translation_key']) ? $data['translation_key'] : null;
        $this->container['delete_confirmation_text'] = isset($data['delete_confirmation_text']) ? $data['delete_confirmation_text'] : null;
        $this->container['topics'] = isset($data['topics']) ? $data['topics'] : null;
        $this->container['steps'] = isset($data['steps']) ? $data['steps'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['relevance'] = isset($data['relevance']) ? $data['relevance'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The wizard's key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets settings_handler_class
     *
     * @return string|null
     */
    public function getSettingsHandlerClass()
    {
        return $this->container['settings_handler_class'];
    }

    /**
     * Sets settings_handler_class
     *
     * @param string|null $settings_handler_class Settings handler
     *
     * @return $this
     */
    public function setSettingsHandlerClass($settings_handler_class)
    {
        $this->container['settings_handler_class'] = $settings_handler_class;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description The short description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets translation_key
     *
     * @return string|null
     */
    public function getTranslationKey()
    {
        return $this->container['translation_key'];
    }

    /**
     * Sets translation_key
     *
     * @param string|null $translation_key The translation key
     *
     * @return $this
     */
    public function setTranslationKey($translation_key)
    {
        $this->container['translation_key'] = $translation_key;

        return $this;
    }

    /**
     * Gets delete_confirmation_text
     *
     * @return string|null
     */
    public function getDeleteConfirmationText()
    {
        return $this->container['delete_confirmation_text'];
    }

    /**
     * Sets delete_confirmation_text
     *
     * @param string|null $delete_confirmation_text Delete confirmation Text in deletion overlay
     *
     * @return $this
     */
    public function setDeleteConfirmationText($delete_confirmation_text)
    {
        $this->container['delete_confirmation_text'] = $delete_confirmation_text;

        return $this;
    }

    /**
     * Gets topics
     *
     * @return object[]|null
     */
    public function getTopics()
    {
        return $this->container['topics'];
    }

    /**
     * Sets topics
     *
     * @param object[]|null $topics The topics
     *
     * @return $this
     */
    public function setTopics($topics)
    {
        $this->container['topics'] = $topics;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return object[]|null
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param object[]|null $steps Wizard's structure
     *
     * @return $this
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority Wizard's listing priority in the overview
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets relevance
     *
     * @return string|null
     */
    public function getRelevance()
    {
        return $this->container['relevance'];
    }

    /**
     * Sets relevance
     *
     * @param string|null $relevance Wizard's level of relevance
     *
     * @return $this
     */
    public function setRelevance($relevance)
    {
        $this->container['relevance'] = $relevance;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return object[]|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param object[]|null $keywords Keywords describing the wizard
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


