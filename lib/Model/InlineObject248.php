<?php
/**
 * InlineObject248
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject248 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject248 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_248';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type_id' => 'int',
        'priority_id' => 'int',
        'parent_ticket_id' => 'int',
        'status_id' => 'int',
        'confidential' => 'object[]',
        'contact_id' => 'int',
        'contact_last_update_at' => 'string',
        'deadline_at' => 'string',
        'title' => 'string',
        'plenty_id' => 'int',
        'source' => 'object[]',
        'documents_count' => 'int',
        'order_id' => 'int',
        'has_documents' => 'int',
        'resubmission_at' => 'string',
        'owners' => '\OpenAPI\Client\Model\TicketOwner[]',
        'user_id' => 'int',
        'role_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type_id' => null,
        'priority_id' => null,
        'parent_ticket_id' => null,
        'status_id' => null,
        'confidential' => null,
        'contact_id' => null,
        'contact_last_update_at' => null,
        'deadline_at' => null,
        'title' => null,
        'plenty_id' => null,
        'source' => null,
        'documents_count' => null,
        'order_id' => null,
        'has_documents' => null,
        'resubmission_at' => null,
        'owners' => null,
        'user_id' => null,
        'role_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type_id' => 'typeId',
        'priority_id' => 'priorityId',
        'parent_ticket_id' => 'parentTicketId',
        'status_id' => 'statusId',
        'confidential' => 'confidential',
        'contact_id' => 'contactId',
        'contact_last_update_at' => 'contactLastUpdateAt',
        'deadline_at' => 'deadlineAt',
        'title' => 'title',
        'plenty_id' => 'plentyId',
        'source' => 'source',
        'documents_count' => 'documentsCount',
        'order_id' => 'orderId',
        'has_documents' => 'hasDocuments',
        'resubmission_at' => 'resubmissionAt',
        'owners' => 'owners',
        'user_id' => 'userId',
        'role_id' => 'roleId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type_id' => 'setTypeId',
        'priority_id' => 'setPriorityId',
        'parent_ticket_id' => 'setParentTicketId',
        'status_id' => 'setStatusId',
        'confidential' => 'setConfidential',
        'contact_id' => 'setContactId',
        'contact_last_update_at' => 'setContactLastUpdateAt',
        'deadline_at' => 'setDeadlineAt',
        'title' => 'setTitle',
        'plenty_id' => 'setPlentyId',
        'source' => 'setSource',
        'documents_count' => 'setDocumentsCount',
        'order_id' => 'setOrderId',
        'has_documents' => 'setHasDocuments',
        'resubmission_at' => 'setResubmissionAt',
        'owners' => 'setOwners',
        'user_id' => 'setUserId',
        'role_id' => 'setRoleId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type_id' => 'getTypeId',
        'priority_id' => 'getPriorityId',
        'parent_ticket_id' => 'getParentTicketId',
        'status_id' => 'getStatusId',
        'confidential' => 'getConfidential',
        'contact_id' => 'getContactId',
        'contact_last_update_at' => 'getContactLastUpdateAt',
        'deadline_at' => 'getDeadlineAt',
        'title' => 'getTitle',
        'plenty_id' => 'getPlentyId',
        'source' => 'getSource',
        'documents_count' => 'getDocumentsCount',
        'order_id' => 'getOrderId',
        'has_documents' => 'getHasDocuments',
        'resubmission_at' => 'getResubmissionAt',
        'owners' => 'getOwners',
        'user_id' => 'getUserId',
        'role_id' => 'getRoleId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
        $this->container['priority_id'] = isset($data['priority_id']) ? $data['priority_id'] : null;
        $this->container['parent_ticket_id'] = isset($data['parent_ticket_id']) ? $data['parent_ticket_id'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['confidential'] = isset($data['confidential']) ? $data['confidential'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['contact_last_update_at'] = isset($data['contact_last_update_at']) ? $data['contact_last_update_at'] : null;
        $this->container['deadline_at'] = isset($data['deadline_at']) ? $data['deadline_at'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['plenty_id'] = isset($data['plenty_id']) ? $data['plenty_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['documents_count'] = isset($data['documents_count']) ? $data['documents_count'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['has_documents'] = isset($data['has_documents']) ? $data['has_documents'] : null;
        $this->container['resubmission_at'] = isset($data['resubmission_at']) ? $data['resubmission_at'] : null;
        $this->container['owners'] = isset($data['owners']) ? $data['owners'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type_id'] === null) {
            $invalidProperties[] = "'type_id' can't be null";
        }
        if ($this->container['status_id'] === null) {
            $invalidProperties[] = "'status_id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['plenty_id'] === null) {
            $invalidProperties[] = "'plenty_id' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['owners'] === null) {
            $invalidProperties[] = "'owners' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalidProperties[] = "'role_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_id
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int $type_id The type ID of the ticket
     *
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets priority_id
     *
     * @return int|null
     */
    public function getPriorityId()
    {
        return $this->container['priority_id'];
    }

    /**
     * Sets priority_id
     *
     * @param int|null $priority_id The priority ID of the ticket optional
     *
     * @return $this
     */
    public function setPriorityId($priority_id)
    {
        $this->container['priority_id'] = $priority_id;

        return $this;
    }

    /**
     * Gets parent_ticket_id
     *
     * @return int|null
     */
    public function getParentTicketId()
    {
        return $this->container['parent_ticket_id'];
    }

    /**
     * Sets parent_ticket_id
     *
     * @param int|null $parent_ticket_id The ID of the parent ticket optional
     *
     * @return $this
     */
    public function setParentTicketId($parent_ticket_id)
    {
        $this->container['parent_ticket_id'] = $parent_ticket_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int $status_id The status ID of the ticket
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets confidential
     *
     * @return object[]|null
     */
    public function getConfidential()
    {
        return $this->container['confidential'];
    }

    /**
     * Sets confidential
     *
     * @param object[]|null $confidential confidential
     *
     * @return $this
     */
    public function setConfidential($confidential)
    {
        $this->container['confidential'] = $confidential;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id The ID of the contact that is linked with the ticket optional
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets contact_last_update_at
     *
     * @return string|null
     */
    public function getContactLastUpdateAt()
    {
        return $this->container['contact_last_update_at'];
    }

    /**
     * Sets contact_last_update_at
     *
     * @param string|null $contact_last_update_at The time the contact was last updated optional
     *
     * @return $this
     */
    public function setContactLastUpdateAt($contact_last_update_at)
    {
        $this->container['contact_last_update_at'] = $contact_last_update_at;

        return $this;
    }

    /**
     * Gets deadline_at
     *
     * @return string|null
     */
    public function getDeadlineAt()
    {
        return $this->container['deadline_at'];
    }

    /**
     * Sets deadline_at
     *
     * @param string|null $deadline_at The date of the ticket deadline optional
     *
     * @return $this
     */
    public function setDeadlineAt($deadline_at)
    {
        $this->container['deadline_at'] = $deadline_at;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the ticket
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int
     */
    public function getPlentyId()
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int $plenty_id The ID of the client (store)
     *
     * @return $this
     */
    public function setPlentyId($plenty_id)
    {
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return object[]
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param object[] $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets documents_count
     *
     * @return int|null
     */
    public function getDocumentsCount()
    {
        return $this->container['documents_count'];
    }

    /**
     * Sets documents_count
     *
     * @param int|null $documents_count The number of documents that are attached to the ticket optional
     *
     * @return $this
     */
    public function setDocumentsCount($documents_count)
    {
        $this->container['documents_count'] = $documents_count;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id The ID of the order linked with the ticket optional
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets has_documents
     *
     * @return int|null
     */
    public function getHasDocuments()
    {
        return $this->container['has_documents'];
    }

    /**
     * Sets has_documents
     *
     * @param int|null $has_documents Displays 1 if the ticket has one or more documents. Displays 0 if the ticket has no document. optional
     *
     * @return $this
     */
    public function setHasDocuments($has_documents)
    {
        $this->container['has_documents'] = $has_documents;

        return $this;
    }

    /**
     * Gets resubmission_at
     *
     * @return string|null
     */
    public function getResubmissionAt()
    {
        return $this->container['resubmission_at'];
    }

    /**
     * Sets resubmission_at
     *
     * @param string|null $resubmission_at The date the ticket should be resubmitted optional
     *
     * @return $this
     */
    public function setResubmissionAt($resubmission_at)
    {
        $this->container['resubmission_at'] = $resubmission_at;

        return $this;
    }

    /**
     * Gets owners
     *
     * @return \OpenAPI\Client\Model\TicketOwner[]
     */
    public function getOwners()
    {
        return $this->container['owners'];
    }

    /**
     * Sets owners
     *
     * @param \OpenAPI\Client\Model\TicketOwner[] $owners owners
     *
     * @return $this
     */
    public function setOwners($owners)
    {
        $this->container['owners'] = $owners;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The user ID of the owner
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param int $role_id The role ID of the owner
     *
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


