<?php
/**
 * InlineObject203
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject203 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject203 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_203';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'float',
        'exchange_ratio' => 'float',
        'mop_id' => 'int',
        'parent_id' => 'int',
        'deleted' => 'int',
        'unaccountable' => 'int',
        'currency' => 'string',
        'type' => 'string',
        'status' => 'int',
        'transaction_type' => 'int',
        'regenerate_hash' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'exchange_ratio' => null,
        'mop_id' => null,
        'parent_id' => null,
        'deleted' => null,
        'unaccountable' => null,
        'currency' => null,
        'type' => null,
        'status' => null,
        'transaction_type' => null,
        'regenerate_hash' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'exchange_ratio' => 'exchangeRatio',
        'mop_id' => 'mopId',
        'parent_id' => 'parentId',
        'deleted' => 'deleted',
        'unaccountable' => 'unaccountable',
        'currency' => 'currency',
        'type' => 'type',
        'status' => 'status',
        'transaction_type' => 'transactionType',
        'regenerate_hash' => 'regenerateHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'exchange_ratio' => 'setExchangeRatio',
        'mop_id' => 'setMopId',
        'parent_id' => 'setParentId',
        'deleted' => 'setDeleted',
        'unaccountable' => 'setUnaccountable',
        'currency' => 'setCurrency',
        'type' => 'setType',
        'status' => 'setStatus',
        'transaction_type' => 'setTransactionType',
        'regenerate_hash' => 'setRegenerateHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'exchange_ratio' => 'getExchangeRatio',
        'mop_id' => 'getMopId',
        'parent_id' => 'getParentId',
        'deleted' => 'getDeleted',
        'unaccountable' => 'getUnaccountable',
        'currency' => 'getCurrency',
        'type' => 'getType',
        'status' => 'getStatus',
        'transaction_type' => 'getTransactionType',
        'regenerate_hash' => 'getRegenerateHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['exchange_ratio'] = isset($data['exchange_ratio']) ? $data['exchange_ratio'] : null;
        $this->container['mop_id'] = isset($data['mop_id']) ? $data['mop_id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['unaccountable'] = isset($data['unaccountable']) ? $data['unaccountable'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['regenerate_hash'] = isset($data['regenerate_hash']) ? $data['regenerate_hash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['exchange_ratio'] === null) {
            $invalidProperties[] = "'exchange_ratio' can't be null";
        }
        if ($this->container['mop_id'] === null) {
            $invalidProperties[] = "'mop_id' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount of the payment  matching to /^[0-9]{1,9}[\\.][0-9]{4}+$/
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets exchange_ratio
     *
     * @return float
     */
    public function getExchangeRatio()
    {
        return $this->container['exchange_ratio'];
    }

    /**
     * Sets exchange_ratio
     *
     * @param float $exchange_ratio The exchange rate. Exchange rates are used if the default currency saved in plentymarkets differs from the currency of the order.  matching to /^[0-9]{1,9}[\\.][0-9]{4}+$/
     *
     * @return $this
     */
    public function setExchangeRatio($exchange_ratio)
    {
        $this->container['exchange_ratio'] = $exchange_ratio;

        return $this;
    }

    /**
     * Gets mop_id
     *
     * @return int
     */
    public function getMopId()
    {
        return $this->container['mop_id'];
    }

    /**
     * Sets mop_id
     *
     * @param int $mop_id The ID of the payment method  matching to /^[0-9]+$/
     *
     * @return $this
     */
    public function setMopId($mop_id)
    {
        $this->container['mop_id'] = $mop_id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id The ID of the parent payment optional matching to /^[0-9]+$/
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return int|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param int|null $deleted A deleted payment. Deleted payments have the value 1 and are not displayed in the plentymarkets back end. optional matching to /^[0-1]$/
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets unaccountable
     *
     * @return int|null
     */
    public function getUnaccountable()
    {
        return $this->container['unaccountable'];
    }

    /**
     * Sets unaccountable
     *
     * @param int|null $unaccountable An unassigned payment. Unassigned payments have the value 1. optional matching to /^[0-1]$/
     *
     * @return $this
     */
    public function setUnaccountable($unaccountable)
    {
        $this->container['unaccountable'] = $unaccountable;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency of the payment in ISO 4217 code.  matching to /^[A-Z]{3}$/
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The payment type. Available types are credit and debit.  allowed values are debit, credit
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status The status of the payment  matching to /^[1-9][0]?$/
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return int
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param int $transaction_type The transaction type of the payment. The following transaction types are available:      Interim transaction report = 1     Booked payment = 2     Split payment = 3   matching to /^[1-3]$/
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets regenerate_hash
     *
     * @return bool|null
     */
    public function getRegenerateHash()
    {
        return $this->container['regenerate_hash'];
    }

    /**
     * Sets regenerate_hash
     *
     * @param bool|null $regenerate_hash If $regenerateHash is true, regenerate the payment hash value. Default is false. optional
     *
     * @return $this
     */
    public function setRegenerateHash($regenerate_hash)
    {
        $this->container['regenerate_hash'] = $regenerate_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


