<?php
/**
 * KeyFigure
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * KeyFigure Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class KeyFigure implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'KeyFigure';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'description' => 'string',
        'key_figure' => 'string',
        'data_series' => 'bool',
        'data_group' => 'bool',
        'result_fields' => 'object[]',
        'primary_result_field' => 'string',
        'calculation' => 'object[]',
        'data_filters' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'title' => null,
        'description' => null,
        'key_figure' => null,
        'data_series' => null,
        'data_group' => null,
        'result_fields' => null,
        'primary_result_field' => null,
        'calculation' => null,
        'data_filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'description' => 'description',
        'key_figure' => 'keyFigure',
        'data_series' => 'dataSeries',
        'data_group' => 'dataGroup',
        'result_fields' => 'resultFields',
        'primary_result_field' => 'primaryResultField',
        'calculation' => 'calculation',
        'data_filters' => 'dataFilters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'description' => 'setDescription',
        'key_figure' => 'setKeyFigure',
        'data_series' => 'setDataSeries',
        'data_group' => 'setDataGroup',
        'result_fields' => 'setResultFields',
        'primary_result_field' => 'setPrimaryResultField',
        'calculation' => 'setCalculation',
        'data_filters' => 'setDataFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'description' => 'getDescription',
        'key_figure' => 'getKeyFigure',
        'data_series' => 'getDataSeries',
        'data_group' => 'getDataGroup',
        'result_fields' => 'getResultFields',
        'primary_result_field' => 'getPrimaryResultField',
        'calculation' => 'getCalculation',
        'data_filters' => 'getDataFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['key_figure'] = isset($data['key_figure']) ? $data['key_figure'] : null;
        $this->container['data_series'] = isset($data['data_series']) ? $data['data_series'] : null;
        $this->container['data_group'] = isset($data['data_group']) ? $data['data_group'] : null;
        $this->container['result_fields'] = isset($data['result_fields']) ? $data['result_fields'] : null;
        $this->container['primary_result_field'] = isset($data['primary_result_field']) ? $data['primary_result_field'] : null;
        $this->container['calculation'] = isset($data['calculation']) ? $data['calculation'] : null;
        $this->container['data_filters'] = isset($data['data_filters']) ? $data['data_filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title 
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets key_figure
     *
     * @return string|null
     */
    public function getKeyFigure()
    {
        return $this->container['key_figure'];
    }

    /**
     * Sets key_figure
     *
     * @param string|null $key_figure 
     *
     * @return $this
     */
    public function setKeyFigure($key_figure)
    {
        $this->container['key_figure'] = $key_figure;

        return $this;
    }

    /**
     * Gets data_series
     *
     * @return bool|null
     */
    public function getDataSeries()
    {
        return $this->container['data_series'];
    }

    /**
     * Sets data_series
     *
     * @param bool|null $data_series 
     *
     * @return $this
     */
    public function setDataSeries($data_series)
    {
        $this->container['data_series'] = $data_series;

        return $this;
    }

    /**
     * Gets data_group
     *
     * @return bool|null
     */
    public function getDataGroup()
    {
        return $this->container['data_group'];
    }

    /**
     * Sets data_group
     *
     * @param bool|null $data_group 
     *
     * @return $this
     */
    public function setDataGroup($data_group)
    {
        $this->container['data_group'] = $data_group;

        return $this;
    }

    /**
     * Gets result_fields
     *
     * @return object[]|null
     */
    public function getResultFields()
    {
        return $this->container['result_fields'];
    }

    /**
     * Sets result_fields
     *
     * @param object[]|null $result_fields 
     *
     * @return $this
     */
    public function setResultFields($result_fields)
    {
        $this->container['result_fields'] = $result_fields;

        return $this;
    }

    /**
     * Gets primary_result_field
     *
     * @return string|null
     */
    public function getPrimaryResultField()
    {
        return $this->container['primary_result_field'];
    }

    /**
     * Sets primary_result_field
     *
     * @param string|null $primary_result_field 
     *
     * @return $this
     */
    public function setPrimaryResultField($primary_result_field)
    {
        $this->container['primary_result_field'] = $primary_result_field;

        return $this;
    }

    /**
     * Gets calculation
     *
     * @return object[]|null
     */
    public function getCalculation()
    {
        return $this->container['calculation'];
    }

    /**
     * Sets calculation
     *
     * @param object[]|null $calculation 
     *
     * @return $this
     */
    public function setCalculation($calculation)
    {
        $this->container['calculation'] = $calculation;

        return $this;
    }

    /**
     * Gets data_filters
     *
     * @return object[]|null
     */
    public function getDataFilters()
    {
        return $this->container['data_filters'];
    }

    /**
     * Sets data_filters
     *
     * @param object[]|null $data_filters 
     *
     * @return $this
     */
    public function setDataFilters($data_filters)
    {
        $this->container['data_filters'] = $data_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


