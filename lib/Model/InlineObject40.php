<?php
/**
 * InlineObject40
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject40 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject40 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_40';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'parent_category_id' => 'int',
        'type' => 'string',
        'linklist' => 'string',
        'right' => 'string',
        'sitemap' => 'string',
        'details' => '\OpenAPI\Client\Model\CategoryDetails[]',
        'plenty_id' => 'int',
        'name' => 'string',
        'lang' => 'string',
        'description' => 'string',
        'description2' => 'string',
        'short_description' => 'string',
        'meta_description' => 'string',
        'name_url' => 'string',
        'image' => 'string',
        'image2' => 'string',
        'position' => 'int',
        'item_list_view' => 'string',
        'single_item_view' => 'string',
        'page_view' => 'string',
        'fulltext' => 'bool',
        'meta_robots' => 'string',
        'clients' => '\OpenAPI\Client\Model\CategoryClient[]',
        'elmar_categories' => '\OpenAPI\Client\Model\CategoryProperty[]',
        'category_id' => 'int',
        'market_id' => 'float',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'parent_category_id' => null,
        'type' => null,
        'linklist' => null,
        'right' => null,
        'sitemap' => null,
        'details' => null,
        'plenty_id' => null,
        'name' => null,
        'lang' => null,
        'description' => null,
        'description2' => null,
        'short_description' => null,
        'meta_description' => null,
        'name_url' => null,
        'image' => null,
        'image2' => null,
        'position' => null,
        'item_list_view' => null,
        'single_item_view' => null,
        'page_view' => null,
        'fulltext' => null,
        'meta_robots' => null,
        'clients' => null,
        'elmar_categories' => null,
        'category_id' => null,
        'market_id' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent_category_id' => 'parentCategoryId',
        'type' => 'type',
        'linklist' => 'linklist',
        'right' => 'right',
        'sitemap' => 'sitemap',
        'details' => 'details',
        'plenty_id' => 'plentyId',
        'name' => 'name',
        'lang' => 'lang',
        'description' => 'description',
        'description2' => 'description2',
        'short_description' => 'shortDescription',
        'meta_description' => 'metaDescription',
        'name_url' => 'nameUrl',
        'image' => 'image',
        'image2' => 'image2',
        'position' => 'position',
        'item_list_view' => 'itemListView',
        'single_item_view' => 'singleItemView',
        'page_view' => 'pageView',
        'fulltext' => 'fulltext',
        'meta_robots' => 'metaRobots',
        'clients' => 'clients',
        'elmar_categories' => 'elmarCategories',
        'category_id' => 'categoryId',
        'market_id' => 'marketId',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_category_id' => 'setParentCategoryId',
        'type' => 'setType',
        'linklist' => 'setLinklist',
        'right' => 'setRight',
        'sitemap' => 'setSitemap',
        'details' => 'setDetails',
        'plenty_id' => 'setPlentyId',
        'name' => 'setName',
        'lang' => 'setLang',
        'description' => 'setDescription',
        'description2' => 'setDescription2',
        'short_description' => 'setShortDescription',
        'meta_description' => 'setMetaDescription',
        'name_url' => 'setNameUrl',
        'image' => 'setImage',
        'image2' => 'setImage2',
        'position' => 'setPosition',
        'item_list_view' => 'setItemListView',
        'single_item_view' => 'setSingleItemView',
        'page_view' => 'setPageView',
        'fulltext' => 'setFulltext',
        'meta_robots' => 'setMetaRobots',
        'clients' => 'setClients',
        'elmar_categories' => 'setElmarCategories',
        'category_id' => 'setCategoryId',
        'market_id' => 'setMarketId',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_category_id' => 'getParentCategoryId',
        'type' => 'getType',
        'linklist' => 'getLinklist',
        'right' => 'getRight',
        'sitemap' => 'getSitemap',
        'details' => 'getDetails',
        'plenty_id' => 'getPlentyId',
        'name' => 'getName',
        'lang' => 'getLang',
        'description' => 'getDescription',
        'description2' => 'getDescription2',
        'short_description' => 'getShortDescription',
        'meta_description' => 'getMetaDescription',
        'name_url' => 'getNameUrl',
        'image' => 'getImage',
        'image2' => 'getImage2',
        'position' => 'getPosition',
        'item_list_view' => 'getItemListView',
        'single_item_view' => 'getSingleItemView',
        'page_view' => 'getPageView',
        'fulltext' => 'getFulltext',
        'meta_robots' => 'getMetaRobots',
        'clients' => 'getClients',
        'elmar_categories' => 'getElmarCategories',
        'category_id' => 'getCategoryId',
        'market_id' => 'getMarketId',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_category_id'] = isset($data['parent_category_id']) ? $data['parent_category_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['linklist'] = isset($data['linklist']) ? $data['linklist'] : null;
        $this->container['right'] = isset($data['right']) ? $data['right'] : null;
        $this->container['sitemap'] = isset($data['sitemap']) ? $data['sitemap'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['plenty_id'] = isset($data['plenty_id']) ? $data['plenty_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description2'] = isset($data['description2']) ? $data['description2'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['meta_description'] = isset($data['meta_description']) ? $data['meta_description'] : null;
        $this->container['name_url'] = isset($data['name_url']) ? $data['name_url'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['image2'] = isset($data['image2']) ? $data['image2'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['item_list_view'] = isset($data['item_list_view']) ? $data['item_list_view'] : null;
        $this->container['single_item_view'] = isset($data['single_item_view']) ? $data['single_item_view'] : null;
        $this->container['page_view'] = isset($data['page_view']) ? $data['page_view'] : null;
        $this->container['fulltext'] = isset($data['fulltext']) ? $data['fulltext'] : null;
        $this->container['meta_robots'] = isset($data['meta_robots']) ? $data['meta_robots'] : null;
        $this->container['clients'] = isset($data['clients']) ? $data['clients'] : null;
        $this->container['elmar_categories'] = isset($data['elmar_categories']) ? $data['elmar_categories'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['market_id'] = isset($data['market_id']) ? $data['market_id'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['details'] === null) {
            $invalidProperties[] = "'details' can't be null";
        }
        if ($this->container['plenty_id'] === null) {
            $invalidProperties[] = "'plenty_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['lang'] === null) {
            $invalidProperties[] = "'lang' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique ID of the category optional
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_category_id
     *
     * @return int|null
     */
    public function getParentCategoryId()
    {
        return $this->container['parent_category_id'];
    }

    /**
     * Sets parent_category_id
     *
     * @param int|null $parent_category_id The ID of the category's parent category. Value is null if category level is 1. optional
     *
     * @return $this
     */
    public function setParentCategoryId($parent_category_id)
    {
        $this->container['parent_category_id'] = $parent_category_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The category type of the category  allowed values are blog, container, item, content
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets linklist
     *
     * @return string|null
     */
    public function getLinklist()
    {
        return $this->container['linklist'];
    }

    /**
     * Sets linklist
     *
     * @param string|null $linklist Flag that indicates if the category will be displayed in the online store's navigation. optional allowed values are Y, N
     *
     * @return $this
     */
    public function setLinklist($linklist)
    {
        $this->container['linklist'] = $linklist;

        return $this;
    }

    /**
     * Gets right
     *
     * @return string|null
     */
    public function getRight()
    {
        return $this->container['right'];
    }

    /**
     * Sets right
     *
     * @param string|null $right Flag that indicates who can see this category. all = Category is visible to all visitors of the online store.customer = Category and all of its subcategories are visible to visitors of the online store that have logged in only. Visitors that are not logged in are redirected to the login page. optional allowed values are all, customer
     *
     * @return $this
     */
    public function setRight($right)
    {
        $this->container['right'] = $right;

        return $this;
    }

    /**
     * Gets sitemap
     *
     * @return string|null
     */
    public function getSitemap()
    {
        return $this->container['sitemap'];
    }

    /**
     * Sets sitemap
     *
     * @param string|null $sitemap Flag that indicates if the category will be included in the sitemap. optional allowed values are Y, N
     *
     * @return $this
     */
    public function setSitemap($sitemap)
    {
        $this->container['sitemap'] = $sitemap;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Model\CategoryDetails[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Model\CategoryDetails[] $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int
     */
    public function getPlentyId()
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int $plenty_id The unique plenty ID of the client (store)
     *
     * @return $this
     */
    public function setPlentyId($plenty_id)
    {
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the category. The same category name can be used more than once in different categories or on different category levels. However, category names must be unique within the same category or level.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang The language of the category  allowed values are LANG, de, en, bg, fr, it, es, tr, nl, pl, pt, nn, ro, da, se, cz, ru, sk, cn, vn
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The category text. The description is inserted into the online store using template variables. optional
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description2
     *
     * @return string|null
     */
    public function getDescription2()
    {
        return $this->container['description2'];
    }

    /**
     * Sets description2
     *
     * @param string|null $description2 The category text 2. The description 2 is inserted into the online store using template variables. optional
     *
     * @return $this
     */
    public function setDescription2($description2)
    {
        $this->container['description2'] = $description2;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description The short description of the category. The short description can be inserted into the store's design using template variables. optional
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description The meta description of the category. This description is analysed by search engines and displayed in search results. This text should be treated as an advertising text to maximise click-through from search engine result pages. Current recommended limit is 156 characters. optional
     *
     * @return $this
     */
    public function setMetaDescription($meta_description)
    {
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets name_url
     *
     * @return string|null
     */
    public function getNameUrl()
    {
        return $this->container['name_url'];
    }

    /**
     * Sets name_url
     *
     * @param string|null $name_url The category name to be used for the category's URL. The same URL name can be used more than once in different categories or on different category levels. However, URL names must be unique within the same category or level. The URL name should not be changed once the category is indexed by search engines. If no URL name is specified, the name will automatically be used as the URL name when the category is created.Important: Name should contain ASCII code only and no special characters. The following character strings may not be used as prefixes to URL names: a-, b-, c-, f-, fa-, p-, t-. These prefixes will be removed automatically. For instance, a-class will be changed to class automatically. However, the URL name aclass can be used for a category named A-class. optional
     *
     * @return $this
     */
    public function setNameUrl($name_url)
    {
        $this->container['name_url'] = $name_url;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image The ID to the image1 of the category. optional
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets image2
     *
     * @return string|null
     */
    public function getImage2()
    {
        return $this->container['image2'];
    }

    /**
     * Sets image2
     *
     * @param string|null $image2 The ID to the image2 of the category. optional
     *
     * @return $this
     */
    public function setImage2($image2)
    {
        $this->container['image2'] = $image2;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the category within a category level. optional
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets item_list_view
     *
     * @return string|null
     */
    public function getItemListView()
    {
        return $this->container['item_list_view'];
    }

    /**
     * Sets item_list_view
     *
     * @param string|null $item_list_view The template the category is linked to for the category overview. The template determines what the category overview will look like for this category. This option is available for categories of the type Item only. Possible values: ItemViewCategoriesList, ItemViewCategoriesList2 to ItemViewCategoriesList10. optional allowed values are ItemViewCategoriesList, ItemViewCategoriesList2, ItemViewCategoriesList3, ItemViewCategoriesList4, ItemViewCategoriesList5, ItemViewCategoriesList6, ItemViewCategoriesList7, ItemViewCategoriesList8, ItemViewCategoriesList9, ItemViewCategoriesList10
     *
     * @return $this
     */
    public function setItemListView($item_list_view)
    {
        $this->container['item_list_view'] = $item_list_view;

        return $this;
    }

    /**
     * Gets single_item_view
     *
     * @return string|null
     */
    public function getSingleItemView()
    {
        return $this->container['single_item_view'];
    }

    /**
     * Sets single_item_view
     *
     * @param string|null $single_item_view The template the category is linked to for the single item view. The template determines the appearance of the single item design for this category. This option is available for categories of the type Item only. Possible values: ItemViewSingleItem, ItemViewSingleItem2 to ItemViewSingleItem5. optional allowed values are ItemViewSingleItem, ItemViewSingleItem2, ItemViewSingleItem3, ItemViewSingleItem4, ItemViewSingleItem5
     *
     * @return $this
     */
    public function setSingleItemView($single_item_view)
    {
        $this->container['single_item_view'] = $single_item_view;

        return $this;
    }

    /**
     * Gets page_view
     *
     * @return string|null
     */
    public function getPageView()
    {
        return $this->container['page_view'];
    }

    /**
     * Sets page_view
     *
     * @param string|null $page_view optional allowed values are PageDesignContent, PageDesignCheckout, PageDesignCustom, PageDesignCustom2, PageDesignCustom3
     *
     * @return $this
     */
    public function setPageView($page_view)
    {
        $this->container['page_view'] = $page_view;

        return $this;
    }

    /**
     * Gets fulltext
     *
     * @return bool|null
     */
    public function getFulltext()
    {
        return $this->container['fulltext'];
    }

    /**
     * Sets fulltext
     *
     * @param bool|null $fulltext Flag that indicates if the complete category text, i.e. the complete description, will be searched.Y = Complete text will be searched.N = Text will not be searched completely. optional allowed values are Y, N
     *
     * @return $this
     */
    public function setFulltext($fulltext)
    {
        $this->container['fulltext'] = $fulltext;

        return $this;
    }

    /**
     * Gets meta_robots
     *
     * @return string|null
     */
    public function getMetaRobots()
    {
        return $this->container['meta_robots'];
    }

    /**
     * Sets meta_robots
     *
     * @param string|null $meta_robots Values from the meta element Robots are analyzed by Web crawlers. These values tell the crawler what it should do with the page and with the links on the page.all = Include this category in the search engine index and follow the links on the page.index = Include in the search engine index.nofollow = Do not follow the links on the page.noindex = Do not include in the search engine index.nofollow, noindex = Do not follow the links and do not include the category in the search engine index. optional allowed values are ALL, INDEX, NOFOLLOW, NOINDEX, NOINDEX_NOFOLLOW
     *
     * @return $this
     */
    public function setMetaRobots($meta_robots)
    {
        $this->container['meta_robots'] = $meta_robots;

        return $this;
    }

    /**
     * Gets clients
     *
     * @return \OpenAPI\Client\Model\CategoryClient[]|null
     */
    public function getClients()
    {
        return $this->container['clients'];
    }

    /**
     * Sets clients
     *
     * @param \OpenAPI\Client\Model\CategoryClient[]|null $clients clients
     *
     * @return $this
     */
    public function setClients($clients)
    {
        $this->container['clients'] = $clients;

        return $this;
    }

    /**
     * Gets elmar_categories
     *
     * @return \OpenAPI\Client\Model\CategoryProperty[]|null
     */
    public function getElmarCategories()
    {
        return $this->container['elmar_categories'];
    }

    /**
     * Sets elmar_categories
     *
     * @param \OpenAPI\Client\Model\CategoryProperty[]|null $elmar_categories elmar_categories
     *
     * @return $this
     */
    public function setElmarCategories($elmar_categories)
    {
        $this->container['elmar_categories'] = $elmar_categories;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id The unique ID of the category optional
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets market_id
     *
     * @return float|null
     */
    public function getMarketId()
    {
        return $this->container['market_id'];
    }

    /**
     * Sets market_id
     *
     * @param float|null $market_id The unique ID of the referrer optional
     *
     * @return $this
     */
    public function setMarketId($market_id)
    {
        $this->container['market_id'] = $market_id;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value The category of the referrer
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


