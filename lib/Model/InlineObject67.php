<?php
/**
 * InlineObject67
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject67 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineObject67 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_67';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'position' => 'int',
        'unit' => 'string',
        'property_group_id' => 'int',
        'backend_name' => 'string',
        'value_type' => 'string',
        'is_searchable' => 'bool',
        'is_oder_property' => 'bool',
        'is_shown_on_item_page' => 'bool',
        'is_shown_on_item_list' => 'bool',
        'is_shown_at_checkout' => 'bool',
        'is_shown_in_pdf' => 'bool',
        'is_shown_as_additional_costs' => 'bool',
        'comment' => 'string',
        'surcharge' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'position' => null,
        'unit' => null,
        'property_group_id' => null,
        'backend_name' => null,
        'value_type' => null,
        'is_searchable' => null,
        'is_oder_property' => null,
        'is_shown_on_item_page' => null,
        'is_shown_on_item_list' => null,
        'is_shown_at_checkout' => null,
        'is_shown_in_pdf' => null,
        'is_shown_as_additional_costs' => null,
        'comment' => null,
        'surcharge' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'position' => 'position',
        'unit' => 'unit',
        'property_group_id' => 'propertyGroupId',
        'backend_name' => 'backendName',
        'value_type' => 'valueType',
        'is_searchable' => 'isSearchable',
        'is_oder_property' => 'isOderProperty',
        'is_shown_on_item_page' => 'isShownOnItemPage',
        'is_shown_on_item_list' => 'isShownOnItemList',
        'is_shown_at_checkout' => 'isShownAtCheckout',
        'is_shown_in_pdf' => 'isShownInPdf',
        'is_shown_as_additional_costs' => 'isShownAsAdditionalCosts',
        'comment' => 'comment',
        'surcharge' => 'surcharge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'position' => 'setPosition',
        'unit' => 'setUnit',
        'property_group_id' => 'setPropertyGroupId',
        'backend_name' => 'setBackendName',
        'value_type' => 'setValueType',
        'is_searchable' => 'setIsSearchable',
        'is_oder_property' => 'setIsOderProperty',
        'is_shown_on_item_page' => 'setIsShownOnItemPage',
        'is_shown_on_item_list' => 'setIsShownOnItemList',
        'is_shown_at_checkout' => 'setIsShownAtCheckout',
        'is_shown_in_pdf' => 'setIsShownInPdf',
        'is_shown_as_additional_costs' => 'setIsShownAsAdditionalCosts',
        'comment' => 'setComment',
        'surcharge' => 'setSurcharge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'position' => 'getPosition',
        'unit' => 'getUnit',
        'property_group_id' => 'getPropertyGroupId',
        'backend_name' => 'getBackendName',
        'value_type' => 'getValueType',
        'is_searchable' => 'getIsSearchable',
        'is_oder_property' => 'getIsOderProperty',
        'is_shown_on_item_page' => 'getIsShownOnItemPage',
        'is_shown_on_item_list' => 'getIsShownOnItemList',
        'is_shown_at_checkout' => 'getIsShownAtCheckout',
        'is_shown_in_pdf' => 'getIsShownInPdf',
        'is_shown_as_additional_costs' => 'getIsShownAsAdditionalCosts',
        'comment' => 'getComment',
        'surcharge' => 'getSurcharge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['property_group_id'] = isset($data['property_group_id']) ? $data['property_group_id'] : null;
        $this->container['backend_name'] = isset($data['backend_name']) ? $data['backend_name'] : null;
        $this->container['value_type'] = isset($data['value_type']) ? $data['value_type'] : null;
        $this->container['is_searchable'] = isset($data['is_searchable']) ? $data['is_searchable'] : null;
        $this->container['is_oder_property'] = isset($data['is_oder_property']) ? $data['is_oder_property'] : null;
        $this->container['is_shown_on_item_page'] = isset($data['is_shown_on_item_page']) ? $data['is_shown_on_item_page'] : null;
        $this->container['is_shown_on_item_list'] = isset($data['is_shown_on_item_list']) ? $data['is_shown_on_item_list'] : null;
        $this->container['is_shown_at_checkout'] = isset($data['is_shown_at_checkout']) ? $data['is_shown_at_checkout'] : null;
        $this->container['is_shown_in_pdf'] = isset($data['is_shown_in_pdf']) ? $data['is_shown_in_pdf'] : null;
        $this->container['is_shown_as_additional_costs'] = isset($data['is_shown_as_additional_costs']) ? $data['is_shown_as_additional_costs'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['surcharge'] = isset($data['surcharge']) ? $data['surcharge'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['backend_name'] === null) {
            $invalidProperties[] = "'backend_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of the property optional
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit The unit of measurement of the property. Value is null if no unit is associated. optional
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets property_group_id
     *
     * @return int|null
     */
    public function getPropertyGroupId()
    {
        return $this->container['property_group_id'];
    }

    /**
     * Sets property_group_id
     *
     * @param int|null $property_group_id The ID of the property group the property is assigned to. Value is null if property is not assigned to a property group. optional
     *
     * @return $this
     */
    public function setPropertyGroupId($property_group_id)
    {
        $this->container['property_group_id'] = $property_group_id;

        return $this;
    }

    /**
     * Gets backend_name
     *
     * @return string
     */
    public function getBackendName()
    {
        return $this->container['backend_name'];
    }

    /**
     * Sets backend_name
     *
     * @param string $backend_name The backend name of the property. The back end name is not visible to customers.
     *
     * @return $this
     */
    public function setBackendName($backend_name)
    {
        $this->container['backend_name'] = $backend_name;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string|null
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string|null $value_type Permitted property values are: empty = No property typeint = A whole number can be saved for an item, e.g. a size.float = A number with decimal places can be saved for an item, e.g. a measurement.selection = One of several options can be saved for the item. The values of the property value Selection can be managed using the route PropertySelection.text = Text can be saved for an item.file = A file can be saved for an item. optional allowed values are empty, int, float, selection, text, file
     *
     * @return $this
     */
    public function setValueType($value_type)
    {
        $this->container['value_type'] = $value_type;

        return $this;
    }

    /**
     * Gets is_searchable
     *
     * @return bool|null
     */
    public function getIsSearchable()
    {
        return $this->container['is_searchable'];
    }

    /**
     * Sets is_searchable
     *
     * @param bool|null $is_searchable Flag that indicates if items can be found by entering the property name as a search term. optional
     *
     * @return $this
     */
    public function setIsSearchable($is_searchable)
    {
        $this->container['is_searchable'] = $is_searchable;

        return $this;
    }

    /**
     * Gets is_oder_property
     *
     * @return bool|null
     */
    public function getIsOderProperty()
    {
        return $this->container['is_oder_property'];
    }

    /**
     * Sets is_oder_property
     *
     * @param bool|null $is_oder_property Flag that indicates if the property is available in the order process. Depending on the property type, customers e.g. can enter a text or value or select an option from a drop-down list. optional
     *
     * @return $this
     */
    public function setIsOderProperty($is_oder_property)
    {
        $this->container['is_oder_property'] = $is_oder_property;

        return $this;
    }

    /**
     * Gets is_shown_on_item_page
     *
     * @return bool|null
     */
    public function getIsShownOnItemPage()
    {
        return $this->container['is_shown_on_item_page'];
    }

    /**
     * Sets is_shown_on_item_page
     *
     * @param bool|null $is_shown_on_item_page Flag that indicates if the property will be shown on the item's page in the online store- optional
     *
     * @return $this
     */
    public function setIsShownOnItemPage($is_shown_on_item_page)
    {
        $this->container['is_shown_on_item_page'] = $is_shown_on_item_page;

        return $this;
    }

    /**
     * Gets is_shown_on_item_list
     *
     * @return bool|null
     */
    public function getIsShownOnItemList()
    {
        return $this->container['is_shown_on_item_list'];
    }

    /**
     * Sets is_shown_on_item_list
     *
     * @param bool|null $is_shown_on_item_list Flag that indicates if the property will be shown in the item listing in the online store. optional
     *
     * @return $this
     */
    public function setIsShownOnItemList($is_shown_on_item_list)
    {
        $this->container['is_shown_on_item_list'] = $is_shown_on_item_list;

        return $this;
    }

    /**
     * Gets is_shown_at_checkout
     *
     * @return bool|null
     */
    public function getIsShownAtCheckout()
    {
        return $this->container['is_shown_at_checkout'];
    }

    /**
     * Sets is_shown_at_checkout
     *
     * @param bool|null $is_shown_at_checkout Flag that indicates if the property will be shown in the order process. optional
     *
     * @return $this
     */
    public function setIsShownAtCheckout($is_shown_at_checkout)
    {
        $this->container['is_shown_at_checkout'] = $is_shown_at_checkout;

        return $this;
    }

    /**
     * Gets is_shown_in_pdf
     *
     * @return bool|null
     */
    public function getIsShownInPdf()
    {
        return $this->container['is_shown_in_pdf'];
    }

    /**
     * Sets is_shown_in_pdf
     *
     * @param bool|null $is_shown_in_pdf Flag that indicates if the property will be shown in PDF documents. optional
     *
     * @return $this
     */
    public function setIsShownInPdf($is_shown_in_pdf)
    {
        $this->container['is_shown_in_pdf'] = $is_shown_in_pdf;

        return $this;
    }

    /**
     * Gets is_shown_as_additional_costs
     *
     * @return bool|null
     */
    public function getIsShownAsAdditionalCosts()
    {
        return $this->container['is_shown_as_additional_costs'];
    }

    /**
     * Sets is_shown_as_additional_costs
     *
     * @param bool|null $is_shown_as_additional_costs Display as additional costs optional
     *
     * @return $this
     */
    public function setIsShownAsAdditionalCosts($is_shown_as_additional_costs)
    {
        $this->container['is_shown_as_additional_costs'] = $is_shown_as_additional_costs;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Internal comment/note saved for the property. Internal comments are not visible to customers. optional
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return float|null
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param float|null $surcharge The surcharge for the property. Surcharges will automatically be added to the item price in the detailed view of an item and in the order process. The default value is 0.00, i.e. no surcharge. In the plentymarkets front end, the template variable PriceDynamic displays the price of a variation including the surcharge. optional
     *
     * @return $this
     */
    public function setSurcharge($surcharge)
    {
        $this->container['surcharge'] = $surcharge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


