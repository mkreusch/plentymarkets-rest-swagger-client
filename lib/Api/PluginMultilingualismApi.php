<?php
/**
 * PluginMultilingualismApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PluginMultilingualismApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PluginMultilingualismApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restLanguagesTranslationsPost
     *
     * Create a new translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginTranslation
     */
    public function restLanguagesTranslationsPost($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name)
    {
        list($response) = $this->restLanguagesTranslationsPostWithHttpInfo($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name);
        return $response;
    }

    /**
     * Operation restLanguagesTranslationsPostWithHttpInfo
     *
     * Create a new translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLanguagesTranslationsPostWithHttpInfo($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name)
    {
        $request = $this->restLanguagesTranslationsPostRequest($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginTranslation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginTranslation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginTranslation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginTranslation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLanguagesTranslationsPostAsync
     *
     * Create a new translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restLanguagesTranslationsPostAsync($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name)
    {
        return $this->restLanguagesTranslationsPostAsyncWithHttpInfo($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLanguagesTranslationsPostAsyncWithHttpInfo
     *
     * Create a new translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restLanguagesTranslationsPostAsyncWithHttpInfo($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name)
    {
        $returnType = '\OpenAPI\Client\Model\PluginTranslation';
        $request = $this->restLanguagesTranslationsPostRequest($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLanguagesTranslationsPost'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The of the file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restLanguagesTranslationsPostRequest($plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name)
    {
        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restLanguagesTranslationsPost'
            );
        }
        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restLanguagesTranslationsPost'
            );
        }
        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code when calling restLanguagesTranslationsPost'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling restLanguagesTranslationsPost'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling restLanguagesTranslationsPost'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling restLanguagesTranslationsPost'
            );
        }

        $resourcePath = '/rest/languages/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($plugin_set_id)) {
            $plugin_set_id = ObjectSerializer::serializeCollection($plugin_set_id, '', true);
        }
        if ($plugin_set_id !== null) {
            $queryParams['$pluginSetId'] = $plugin_set_id;
        }
        // query params
        if (is_array($plugin_name)) {
            $plugin_name = ObjectSerializer::serializeCollection($plugin_name, '', true);
        }
        if ($plugin_name !== null) {
            $queryParams['$pluginName'] = $plugin_name;
        }
        // query params
        if (is_array($language_code)) {
            $language_code = ObjectSerializer::serializeCollection($language_code, '', true);
        }
        if ($language_code !== null) {
            $queryParams['$languageCode'] = $language_code;
        }
        // query params
        if (is_array($key)) {
            $key = ObjectSerializer::serializeCollection($key, '', true);
        }
        if ($key !== null) {
            $queryParams['$key'] = $key;
        }
        // query params
        if (is_array($value)) {
            $value = ObjectSerializer::serializeCollection($value, '', true);
        }
        if ($value !== null) {
            $queryParams['$value'] = $value;
        }
        // query params
        if (is_array($file_name)) {
            $file_name = ObjectSerializer::serializeCollection($file_name, '', true);
        }
        if ($file_name !== null) {
            $queryParams['$fileName'] = $file_name;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdDelete
     *
     * Delete a translation
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 translation_id2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restLanguagesTranslationsTranslationIdDelete($translation_id, $translation_id2)
    {
        $this->restLanguagesTranslationsTranslationIdDeleteWithHttpInfo($translation_id, $translation_id2);
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdDeleteWithHttpInfo
     *
     * Delete a translation
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLanguagesTranslationsTranslationIdDeleteWithHttpInfo($translation_id, $translation_id2)
    {
        $request = $this->restLanguagesTranslationsTranslationIdDeleteRequest($translation_id, $translation_id2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdDeleteAsync
     *
     * Delete a translation
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdDeleteAsync($translation_id, $translation_id2)
    {
        return $this->restLanguagesTranslationsTranslationIdDeleteAsyncWithHttpInfo($translation_id, $translation_id2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdDeleteAsyncWithHttpInfo
     *
     * Delete a translation
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdDeleteAsyncWithHttpInfo($translation_id, $translation_id2)
    {
        $returnType = '';
        $request = $this->restLanguagesTranslationsTranslationIdDeleteRequest($translation_id, $translation_id2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLanguagesTranslationsTranslationIdDelete'
     *
     * @param  int $translation_id The ID of the translation (required)
     * @param  int $translation_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restLanguagesTranslationsTranslationIdDeleteRequest($translation_id, $translation_id2)
    {
        // verify the required parameter 'translation_id' is set
        if ($translation_id === null || (is_array($translation_id) && count($translation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $translation_id when calling restLanguagesTranslationsTranslationIdDelete'
            );
        }
        // verify the required parameter 'translation_id2' is set
        if ($translation_id2 === null || (is_array($translation_id2) && count($translation_id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $translation_id2 when calling restLanguagesTranslationsTranslationIdDelete'
            );
        }

        $resourcePath = '/rest/languages/translations/{translationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($translation_id)) {
            $translation_id = ObjectSerializer::serializeCollection($translation_id, '', true);
        }
        if ($translation_id !== null) {
            $queryParams['$translationId'] = $translation_id;
        }


        // path params
        if ($translation_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'translationId' . '}',
                ObjectSerializer::toPathValue($translation_id2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdGet
     *
     * Get a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id translation_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginTranslation
     */
    public function restLanguagesTranslationsTranslationIdGet($id, $translation_id)
    {
        list($response) = $this->restLanguagesTranslationsTranslationIdGetWithHttpInfo($id, $translation_id);
        return $response;
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdGetWithHttpInfo
     *
     * Get a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLanguagesTranslationsTranslationIdGetWithHttpInfo($id, $translation_id)
    {
        $request = $this->restLanguagesTranslationsTranslationIdGetRequest($id, $translation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginTranslation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginTranslation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginTranslation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginTranslation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdGetAsync
     *
     * Get a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdGetAsync($id, $translation_id)
    {
        return $this->restLanguagesTranslationsTranslationIdGetAsyncWithHttpInfo($id, $translation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdGetAsyncWithHttpInfo
     *
     * Get a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdGetAsyncWithHttpInfo($id, $translation_id)
    {
        $returnType = '\OpenAPI\Client\Model\PluginTranslation';
        $request = $this->restLanguagesTranslationsTranslationIdGetRequest($id, $translation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLanguagesTranslationsTranslationIdGet'
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $translation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restLanguagesTranslationsTranslationIdGetRequest($id, $translation_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restLanguagesTranslationsTranslationIdGet'
            );
        }
        // verify the required parameter 'translation_id' is set
        if ($translation_id === null || (is_array($translation_id) && count($translation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $translation_id when calling restLanguagesTranslationsTranslationIdGet'
            );
        }

        $resourcePath = '/rest/languages/translations/{translationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['$id'] = $id;
        }


        // path params
        if ($translation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'translationId' . '}',
                ObjectSerializer::toPathValue($translation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdPut
     *
     * Update a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id translation_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginTranslation
     */
    public function restLanguagesTranslationsTranslationIdPut($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id)
    {
        list($response) = $this->restLanguagesTranslationsTranslationIdPutWithHttpInfo($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id);
        return $response;
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdPutWithHttpInfo
     *
     * Update a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restLanguagesTranslationsTranslationIdPutWithHttpInfo($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id)
    {
        $request = $this->restLanguagesTranslationsTranslationIdPutRequest($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginTranslation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginTranslation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginTranslation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginTranslation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdPutAsync
     *
     * Update a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdPutAsync($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id)
    {
        return $this->restLanguagesTranslationsTranslationIdPutAsyncWithHttpInfo($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restLanguagesTranslationsTranslationIdPutAsyncWithHttpInfo
     *
     * Update a translation
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restLanguagesTranslationsTranslationIdPutAsyncWithHttpInfo($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id)
    {
        $returnType = '\OpenAPI\Client\Model\PluginTranslation';
        $request = $this->restLanguagesTranslationsTranslationIdPutRequest($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restLanguagesTranslationsTranslationIdPut'
     *
     * @param  int $id The ID of the translation (required)
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $plugin_name The name of the plugin (required)
     * @param  string $language_code The language code for the translation (required)
     * @param  string $key The translation key (required)
     * @param  string $value The value of the translation (required)
     * @param  string $file_name The value of the translation (required)
     * @param  int $translation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restLanguagesTranslationsTranslationIdPutRequest($id, $plugin_set_id, $plugin_name, $language_code, $key, $value, $file_name, $translation_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restLanguagesTranslationsTranslationIdPut'
            );
        }
        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restLanguagesTranslationsTranslationIdPut'
            );
        }
        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restLanguagesTranslationsTranslationIdPut'
            );
        }
        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code when calling restLanguagesTranslationsTranslationIdPut'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling restLanguagesTranslationsTranslationIdPut'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling restLanguagesTranslationsTranslationIdPut'
            );
        }
        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling restLanguagesTranslationsTranslationIdPut'
            );
        }
        // verify the required parameter 'translation_id' is set
        if ($translation_id === null || (is_array($translation_id) && count($translation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $translation_id when calling restLanguagesTranslationsTranslationIdPut'
            );
        }

        $resourcePath = '/rest/languages/translations/{translationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['$id'] = $id;
        }
        // query params
        if (is_array($plugin_set_id)) {
            $plugin_set_id = ObjectSerializer::serializeCollection($plugin_set_id, '', true);
        }
        if ($plugin_set_id !== null) {
            $queryParams['$pluginSetId'] = $plugin_set_id;
        }
        // query params
        if (is_array($plugin_name)) {
            $plugin_name = ObjectSerializer::serializeCollection($plugin_name, '', true);
        }
        if ($plugin_name !== null) {
            $queryParams['$pluginName'] = $plugin_name;
        }
        // query params
        if (is_array($language_code)) {
            $language_code = ObjectSerializer::serializeCollection($language_code, '', true);
        }
        if ($language_code !== null) {
            $queryParams['$languageCode'] = $language_code;
        }
        // query params
        if (is_array($key)) {
            $key = ObjectSerializer::serializeCollection($key, '', true);
        }
        if ($key !== null) {
            $queryParams['$key'] = $key;
        }
        // query params
        if (is_array($value)) {
            $value = ObjectSerializer::serializeCollection($value, '', true);
        }
        if ($value !== null) {
            $queryParams['$value'] = $value;
        }
        // query params
        if (is_array($file_name)) {
            $file_name = ObjectSerializer::serializeCollection($file_name, '', true);
        }
        if ($file_name !== null) {
            $queryParams['$fileName'] = $file_name;
        }


        // path params
        if ($translation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'translationId' . '}',
                ObjectSerializer::toPathValue($translation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesLanguageCodeDelete
     *
     * Delete multiple translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  int $language_code2 language_code2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDelete($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        $this->restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2);
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteWithHttpInfo
     *
     * Delete multiple translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsync
     *
     * Delete multiple translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsync($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        return $this->restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsyncWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsyncWithHttpInfo
     *
     * Delete multiple translation
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteAsyncWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        $returnType = '';
        $request = $this->restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsPluginSetIdLanguagesLanguageCodeDeleteRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
            );
        }
        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code when calling restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
            );
        }
        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
            );
        }
        // verify the required parameter 'language_code2' is set
        if ($language_code2 === null || (is_array($language_code2) && count($language_code2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code2 when calling restPluginSetsPluginSetIdLanguagesLanguageCodeDelete'
            );
        }

        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages/{languageCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($plugin_set_id)) {
            $plugin_set_id = ObjectSerializer::serializeCollection($plugin_set_id, '', true);
        }
        if ($plugin_set_id !== null) {
            $queryParams['$pluginSetId'] = $plugin_set_id;
        }
        // query params
        if (is_array($language_code)) {
            $language_code = ObjectSerializer::serializeCollection($language_code, '', true);
        }
        if ($language_code !== null) {
            $queryParams['$languageCode'] = $language_code;
        }


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }
        // path params
        if ($language_code2 !== null) {
            $resourcePath = str_replace(
                '{' . 'languageCode' . '}',
                ObjectSerializer::toPathValue($language_code2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
