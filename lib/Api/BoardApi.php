<?php
/**
 * BoardApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BoardApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BoardApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdDelete
     *
     * Delete column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restBoardsBoardIdColumnsColumnIdDelete($board_id, $column_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdDeleteWithHttpInfo($board_id, $column_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdDeleteWithHttpInfo
     *
     * Delete column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdDeleteWithHttpInfo($board_id, $column_id)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdDeleteRequest($board_id, $column_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdDeleteAsync
     *
     * Delete column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdDeleteAsync($board_id, $column_id)
    {
        return $this->restBoardsBoardIdColumnsColumnIdDeleteAsyncWithHttpInfo($board_id, $column_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdDeleteAsyncWithHttpInfo
     *
     * Delete column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdDeleteAsyncWithHttpInfo($board_id, $column_id)
    {
        $returnType = 'object';
        $request = $this->restBoardsBoardIdColumnsColumnIdDeleteRequest($board_id, $column_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdDelete'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdDeleteRequest($board_id, $column_id)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdDelete'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdDelete'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPositionPut
     *
     * Update position of of a column
     *
     * @param  int $position The position number (required)
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restBoardsBoardIdColumnsColumnIdPositionPut($position, $board_id, $column_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdPositionPutWithHttpInfo($position, $board_id, $column_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPositionPutWithHttpInfo
     *
     * Update position of of a column
     *
     * @param  int $position The position number (required)
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdPositionPutWithHttpInfo($position, $board_id, $column_id)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdPositionPutRequest($position, $board_id, $column_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPositionPutAsync
     *
     * Update position of of a column
     *
     * @param  int $position The position number (required)
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdPositionPutAsync($position, $board_id, $column_id)
    {
        return $this->restBoardsBoardIdColumnsColumnIdPositionPutAsyncWithHttpInfo($position, $board_id, $column_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPositionPutAsyncWithHttpInfo
     *
     * Update position of of a column
     *
     * @param  int $position The position number (required)
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdPositionPutAsyncWithHttpInfo($position, $board_id, $column_id)
    {
        $returnType = 'object';
        $request = $this->restBoardsBoardIdColumnsColumnIdPositionPutRequest($position, $board_id, $column_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdPositionPut'
     *
     * @param  int $position The position number (required)
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdPositionPutRequest($position, $board_id, $column_id)
    {
        // verify the required parameter 'position' is set
        if ($position === null || (is_array($position) && count($position) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $position when calling restBoardsBoardIdColumnsColumnIdPositionPut'
            );
        }
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdPositionPut'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdPositionPut'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/position';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($position)) {
            $position = ObjectSerializer::serializeCollection($position, '', true);
        }
        if ($position !== null) {
            $queryParams['position'] = $position;
        }


        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPost
     *
     * Copy column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardColumn
     */
    public function restBoardsBoardIdColumnsColumnIdPost($board_id, $column_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdPostWithHttpInfo($board_id, $column_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPostWithHttpInfo
     *
     * Copy column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardColumn, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdPostWithHttpInfo($board_id, $column_id)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdPostRequest($board_id, $column_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardColumn' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardColumn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardColumn';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardColumn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPostAsync
     *
     * Copy column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdPostAsync($board_id, $column_id)
    {
        return $this->restBoardsBoardIdColumnsColumnIdPostAsyncWithHttpInfo($board_id, $column_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPostAsyncWithHttpInfo
     *
     * Copy column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdPostAsyncWithHttpInfo($board_id, $column_id)
    {
        $returnType = '\OpenAPI\Client\Model\BoardColumn';
        $request = $this->restBoardsBoardIdColumnsColumnIdPostRequest($board_id, $column_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdPost'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdPostRequest($board_id, $column_id)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdPost'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdPost'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPut
     *
     * Update column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject36 $_rest_boards_board_id_columns_column_id _rest_boards_board_id_columns_column_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardColumn
     */
    public function restBoardsBoardIdColumnsColumnIdPut($board_id, $column_id, $_rest_boards_board_id_columns_column_id = null)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdPutWithHttpInfo($board_id, $column_id, $_rest_boards_board_id_columns_column_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPutWithHttpInfo
     *
     * Update column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject36 $_rest_boards_board_id_columns_column_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardColumn, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdPutWithHttpInfo($board_id, $column_id, $_rest_boards_board_id_columns_column_id = null)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdPutRequest($board_id, $column_id, $_rest_boards_board_id_columns_column_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardColumn' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardColumn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardColumn';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardColumn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPutAsync
     *
     * Update column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject36 $_rest_boards_board_id_columns_column_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdPutAsync($board_id, $column_id, $_rest_boards_board_id_columns_column_id = null)
    {
        return $this->restBoardsBoardIdColumnsColumnIdPutAsyncWithHttpInfo($board_id, $column_id, $_rest_boards_board_id_columns_column_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdPutAsyncWithHttpInfo
     *
     * Update column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject36 $_rest_boards_board_id_columns_column_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdPutAsyncWithHttpInfo($board_id, $column_id, $_rest_boards_board_id_columns_column_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\BoardColumn';
        $request = $this->restBoardsBoardIdColumnsColumnIdPutRequest($board_id, $column_id, $_rest_boards_board_id_columns_column_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdPut'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject36 $_rest_boards_board_id_columns_column_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdPutRequest($board_id, $column_id, $_rest_boards_board_id_columns_column_id = null)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdPut'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdPut'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($_rest_boards_board_id_columns_column_id)) {
            $_tempBody = $_rest_boards_board_id_columns_column_id;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksGet
     *
     * List all task of a column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  int $start_at The position of a task to start listing at (optional)
     * @param  int $tasks_per_page The number of tasks to list per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardTask[]
     */
    public function restBoardsBoardIdColumnsColumnIdTasksGet($board_id, $column_id, $start_at = null, $tasks_per_page = null)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksGetWithHttpInfo($board_id, $column_id, $start_at, $tasks_per_page);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksGetWithHttpInfo
     *
     * List all task of a column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  int $start_at The position of a task to start listing at (optional)
     * @param  int $tasks_per_page The number of tasks to list per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardTask[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksGetWithHttpInfo($board_id, $column_id, $start_at = null, $tasks_per_page = null)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksGetRequest($board_id, $column_id, $start_at, $tasks_per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardTask[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardTask[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardTask[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardTask[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksGetAsync
     *
     * List all task of a column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  int $start_at The position of a task to start listing at (optional)
     * @param  int $tasks_per_page The number of tasks to list per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksGetAsync($board_id, $column_id, $start_at = null, $tasks_per_page = null)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksGetAsyncWithHttpInfo($board_id, $column_id, $start_at, $tasks_per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksGetAsyncWithHttpInfo
     *
     * List all task of a column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  int $start_at The position of a task to start listing at (optional)
     * @param  int $tasks_per_page The number of tasks to list per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksGetAsyncWithHttpInfo($board_id, $column_id, $start_at = null, $tasks_per_page = null)
    {
        $returnType = '\OpenAPI\Client\Model\BoardTask[]';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksGetRequest($board_id, $column_id, $start_at, $tasks_per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksGet'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  int $start_at The position of a task to start listing at (optional)
     * @param  int $tasks_per_page The number of tasks to list per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksGetRequest($board_id, $column_id, $start_at = null, $tasks_per_page = null)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksGet'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksGet'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($start_at)) {
            $start_at = ObjectSerializer::serializeCollection($start_at, '', true);
        }
        if ($start_at !== null) {
            $queryParams['startAt'] = $start_at;
        }
        // query params
        if (is_array($tasks_per_page)) {
            $tasks_per_page = ObjectSerializer::serializeCollection($tasks_per_page, '', true);
        }
        if ($tasks_per_page !== null) {
            $queryParams['tasksPerPage'] = $tasks_per_page;
        }


        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksPost
     *
     * Create task in specific column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject37 $_rest_boards_board_id_columns_column_id_tasks _rest_boards_board_id_columns_column_id_tasks (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardTask
     */
    public function restBoardsBoardIdColumnsColumnIdTasksPost($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks = null)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksPostWithHttpInfo($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksPostWithHttpInfo
     *
     * Create task in specific column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject37 $_rest_boards_board_id_columns_column_id_tasks (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksPostWithHttpInfo($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks = null)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksPostRequest($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardTask' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardTask';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksPostAsync
     *
     * Create task in specific column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject37 $_rest_boards_board_id_columns_column_id_tasks (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksPostAsync($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks = null)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksPostAsyncWithHttpInfo($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksPostAsyncWithHttpInfo
     *
     * Create task in specific column
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject37 $_rest_boards_board_id_columns_column_id_tasks (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksPostAsyncWithHttpInfo($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks = null)
    {
        $returnType = '\OpenAPI\Client\Model\BoardTask';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksPostRequest($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksPost'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  \OpenAPI\Client\Model\InlineObject37 $_rest_boards_board_id_columns_column_id_tasks (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksPostRequest($board_id, $column_id, $_rest_boards_board_id_columns_column_id_tasks = null)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksPost'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksPost'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($_rest_boards_board_id_columns_column_id_tasks)) {
            $_tempBody = $_rest_boards_board_id_columns_column_id_tasks;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdDelete
     *
     * Delete task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdDelete($board_id, $column_id, $task_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteWithHttpInfo($board_id, $column_id, $task_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteWithHttpInfo
     *
     * Delete task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteWithHttpInfo($board_id, $column_id, $task_id)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteRequest($board_id, $column_id, $task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteAsync
     *
     * Delete task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteAsync($board_id, $column_id, $task_id)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteAsyncWithHttpInfo($board_id, $column_id, $task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteAsyncWithHttpInfo
     *
     * Delete task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteAsyncWithHttpInfo($board_id, $column_id, $task_id)
    {
        $returnType = 'object';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteRequest($board_id, $column_id, $task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksTaskIdDelete'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksTaskIdDeleteRequest($board_id, $column_id, $task_id)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdDelete'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdDelete'
            );
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdDelete'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdGet
     *
     * Get task by ID
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardTask
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdGet($board_id, $column_id, $task_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdGetWithHttpInfo($board_id, $column_id, $task_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdGetWithHttpInfo
     *
     * Get task by ID
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdGetWithHttpInfo($board_id, $column_id, $task_id)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdGetRequest($board_id, $column_id, $task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardTask' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardTask';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdGetAsync
     *
     * Get task by ID
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdGetAsync($board_id, $column_id, $task_id)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdGetAsyncWithHttpInfo($board_id, $column_id, $task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdGetAsyncWithHttpInfo
     *
     * Get task by ID
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdGetAsyncWithHttpInfo($board_id, $column_id, $task_id)
    {
        $returnType = '\OpenAPI\Client\Model\BoardTask';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdGetRequest($board_id, $column_id, $task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksTaskIdGet'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksTaskIdGetRequest($board_id, $column_id, $task_id)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdGet'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdGet'
            );
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdGet'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPut
     *
     * Update task position
     *
     * @param  string $board_id The ID of the board (required)
     * @param  int $position The new position of the task (required)
     * @param  string $column_id The ID of the column the task belongs to (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPut($board_id, $position, $column_id, $task_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutWithHttpInfo($board_id, $position, $column_id, $task_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutWithHttpInfo
     *
     * Update task position
     *
     * @param  string $board_id The ID of the board (required)
     * @param  int $position The new position of the task (required)
     * @param  string $column_id The ID of the column the task belongs to (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutWithHttpInfo($board_id, $position, $column_id, $task_id)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutRequest($board_id, $position, $column_id, $task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutAsync
     *
     * Update task position
     *
     * @param  string $board_id The ID of the board (required)
     * @param  int $position The new position of the task (required)
     * @param  string $column_id The ID of the column the task belongs to (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutAsync($board_id, $position, $column_id, $task_id)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutAsyncWithHttpInfo($board_id, $position, $column_id, $task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutAsyncWithHttpInfo
     *
     * Update task position
     *
     * @param  string $board_id The ID of the board (required)
     * @param  int $position The new position of the task (required)
     * @param  string $column_id The ID of the column the task belongs to (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutAsyncWithHttpInfo($board_id, $position, $column_id, $task_id)
    {
        $returnType = 'object';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutRequest($board_id, $position, $column_id, $task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPut'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  int $position The new position of the task (required)
     * @param  string $column_id The ID of the column the task belongs to (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPutRequest($board_id, $position, $column_id, $task_id)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPut'
            );
        }
        // verify the required parameter 'position' is set
        if ($position === null || (is_array($position) && count($position) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $position when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPut'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPut'
            );
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPositionPut'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks/{taskId}/position';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($position)) {
            $position = ObjectSerializer::serializeCollection($position, '', true);
        }
        if ($position !== null) {
            $queryParams['position'] = $position;
        }


        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPost
     *
     * Copy task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardTask
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPost($board_id, $column_id, $task_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPostWithHttpInfo($board_id, $column_id, $task_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPostWithHttpInfo
     *
     * Copy task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPostWithHttpInfo($board_id, $column_id, $task_id)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPostRequest($board_id, $column_id, $task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardTask' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardTask';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPostAsync
     *
     * Copy task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPostAsync($board_id, $column_id, $task_id)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPostAsyncWithHttpInfo($board_id, $column_id, $task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPostAsyncWithHttpInfo
     *
     * Copy task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPostAsyncWithHttpInfo($board_id, $column_id, $task_id)
    {
        $returnType = '\OpenAPI\Client\Model\BoardTask';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPostRequest($board_id, $column_id, $task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksTaskIdPost'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksTaskIdPostRequest($board_id, $column_id, $task_id)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPost'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPost'
            );
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPost'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPut
     *
     * Update task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  \OpenAPI\Client\Model\InlineObject38 $_rest_boards_board_id_columns_column_id_tasks_task_id _rest_boards_board_id_columns_column_id_tasks_task_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardTask
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPut($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id = null)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPutWithHttpInfo($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPutWithHttpInfo
     *
     * Update task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  \OpenAPI\Client\Model\InlineObject38 $_rest_boards_board_id_columns_column_id_tasks_task_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPutWithHttpInfo($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id = null)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPutRequest($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardTask' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardTask';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPutAsync
     *
     * Update task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  \OpenAPI\Client\Model\InlineObject38 $_rest_boards_board_id_columns_column_id_tasks_task_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPutAsync($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id = null)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPutAsyncWithHttpInfo($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdPutAsyncWithHttpInfo
     *
     * Update task
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  \OpenAPI\Client\Model\InlineObject38 $_rest_boards_board_id_columns_column_id_tasks_task_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdPutAsyncWithHttpInfo($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\BoardTask';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdPutRequest($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksTaskIdPut'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  \OpenAPI\Client\Model\InlineObject38 $_rest_boards_board_id_columns_column_id_tasks_task_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksTaskIdPutRequest($board_id, $column_id, $task_id, $_rest_boards_board_id_columns_column_id_tasks_task_id = null)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPut'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPut'
            );
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdPut'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($_rest_boards_board_id_columns_column_id_tasks_task_id)) {
            $_tempBody = $_rest_boards_board_id_columns_column_id_tasks_task_id;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPost
     *
     * Create reference
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_value Reference type followed by foreign ID of the referenced object. Syntax: TYPE-ID Example: user-123456 Types: user,ticket,contact,order,item (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardTaskReference
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPost($board_id, $column_id, $task_id, $reference_value)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostWithHttpInfo($board_id, $column_id, $task_id, $reference_value);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostWithHttpInfo
     *
     * Create reference
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_value Reference type followed by foreign ID of the referenced object. Syntax: TYPE-ID Example: user-123456 Types: user,ticket,contact,order,item (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardTaskReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostWithHttpInfo($board_id, $column_id, $task_id, $reference_value)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostRequest($board_id, $column_id, $task_id, $reference_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardTaskReference' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardTaskReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardTaskReference';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardTaskReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostAsync
     *
     * Create reference
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_value Reference type followed by foreign ID of the referenced object. Syntax: TYPE-ID Example: user-123456 Types: user,ticket,contact,order,item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostAsync($board_id, $column_id, $task_id, $reference_value)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostAsyncWithHttpInfo($board_id, $column_id, $task_id, $reference_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostAsyncWithHttpInfo
     *
     * Create reference
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_value Reference type followed by foreign ID of the referenced object. Syntax: TYPE-ID Example: user-123456 Types: user,ticket,contact,order,item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostAsyncWithHttpInfo($board_id, $column_id, $task_id, $reference_value)
    {
        $returnType = '\OpenAPI\Client\Model\BoardTaskReference';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostRequest($board_id, $column_id, $task_id, $reference_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPost'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_value Reference type followed by foreign ID of the referenced object. Syntax: TYPE-ID Example: user-123456 Types: user,ticket,contact,order,item (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPostRequest($board_id, $column_id, $task_id, $reference_value)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPost'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPost'
            );
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPost'
            );
        }
        // verify the required parameter 'reference_value' is set
        if ($reference_value === null || (is_array($reference_value) && count($reference_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_value when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesPost'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks/{taskId}/references';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($reference_value)) {
            $reference_value = ObjectSerializer::serializeCollection($reference_value, '', true);
        }
        if ($reference_value !== null) {
            $queryParams['referenceValue'] = $reference_value;
        }


        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDelete
     *
     * Delete reference from a given task
     *
     * @param  string $board_id The ID of the task (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_id The ID of the reference (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDelete($board_id, $column_id, $task_id, $reference_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteWithHttpInfo($board_id, $column_id, $task_id, $reference_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteWithHttpInfo
     *
     * Delete reference from a given task
     *
     * @param  string $board_id The ID of the task (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_id The ID of the reference (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteWithHttpInfo($board_id, $column_id, $task_id, $reference_id)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteRequest($board_id, $column_id, $task_id, $reference_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteAsync
     *
     * Delete reference from a given task
     *
     * @param  string $board_id The ID of the task (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_id The ID of the reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteAsync($board_id, $column_id, $task_id, $reference_id)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteAsyncWithHttpInfo($board_id, $column_id, $task_id, $reference_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteAsyncWithHttpInfo
     *
     * Delete reference from a given task
     *
     * @param  string $board_id The ID of the task (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_id The ID of the reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteAsyncWithHttpInfo($board_id, $column_id, $task_id, $reference_id)
    {
        $returnType = 'object';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteRequest($board_id, $column_id, $task_id, $reference_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDelete'
     *
     * @param  string $board_id The ID of the task (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_id The ID of the reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDeleteRequest($board_id, $column_id, $task_id, $reference_id)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDelete'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDelete'
            );
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDelete'
            );
        }
        // verify the required parameter 'reference_id' is set
        if ($reference_id === null || (is_array($reference_id) && count($reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceIdDelete'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks/{taskId}/references/{referenceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($reference_id !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceId' . '}',
                ObjectSerializer::toPathValue($reference_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGet
     *
     * Check reference key
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_type The type of the reference (required)
     * @param  int $reference_key The key of the reference (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGet($board_id, $column_id, $task_id, $reference_type, $reference_key)
    {
        list($response) = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetWithHttpInfo($board_id, $column_id, $task_id, $reference_type, $reference_key);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetWithHttpInfo
     *
     * Check reference key
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_type The type of the reference (required)
     * @param  int $reference_key The key of the reference (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetWithHttpInfo($board_id, $column_id, $task_id, $reference_type, $reference_key)
    {
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetRequest($board_id, $column_id, $task_id, $reference_type, $reference_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetAsync
     *
     * Check reference key
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_type The type of the reference (required)
     * @param  int $reference_key The key of the reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetAsync($board_id, $column_id, $task_id, $reference_type, $reference_key)
    {
        return $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetAsyncWithHttpInfo($board_id, $column_id, $task_id, $reference_type, $reference_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetAsyncWithHttpInfo
     *
     * Check reference key
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_type The type of the reference (required)
     * @param  int $reference_key The key of the reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetAsyncWithHttpInfo($board_id, $column_id, $task_id, $reference_type, $reference_key)
    {
        $returnType = 'object';
        $request = $this->restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetRequest($board_id, $column_id, $task_id, $reference_type, $reference_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGet'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  string $column_id The ID of the column (required)
     * @param  string $task_id The ID of the task (required)
     * @param  string $reference_type The type of the reference (required)
     * @param  int $reference_key The key of the reference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGetRequest($board_id, $column_id, $task_id, $reference_type, $reference_key)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGet'
            );
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null || (is_array($column_id) && count($column_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGet'
            );
        }
        // verify the required parameter 'task_id' is set
        if ($task_id === null || (is_array($task_id) && count($task_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGet'
            );
        }
        // verify the required parameter 'reference_type' is set
        if ($reference_type === null || (is_array($reference_type) && count($reference_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_type when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGet'
            );
        }
        // verify the required parameter 'reference_key' is set
        if ($reference_key === null || (is_array($reference_key) && count($reference_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_key when calling restBoardsBoardIdColumnsColumnIdTasksTaskIdReferencesReferenceTypeReferenceKeyGet'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns/{columnId}/tasks/{taskId}/references/{referenceType}/{referenceKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                '{' . 'columnId' . '}',
                ObjectSerializer::toPathValue($column_id),
                $resourcePath
            );
        }
        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($reference_type !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceType' . '}',
                ObjectSerializer::toPathValue($reference_type),
                $resourcePath
            );
        }
        // path params
        if ($reference_key !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceKey' . '}',
                ObjectSerializer::toPathValue($reference_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsGet
     *
     * List all columns of a given board
     *
     * @param  string $board_id The ID of the board (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardColumn[]
     */
    public function restBoardsBoardIdColumnsGet($board_id)
    {
        list($response) = $this->restBoardsBoardIdColumnsGetWithHttpInfo($board_id);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsGetWithHttpInfo
     *
     * List all columns of a given board
     *
     * @param  string $board_id The ID of the board (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardColumn[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsGetWithHttpInfo($board_id)
    {
        $request = $this->restBoardsBoardIdColumnsGetRequest($board_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardColumn[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardColumn[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardColumn[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardColumn[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsGetAsync
     *
     * List all columns of a given board
     *
     * @param  string $board_id The ID of the board (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsGetAsync($board_id)
    {
        return $this->restBoardsBoardIdColumnsGetAsyncWithHttpInfo($board_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsGetAsyncWithHttpInfo
     *
     * List all columns of a given board
     *
     * @param  string $board_id The ID of the board (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsGetAsyncWithHttpInfo($board_id)
    {
        $returnType = '\OpenAPI\Client\Model\BoardColumn[]';
        $request = $this->restBoardsBoardIdColumnsGetRequest($board_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsGet'
     *
     * @param  string $board_id The ID of the board (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsGetRequest($board_id)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsGet'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restBoardsBoardIdColumnsPost
     *
     * Create column and assign it to a board
     *
     * @param  string $board_id The ID of the board (required)
     * @param  \OpenAPI\Client\Model\InlineObject35 $_rest_boards_board_id_columns _rest_boards_board_id_columns (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BoardColumn
     */
    public function restBoardsBoardIdColumnsPost($board_id, $_rest_boards_board_id_columns = null)
    {
        list($response) = $this->restBoardsBoardIdColumnsPostWithHttpInfo($board_id, $_rest_boards_board_id_columns);
        return $response;
    }

    /**
     * Operation restBoardsBoardIdColumnsPostWithHttpInfo
     *
     * Create column and assign it to a board
     *
     * @param  string $board_id The ID of the board (required)
     * @param  \OpenAPI\Client\Model\InlineObject35 $_rest_boards_board_id_columns (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BoardColumn, HTTP status code, HTTP response headers (array of strings)
     */
    public function restBoardsBoardIdColumnsPostWithHttpInfo($board_id, $_rest_boards_board_id_columns = null)
    {
        $request = $this->restBoardsBoardIdColumnsPostRequest($board_id, $_rest_boards_board_id_columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BoardColumn' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BoardColumn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BoardColumn';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BoardColumn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restBoardsBoardIdColumnsPostAsync
     *
     * Create column and assign it to a board
     *
     * @param  string $board_id The ID of the board (required)
     * @param  \OpenAPI\Client\Model\InlineObject35 $_rest_boards_board_id_columns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsPostAsync($board_id, $_rest_boards_board_id_columns = null)
    {
        return $this->restBoardsBoardIdColumnsPostAsyncWithHttpInfo($board_id, $_rest_boards_board_id_columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restBoardsBoardIdColumnsPostAsyncWithHttpInfo
     *
     * Create column and assign it to a board
     *
     * @param  string $board_id The ID of the board (required)
     * @param  \OpenAPI\Client\Model\InlineObject35 $_rest_boards_board_id_columns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restBoardsBoardIdColumnsPostAsyncWithHttpInfo($board_id, $_rest_boards_board_id_columns = null)
    {
        $returnType = '\OpenAPI\Client\Model\BoardColumn';
        $request = $this->restBoardsBoardIdColumnsPostRequest($board_id, $_rest_boards_board_id_columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restBoardsBoardIdColumnsPost'
     *
     * @param  string $board_id The ID of the board (required)
     * @param  \OpenAPI\Client\Model\InlineObject35 $_rest_boards_board_id_columns (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restBoardsBoardIdColumnsPostRequest($board_id, $_rest_boards_board_id_columns = null)
    {
        // verify the required parameter 'board_id' is set
        if ($board_id === null || (is_array($board_id) && count($board_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $board_id when calling restBoardsBoardIdColumnsPost'
            );
        }

        $resourcePath = '/rest/boards/{boardId}/columns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                '{' . 'boardId' . '}',
                ObjectSerializer::toPathValue($board_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($_rest_boards_board_id_columns)) {
            $_tempBody = $_rest_boards_board_id_columns;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
