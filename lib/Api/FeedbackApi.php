<?php
/**
 * FeedbackApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FeedbackApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FeedbackApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restFeedbacksCommentCommentIdDelete
     *
     * Delete a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id comment_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restFeedbacksCommentCommentIdDelete($feedback_comment_id, $comment_id)
    {
        $this->restFeedbacksCommentCommentIdDeleteWithHttpInfo($feedback_comment_id, $comment_id);
    }

    /**
     * Operation restFeedbacksCommentCommentIdDeleteWithHttpInfo
     *
     * Delete a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksCommentCommentIdDeleteWithHttpInfo($feedback_comment_id, $comment_id)
    {
        $request = $this->restFeedbacksCommentCommentIdDeleteRequest($feedback_comment_id, $comment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksCommentCommentIdDeleteAsync
     *
     * Delete a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksCommentCommentIdDeleteAsync($feedback_comment_id, $comment_id)
    {
        return $this->restFeedbacksCommentCommentIdDeleteAsyncWithHttpInfo($feedback_comment_id, $comment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksCommentCommentIdDeleteAsyncWithHttpInfo
     *
     * Delete a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksCommentCommentIdDeleteAsyncWithHttpInfo($feedback_comment_id, $comment_id)
    {
        $returnType = '';
        $request = $this->restFeedbacksCommentCommentIdDeleteRequest($feedback_comment_id, $comment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksCommentCommentIdDelete'
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksCommentCommentIdDeleteRequest($feedback_comment_id, $comment_id)
    {
        // verify the required parameter 'feedback_comment_id' is set
        if ($feedback_comment_id === null || (is_array($feedback_comment_id) && count($feedback_comment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_comment_id when calling restFeedbacksCommentCommentIdDelete'
            );
        }
        // verify the required parameter 'comment_id' is set
        if ($comment_id === null || (is_array($comment_id) && count($comment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_id when calling restFeedbacksCommentCommentIdDelete'
            );
        }

        $resourcePath = '/rest/feedbacks/comment/{commentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($feedback_comment_id)) {
            $feedback_comment_id = ObjectSerializer::serializeCollection($feedback_comment_id, '', true);
        }
        if ($feedback_comment_id !== null) {
            $queryParams['feedbackCommentId'] = $feedback_comment_id;
        }


        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commentId' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksCommentCommentIdGet
     *
     * Get a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id comment_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedbackComment
     */
    public function restFeedbacksCommentCommentIdGet($feedback_comment_id, $comment_id)
    {
        list($response) = $this->restFeedbacksCommentCommentIdGetWithHttpInfo($feedback_comment_id, $comment_id);
        return $response;
    }

    /**
     * Operation restFeedbacksCommentCommentIdGetWithHttpInfo
     *
     * Get a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedbackComment, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksCommentCommentIdGetWithHttpInfo($feedback_comment_id, $comment_id)
    {
        $request = $this->restFeedbacksCommentCommentIdGetRequest($feedback_comment_id, $comment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedbackComment' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedbackComment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FeedbackComment';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedbackComment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksCommentCommentIdGetAsync
     *
     * Get a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksCommentCommentIdGetAsync($feedback_comment_id, $comment_id)
    {
        return $this->restFeedbacksCommentCommentIdGetAsyncWithHttpInfo($feedback_comment_id, $comment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksCommentCommentIdGetAsyncWithHttpInfo
     *
     * Get a feedback comment
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksCommentCommentIdGetAsyncWithHttpInfo($feedback_comment_id, $comment_id)
    {
        $returnType = '\OpenAPI\Client\Model\FeedbackComment';
        $request = $this->restFeedbacksCommentCommentIdGetRequest($feedback_comment_id, $comment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksCommentCommentIdGet'
     *
     * @param  int $feedback_comment_id The ID of the feedback comment (required)
     * @param  int $comment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksCommentCommentIdGetRequest($feedback_comment_id, $comment_id)
    {
        // verify the required parameter 'feedback_comment_id' is set
        if ($feedback_comment_id === null || (is_array($feedback_comment_id) && count($feedback_comment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_comment_id when calling restFeedbacksCommentCommentIdGet'
            );
        }
        // verify the required parameter 'comment_id' is set
        if ($comment_id === null || (is_array($comment_id) && count($comment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_id when calling restFeedbacksCommentCommentIdGet'
            );
        }

        $resourcePath = '/rest/feedbacks/comment/{commentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($feedback_comment_id)) {
            $feedback_comment_id = ObjectSerializer::serializeCollection($feedback_comment_id, '', true);
        }
        if ($feedback_comment_id !== null) {
            $queryParams['feedbackCommentId'] = $feedback_comment_id;
        }


        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commentId' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksCommentPost
     *
     * Create a feedback comment
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedbackComment
     */
    public function restFeedbacksCommentPost($message, $comment_relation_target_type_id, $comment_relation_target_id)
    {
        list($response) = $this->restFeedbacksCommentPostWithHttpInfo($message, $comment_relation_target_type_id, $comment_relation_target_id);
        return $response;
    }

    /**
     * Operation restFeedbacksCommentPostWithHttpInfo
     *
     * Create a feedback comment
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedbackComment, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksCommentPostWithHttpInfo($message, $comment_relation_target_type_id, $comment_relation_target_id)
    {
        $request = $this->restFeedbacksCommentPostRequest($message, $comment_relation_target_type_id, $comment_relation_target_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedbackComment' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedbackComment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FeedbackComment';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedbackComment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksCommentPostAsync
     *
     * Create a feedback comment
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksCommentPostAsync($message, $comment_relation_target_type_id, $comment_relation_target_id)
    {
        return $this->restFeedbacksCommentPostAsyncWithHttpInfo($message, $comment_relation_target_type_id, $comment_relation_target_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksCommentPostAsyncWithHttpInfo
     *
     * Create a feedback comment
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksCommentPostAsyncWithHttpInfo($message, $comment_relation_target_type_id, $comment_relation_target_id)
    {
        $returnType = '\OpenAPI\Client\Model\FeedbackComment';
        $request = $this->restFeedbacksCommentPostRequest($message, $comment_relation_target_type_id, $comment_relation_target_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksCommentPost'
     *
     * @param  string $message Feedback comment message (required)
     * @param  int $comment_relation_target_type_id The type ID of the comment&#39;s target (required)
     * @param  int $comment_relation_target_id The ID of the comment&#39;s target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksCommentPostRequest($message, $comment_relation_target_type_id, $comment_relation_target_id)
    {
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling restFeedbacksCommentPost'
            );
        }
        // verify the required parameter 'comment_relation_target_type_id' is set
        if ($comment_relation_target_type_id === null || (is_array($comment_relation_target_type_id) && count($comment_relation_target_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_relation_target_type_id when calling restFeedbacksCommentPost'
            );
        }
        // verify the required parameter 'comment_relation_target_id' is set
        if ($comment_relation_target_id === null || (is_array($comment_relation_target_id) && count($comment_relation_target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_relation_target_id when calling restFeedbacksCommentPost'
            );
        }

        $resourcePath = '/rest/feedbacks/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($message)) {
            $message = ObjectSerializer::serializeCollection($message, '', true);
        }
        if ($message !== null) {
            $queryParams['message'] = $message;
        }
        // query params
        if (is_array($comment_relation_target_type_id)) {
            $comment_relation_target_type_id = ObjectSerializer::serializeCollection($comment_relation_target_type_id, '', true);
        }
        if ($comment_relation_target_type_id !== null) {
            $queryParams['commentRelationTargetTypeId'] = $comment_relation_target_type_id;
        }
        // query params
        if (is_array($comment_relation_target_id)) {
            $comment_relation_target_id = ObjectSerializer::serializeCollection($comment_relation_target_id, '', true);
        }
        if ($comment_relation_target_id !== null) {
            $queryParams['commentRelationTargetId'] = $comment_relation_target_id;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksCommentsGet
     *
     * List feedback comments
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedbackComment[]
     */
    public function restFeedbacksCommentsGet()
    {
        list($response) = $this->restFeedbacksCommentsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restFeedbacksCommentsGetWithHttpInfo
     *
     * List feedback comments
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedbackComment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksCommentsGetWithHttpInfo()
    {
        $request = $this->restFeedbacksCommentsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedbackComment[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedbackComment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FeedbackComment[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedbackComment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksCommentsGetAsync
     *
     * List feedback comments
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksCommentsGetAsync()
    {
        return $this->restFeedbacksCommentsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksCommentsGetAsyncWithHttpInfo
     *
     * List feedback comments
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksCommentsGetAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\FeedbackComment[]';
        $request = $this->restFeedbacksCommentsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksCommentsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksCommentsGetRequest()
    {

        $resourcePath = '/rest/feedbacks/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksDeleteFeedbacksFeedbackIdsDelete
     *
     * Delete multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDelete($feedback_ids)
    {
        $this->restFeedbacksDeleteFeedbacksFeedbackIdsDeleteWithHttpInfo($feedback_ids);
    }

    /**
     * Operation restFeedbacksDeleteFeedbacksFeedbackIdsDeleteWithHttpInfo
     *
     * Delete multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDeleteWithHttpInfo($feedback_ids)
    {
        $request = $this->restFeedbacksDeleteFeedbacksFeedbackIdsDeleteRequest($feedback_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsync
     *
     * Delete multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsync($feedback_ids)
    {
        return $this->restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsyncWithHttpInfo($feedback_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsyncWithHttpInfo
     *
     * Delete multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksDeleteFeedbacksFeedbackIdsDeleteAsyncWithHttpInfo($feedback_ids)
    {
        $returnType = '';
        $request = $this->restFeedbacksDeleteFeedbacksFeedbackIdsDeleteRequest($feedback_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksDeleteFeedbacksFeedbackIdsDelete'
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksDeleteFeedbacksFeedbackIdsDeleteRequest($feedback_ids)
    {
        // verify the required parameter 'feedback_ids' is set
        if ($feedback_ids === null || (is_array($feedback_ids) && count($feedback_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_ids when calling restFeedbacksDeleteFeedbacksFeedbackIdsDelete'
            );
        }

        $resourcePath = '/rest/feedbacks/delete_feedbacks/{feedbackIds}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_ids !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackIds' . '}',
                ObjectSerializer::toPathValue($feedback_ids),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdDelete
     *
     * Delete a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restFeedbacksFeedbackFeedbackIdDelete($feedback_id)
    {
        $this->restFeedbacksFeedbackFeedbackIdDeleteWithHttpInfo($feedback_id);
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdDeleteWithHttpInfo
     *
     * Delete a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackFeedbackIdDeleteWithHttpInfo($feedback_id)
    {
        $request = $this->restFeedbacksFeedbackFeedbackIdDeleteRequest($feedback_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdDeleteAsync
     *
     * Delete a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdDeleteAsync($feedback_id)
    {
        return $this->restFeedbacksFeedbackFeedbackIdDeleteAsyncWithHttpInfo($feedback_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdDeleteAsyncWithHttpInfo
     *
     * Delete a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdDeleteAsyncWithHttpInfo($feedback_id)
    {
        $returnType = '';
        $request = $this->restFeedbacksFeedbackFeedbackIdDeleteRequest($feedback_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackFeedbackIdDelete'
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksFeedbackFeedbackIdDeleteRequest($feedback_id)
    {
        // verify the required parameter 'feedback_id' is set
        if ($feedback_id === null || (is_array($feedback_id) && count($feedback_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_id when calling restFeedbacksFeedbackFeedbackIdDelete'
            );
        }

        $resourcePath = '/rest/feedbacks/feedback/{feedbackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_id !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackId' . '}',
                ObjectSerializer::toPathValue($feedback_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdGet
     *
     * Get a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Feedback
     */
    public function restFeedbacksFeedbackFeedbackIdGet($feedback_id)
    {
        list($response) = $this->restFeedbacksFeedbackFeedbackIdGetWithHttpInfo($feedback_id);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdGetWithHttpInfo
     *
     * Get a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Feedback, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackFeedbackIdGetWithHttpInfo($feedback_id)
    {
        $request = $this->restFeedbacksFeedbackFeedbackIdGetRequest($feedback_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Feedback' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Feedback', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Feedback';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Feedback',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdGetAsync
     *
     * Get a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdGetAsync($feedback_id)
    {
        return $this->restFeedbacksFeedbackFeedbackIdGetAsyncWithHttpInfo($feedback_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdGetAsyncWithHttpInfo
     *
     * Get a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdGetAsyncWithHttpInfo($feedback_id)
    {
        $returnType = '\OpenAPI\Client\Model\Feedback';
        $request = $this->restFeedbacksFeedbackFeedbackIdGetRequest($feedback_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackFeedbackIdGet'
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksFeedbackFeedbackIdGetRequest($feedback_id)
    {
        // verify the required parameter 'feedback_id' is set
        if ($feedback_id === null || (is_array($feedback_id) && count($feedback_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_id when calling restFeedbacksFeedbackFeedbackIdGet'
            );
        }

        $resourcePath = '/rest/feedbacks/feedback/{feedbackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_id !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackId' . '}',
                ObjectSerializer::toPathValue($feedback_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdPut
     *
     * Update a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Feedback
     */
    public function restFeedbacksFeedbackFeedbackIdPut($feedback_id)
    {
        list($response) = $this->restFeedbacksFeedbackFeedbackIdPutWithHttpInfo($feedback_id);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdPutWithHttpInfo
     *
     * Update a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Feedback, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackFeedbackIdPutWithHttpInfo($feedback_id)
    {
        $request = $this->restFeedbacksFeedbackFeedbackIdPutRequest($feedback_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Feedback' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Feedback', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Feedback';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Feedback',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdPutAsync
     *
     * Update a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdPutAsync($feedback_id)
    {
        return $this->restFeedbacksFeedbackFeedbackIdPutAsyncWithHttpInfo($feedback_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackFeedbackIdPutAsyncWithHttpInfo
     *
     * Update a feedback
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackFeedbackIdPutAsyncWithHttpInfo($feedback_id)
    {
        $returnType = '\OpenAPI\Client\Model\Feedback';
        $request = $this->restFeedbacksFeedbackFeedbackIdPutRequest($feedback_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackFeedbackIdPut'
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksFeedbackFeedbackIdPutRequest($feedback_id)
    {
        // verify the required parameter 'feedback_id' is set
        if ($feedback_id === null || (is_array($feedback_id) && count($feedback_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_id when calling restFeedbacksFeedbackFeedbackIdPut'
            );
        }

        $resourcePath = '/rest/feedbacks/feedback/{feedbackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_id !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackId' . '}',
                ObjectSerializer::toPathValue($feedback_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackPost
     *
     * Create a feedback
     *
     * @param  string $title Feedback title (optional)
     * @param  string $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Feedback
     */
    public function restFeedbacksFeedbackPost($title = null, $feedback_relation_target_id = null, $feedback_relation_target_type_id = null, $feedback_relation_source_type_id = null)
    {
        list($response) = $this->restFeedbacksFeedbackPostWithHttpInfo($title, $feedback_relation_target_id, $feedback_relation_target_type_id, $feedback_relation_source_type_id);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbackPostWithHttpInfo
     *
     * Create a feedback
     *
     * @param  string $title Feedback title (optional)
     * @param  string $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Feedback, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackPostWithHttpInfo($title = null, $feedback_relation_target_id = null, $feedback_relation_target_type_id = null, $feedback_relation_source_type_id = null)
    {
        $request = $this->restFeedbacksFeedbackPostRequest($title, $feedback_relation_target_id, $feedback_relation_target_type_id, $feedback_relation_source_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Feedback' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Feedback', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Feedback';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Feedback',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackPostAsync
     *
     * Create a feedback
     *
     * @param  string $title Feedback title (optional)
     * @param  string $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackPostAsync($title = null, $feedback_relation_target_id = null, $feedback_relation_target_type_id = null, $feedback_relation_source_type_id = null)
    {
        return $this->restFeedbacksFeedbackPostAsyncWithHttpInfo($title, $feedback_relation_target_id, $feedback_relation_target_type_id, $feedback_relation_source_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackPostAsyncWithHttpInfo
     *
     * Create a feedback
     *
     * @param  string $title Feedback title (optional)
     * @param  string $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackPostAsyncWithHttpInfo($title = null, $feedback_relation_target_id = null, $feedback_relation_target_type_id = null, $feedback_relation_source_type_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\Feedback';
        $request = $this->restFeedbacksFeedbackPostRequest($title, $feedback_relation_target_id, $feedback_relation_target_type_id, $feedback_relation_source_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackPost'
     *
     * @param  string $title Feedback title (optional)
     * @param  string $feedback_relation_target_id The ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_target_type_id The type ID of the feedback&#39;s target (optional)
     * @param  string $feedback_relation_source_type_id The type ID of the feedback&#39;s source (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksFeedbackPostRequest($title = null, $feedback_relation_target_id = null, $feedback_relation_target_type_id = null, $feedback_relation_source_type_id = null)
    {

        $resourcePath = '/rest/feedbacks/feedback';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($feedback_relation_target_id)) {
            $feedback_relation_target_id = ObjectSerializer::serializeCollection($feedback_relation_target_id, '', true);
        }
        if ($feedback_relation_target_id !== null) {
            $queryParams['feedbackRelationTargetId'] = $feedback_relation_target_id;
        }
        // query params
        if (is_array($feedback_relation_target_type_id)) {
            $feedback_relation_target_type_id = ObjectSerializer::serializeCollection($feedback_relation_target_type_id, '', true);
        }
        if ($feedback_relation_target_type_id !== null) {
            $queryParams['feedbackRelationTargetTypeId'] = $feedback_relation_target_type_id;
        }
        // query params
        if (is_array($feedback_relation_source_type_id)) {
            $feedback_relation_source_type_id = ObjectSerializer::serializeCollection($feedback_relation_source_type_id, '', true);
        }
        if ($feedback_relation_source_type_id !== null) {
            $queryParams['feedbackRelationSourceTypeId'] = $feedback_relation_source_type_id;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbackRepliesFeedbackIdGet
     *
     * List feedback replies
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Feedback
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGet($feedback_id)
    {
        list($response) = $this->restFeedbacksFeedbackRepliesFeedbackIdGetWithHttpInfo($feedback_id);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbackRepliesFeedbackIdGetWithHttpInfo
     *
     * List feedback replies
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Feedback, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGetWithHttpInfo($feedback_id)
    {
        $request = $this->restFeedbacksFeedbackRepliesFeedbackIdGetRequest($feedback_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Feedback' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Feedback', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Feedback';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Feedback',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbackRepliesFeedbackIdGetAsync
     *
     * List feedback replies
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGetAsync($feedback_id)
    {
        return $this->restFeedbacksFeedbackRepliesFeedbackIdGetAsyncWithHttpInfo($feedback_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbackRepliesFeedbackIdGetAsyncWithHttpInfo
     *
     * List feedback replies
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbackRepliesFeedbackIdGetAsyncWithHttpInfo($feedback_id)
    {
        $returnType = '\OpenAPI\Client\Model\Feedback';
        $request = $this->restFeedbacksFeedbackRepliesFeedbackIdGetRequest($feedback_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbackRepliesFeedbackIdGet'
     *
     * @param  int $feedback_id The ID of the feedback (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksFeedbackRepliesFeedbackIdGetRequest($feedback_id)
    {
        // verify the required parameter 'feedback_id' is set
        if ($feedback_id === null || (is_array($feedback_id) && count($feedback_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_id when calling restFeedbacksFeedbackRepliesFeedbackIdGet'
            );
        }

        $resourcePath = '/rest/feedbacks/feedback/replies/{feedbackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($feedback_id !== null) {
            $resourcePath = str_replace(
                '{' . 'feedbackId' . '}',
                ObjectSerializer::toPathValue($feedback_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbacksGet
     *
     * List feedbacks
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Feedback[]
     */
    public function restFeedbacksFeedbacksGet()
    {
        list($response) = $this->restFeedbacksFeedbacksGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbacksGetWithHttpInfo
     *
     * List feedbacks
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Feedback[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbacksGetWithHttpInfo()
    {
        $request = $this->restFeedbacksFeedbacksGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Feedback[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Feedback[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Feedback[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Feedback[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbacksGetAsync
     *
     * List feedbacks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbacksGetAsync()
    {
        return $this->restFeedbacksFeedbacksGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbacksGetAsyncWithHttpInfo
     *
     * List feedbacks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbacksGetAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\Feedback[]';
        $request = $this->restFeedbacksFeedbacksGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbacksGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksFeedbacksGetRequest()
    {

        $resourcePath = '/rest/feedbacks/feedbacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksFeedbacksVisibilityPut
     *
     * Update the visibility of multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Feedback[]
     */
    public function restFeedbacksFeedbacksVisibilityPut($feedback_ids, $is_visible)
    {
        list($response) = $this->restFeedbacksFeedbacksVisibilityPutWithHttpInfo($feedback_ids, $is_visible);
        return $response;
    }

    /**
     * Operation restFeedbacksFeedbacksVisibilityPutWithHttpInfo
     *
     * Update the visibility of multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Feedback[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksFeedbacksVisibilityPutWithHttpInfo($feedback_ids, $is_visible)
    {
        $request = $this->restFeedbacksFeedbacksVisibilityPutRequest($feedback_ids, $is_visible);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Feedback[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Feedback[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Feedback[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Feedback[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksFeedbacksVisibilityPutAsync
     *
     * Update the visibility of multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbacksVisibilityPutAsync($feedback_ids, $is_visible)
    {
        return $this->restFeedbacksFeedbacksVisibilityPutAsyncWithHttpInfo($feedback_ids, $is_visible)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksFeedbacksVisibilityPutAsyncWithHttpInfo
     *
     * Update the visibility of multiple feedbacks
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksFeedbacksVisibilityPutAsyncWithHttpInfo($feedback_ids, $is_visible)
    {
        $returnType = '\OpenAPI\Client\Model\Feedback[]';
        $request = $this->restFeedbacksFeedbacksVisibilityPutRequest($feedback_ids, $is_visible);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksFeedbacksVisibilityPut'
     *
     * @param  string $feedback_ids The list of feedback IDs, separated by commas (required)
     * @param  bool $is_visible The visibility value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksFeedbacksVisibilityPutRequest($feedback_ids, $is_visible)
    {
        // verify the required parameter 'feedback_ids' is set
        if ($feedback_ids === null || (is_array($feedback_ids) && count($feedback_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_ids when calling restFeedbacksFeedbacksVisibilityPut'
            );
        }
        // verify the required parameter 'is_visible' is set
        if ($is_visible === null || (is_array($is_visible) && count($is_visible) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_visible when calling restFeedbacksFeedbacksVisibilityPut'
            );
        }

        $resourcePath = '/rest/feedbacks/feedbacks_visibility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($feedback_ids)) {
            $feedback_ids = ObjectSerializer::serializeCollection($feedback_ids, '', true);
        }
        if ($feedback_ids !== null) {
            $queryParams['feedbackIds'] = $feedback_ids;
        }
        // query params
        if (is_array($is_visible)) {
            $is_visible = ObjectSerializer::serializeCollection($is_visible, '', true);
        }
        if ($is_visible !== null) {
            $queryParams['isVisible'] = $is_visible;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksMigratePost
     *
     * Migrate legacy feedbacks
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restFeedbacksMigratePost()
    {
        $this->restFeedbacksMigratePostWithHttpInfo();
    }

    /**
     * Operation restFeedbacksMigratePostWithHttpInfo
     *
     * Migrate legacy feedbacks
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksMigratePostWithHttpInfo()
    {
        $request = $this->restFeedbacksMigratePostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksMigratePostAsync
     *
     * Migrate legacy feedbacks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksMigratePostAsync()
    {
        return $this->restFeedbacksMigratePostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksMigratePostAsyncWithHttpInfo
     *
     * Migrate legacy feedbacks
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksMigratePostAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->restFeedbacksMigratePostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksMigratePost'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksMigratePostRequest()
    {

        $resourcePath = '/rest/feedbacks/migrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksRatingPost
     *
     * Create a feedback rating
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedbackRating
     */
    public function restFeedbacksRatingPost($rating_value, $rating_relation_target_type_id, $rating_relation_target_id)
    {
        list($response) = $this->restFeedbacksRatingPostWithHttpInfo($rating_value, $rating_relation_target_type_id, $rating_relation_target_id);
        return $response;
    }

    /**
     * Operation restFeedbacksRatingPostWithHttpInfo
     *
     * Create a feedback rating
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedbackRating, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksRatingPostWithHttpInfo($rating_value, $rating_relation_target_type_id, $rating_relation_target_id)
    {
        $request = $this->restFeedbacksRatingPostRequest($rating_value, $rating_relation_target_type_id, $rating_relation_target_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedbackRating' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedbackRating', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FeedbackRating';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedbackRating',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksRatingPostAsync
     *
     * Create a feedback rating
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksRatingPostAsync($rating_value, $rating_relation_target_type_id, $rating_relation_target_id)
    {
        return $this->restFeedbacksRatingPostAsyncWithHttpInfo($rating_value, $rating_relation_target_type_id, $rating_relation_target_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksRatingPostAsyncWithHttpInfo
     *
     * Create a feedback rating
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksRatingPostAsyncWithHttpInfo($rating_value, $rating_relation_target_type_id, $rating_relation_target_id)
    {
        $returnType = '\OpenAPI\Client\Model\FeedbackRating';
        $request = $this->restFeedbacksRatingPostRequest($rating_value, $rating_relation_target_type_id, $rating_relation_target_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksRatingPost'
     *
     * @param  int $rating_value The feedback&#39;s comment message (required)
     * @param  int $rating_relation_target_type_id The type ID of the rating&#39;s target (required)
     * @param  int $rating_relation_target_id The ID of the rating&#39;s target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksRatingPostRequest($rating_value, $rating_relation_target_type_id, $rating_relation_target_id)
    {
        // verify the required parameter 'rating_value' is set
        if ($rating_value === null || (is_array($rating_value) && count($rating_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rating_value when calling restFeedbacksRatingPost'
            );
        }
        // verify the required parameter 'rating_relation_target_type_id' is set
        if ($rating_relation_target_type_id === null || (is_array($rating_relation_target_type_id) && count($rating_relation_target_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rating_relation_target_type_id when calling restFeedbacksRatingPost'
            );
        }
        // verify the required parameter 'rating_relation_target_id' is set
        if ($rating_relation_target_id === null || (is_array($rating_relation_target_id) && count($rating_relation_target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rating_relation_target_id when calling restFeedbacksRatingPost'
            );
        }

        $resourcePath = '/rest/feedbacks/rating';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($rating_value)) {
            $rating_value = ObjectSerializer::serializeCollection($rating_value, '', true);
        }
        if ($rating_value !== null) {
            $queryParams['ratingValue'] = $rating_value;
        }
        // query params
        if (is_array($rating_relation_target_type_id)) {
            $rating_relation_target_type_id = ObjectSerializer::serializeCollection($rating_relation_target_type_id, '', true);
        }
        if ($rating_relation_target_type_id !== null) {
            $queryParams['ratingRelationTargetTypeId'] = $rating_relation_target_type_id;
        }
        // query params
        if (is_array($rating_relation_target_id)) {
            $rating_relation_target_id = ObjectSerializer::serializeCollection($rating_relation_target_id, '', true);
        }
        if ($rating_relation_target_id !== null) {
            $queryParams['ratingRelationTargetId'] = $rating_relation_target_id;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksRatingRatingIdDelete
     *
     * Delete a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id rating_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restFeedbacksRatingRatingIdDelete($feedback_rating_id, $rating_id)
    {
        $this->restFeedbacksRatingRatingIdDeleteWithHttpInfo($feedback_rating_id, $rating_id);
    }

    /**
     * Operation restFeedbacksRatingRatingIdDeleteWithHttpInfo
     *
     * Delete a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksRatingRatingIdDeleteWithHttpInfo($feedback_rating_id, $rating_id)
    {
        $request = $this->restFeedbacksRatingRatingIdDeleteRequest($feedback_rating_id, $rating_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksRatingRatingIdDeleteAsync
     *
     * Delete a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksRatingRatingIdDeleteAsync($feedback_rating_id, $rating_id)
    {
        return $this->restFeedbacksRatingRatingIdDeleteAsyncWithHttpInfo($feedback_rating_id, $rating_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksRatingRatingIdDeleteAsyncWithHttpInfo
     *
     * Delete a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksRatingRatingIdDeleteAsyncWithHttpInfo($feedback_rating_id, $rating_id)
    {
        $returnType = '';
        $request = $this->restFeedbacksRatingRatingIdDeleteRequest($feedback_rating_id, $rating_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksRatingRatingIdDelete'
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksRatingRatingIdDeleteRequest($feedback_rating_id, $rating_id)
    {
        // verify the required parameter 'feedback_rating_id' is set
        if ($feedback_rating_id === null || (is_array($feedback_rating_id) && count($feedback_rating_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_rating_id when calling restFeedbacksRatingRatingIdDelete'
            );
        }
        // verify the required parameter 'rating_id' is set
        if ($rating_id === null || (is_array($rating_id) && count($rating_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rating_id when calling restFeedbacksRatingRatingIdDelete'
            );
        }

        $resourcePath = '/rest/feedbacks/rating/{ratingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($feedback_rating_id)) {
            $feedback_rating_id = ObjectSerializer::serializeCollection($feedback_rating_id, '', true);
        }
        if ($feedback_rating_id !== null) {
            $queryParams['feedbackRatingId'] = $feedback_rating_id;
        }


        // path params
        if ($rating_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ratingId' . '}',
                ObjectSerializer::toPathValue($rating_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksRatingRatingIdGet
     *
     * Get a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id rating_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedbackRating
     */
    public function restFeedbacksRatingRatingIdGet($feedback_rating_id, $rating_id)
    {
        list($response) = $this->restFeedbacksRatingRatingIdGetWithHttpInfo($feedback_rating_id, $rating_id);
        return $response;
    }

    /**
     * Operation restFeedbacksRatingRatingIdGetWithHttpInfo
     *
     * Get a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedbackRating, HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksRatingRatingIdGetWithHttpInfo($feedback_rating_id, $rating_id)
    {
        $request = $this->restFeedbacksRatingRatingIdGetRequest($feedback_rating_id, $rating_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedbackRating' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedbackRating', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FeedbackRating';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedbackRating',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksRatingRatingIdGetAsync
     *
     * Get a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksRatingRatingIdGetAsync($feedback_rating_id, $rating_id)
    {
        return $this->restFeedbacksRatingRatingIdGetAsyncWithHttpInfo($feedback_rating_id, $rating_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksRatingRatingIdGetAsyncWithHttpInfo
     *
     * Get a feedback rating
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksRatingRatingIdGetAsyncWithHttpInfo($feedback_rating_id, $rating_id)
    {
        $returnType = '\OpenAPI\Client\Model\FeedbackRating';
        $request = $this->restFeedbacksRatingRatingIdGetRequest($feedback_rating_id, $rating_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksRatingRatingIdGet'
     *
     * @param  int $feedback_rating_id The ID of the feedback rating (required)
     * @param  int $rating_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksRatingRatingIdGetRequest($feedback_rating_id, $rating_id)
    {
        // verify the required parameter 'feedback_rating_id' is set
        if ($feedback_rating_id === null || (is_array($feedback_rating_id) && count($feedback_rating_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedback_rating_id when calling restFeedbacksRatingRatingIdGet'
            );
        }
        // verify the required parameter 'rating_id' is set
        if ($rating_id === null || (is_array($rating_id) && count($rating_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rating_id when calling restFeedbacksRatingRatingIdGet'
            );
        }

        $resourcePath = '/rest/feedbacks/rating/{ratingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($feedback_rating_id)) {
            $feedback_rating_id = ObjectSerializer::serializeCollection($feedback_rating_id, '', true);
        }
        if ($feedback_rating_id !== null) {
            $queryParams['feedbackRatingId'] = $feedback_rating_id;
        }


        // path params
        if ($rating_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ratingId' . '}',
                ObjectSerializer::toPathValue($rating_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restFeedbacksRatingsGet
     *
     * List feedback ratings
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedbackRating[]
     */
    public function restFeedbacksRatingsGet()
    {
        list($response) = $this->restFeedbacksRatingsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restFeedbacksRatingsGetWithHttpInfo
     *
     * List feedback ratings
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedbackRating[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restFeedbacksRatingsGetWithHttpInfo()
    {
        $request = $this->restFeedbacksRatingsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedbackRating[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedbackRating[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FeedbackRating[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedbackRating[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restFeedbacksRatingsGetAsync
     *
     * List feedback ratings
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksRatingsGetAsync()
    {
        return $this->restFeedbacksRatingsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restFeedbacksRatingsGetAsyncWithHttpInfo
     *
     * List feedback ratings
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restFeedbacksRatingsGetAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\FeedbackRating[]';
        $request = $this->restFeedbacksRatingsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restFeedbacksRatingsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restFeedbacksRatingsGetRequest()
    {

        $resourcePath = '/rest/feedbacks/ratings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
