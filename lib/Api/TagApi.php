<?php
/**
 * TagApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TagApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TagApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restTagsBulkPost
     *
     * Create up to 50 tags
     *
     * @param  \OpenAPI\Client\Model\InlineObject245 $_rest_tags_bulk _rest_tags_bulk (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function restTagsBulkPost($_rest_tags_bulk = null)
    {
        list($response) = $this->restTagsBulkPostWithHttpInfo($_rest_tags_bulk);
        return $response;
    }

    /**
     * Operation restTagsBulkPostWithHttpInfo
     *
     * Create up to 50 tags
     *
     * @param  \OpenAPI\Client\Model\InlineObject245 $_rest_tags_bulk (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsBulkPostWithHttpInfo($_rest_tags_bulk = null)
    {
        $request = $this->restTagsBulkPostRequest($_rest_tags_bulk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsBulkPostAsync
     *
     * Create up to 50 tags
     *
     * @param  \OpenAPI\Client\Model\InlineObject245 $_rest_tags_bulk (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsBulkPostAsync($_rest_tags_bulk = null)
    {
        return $this->restTagsBulkPostAsyncWithHttpInfo($_rest_tags_bulk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsBulkPostAsyncWithHttpInfo
     *
     * Create up to 50 tags
     *
     * @param  \OpenAPI\Client\Model\InlineObject245 $_rest_tags_bulk (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsBulkPostAsyncWithHttpInfo($_rest_tags_bulk = null)
    {
        $returnType = 'object[]';
        $request = $this->restTagsBulkPostRequest($_rest_tags_bulk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsBulkPost'
     *
     * @param  \OpenAPI\Client\Model\InlineObject245 $_rest_tags_bulk (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsBulkPostRequest($_rest_tags_bulk = null)
    {

        $resourcePath = '/rest/tags/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($_rest_tags_bulk)) {
            $_tempBody = $_rest_tags_bulk;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsBulkPut
     *
     * Update up to 50 tags
     *
     * @param  \OpenAPI\Client\Model\InlineObject244 $_rest_tags_bulk _rest_tags_bulk (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function restTagsBulkPut($_rest_tags_bulk = null)
    {
        list($response) = $this->restTagsBulkPutWithHttpInfo($_rest_tags_bulk);
        return $response;
    }

    /**
     * Operation restTagsBulkPutWithHttpInfo
     *
     * Update up to 50 tags
     *
     * @param  \OpenAPI\Client\Model\InlineObject244 $_rest_tags_bulk (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsBulkPutWithHttpInfo($_rest_tags_bulk = null)
    {
        $request = $this->restTagsBulkPutRequest($_rest_tags_bulk);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsBulkPutAsync
     *
     * Update up to 50 tags
     *
     * @param  \OpenAPI\Client\Model\InlineObject244 $_rest_tags_bulk (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsBulkPutAsync($_rest_tags_bulk = null)
    {
        return $this->restTagsBulkPutAsyncWithHttpInfo($_rest_tags_bulk)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsBulkPutAsyncWithHttpInfo
     *
     * Update up to 50 tags
     *
     * @param  \OpenAPI\Client\Model\InlineObject244 $_rest_tags_bulk (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsBulkPutAsyncWithHttpInfo($_rest_tags_bulk = null)
    {
        $returnType = 'object[]';
        $request = $this->restTagsBulkPutRequest($_rest_tags_bulk);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsBulkPut'
     *
     * @param  \OpenAPI\Client\Model\InlineObject244 $_rest_tags_bulk (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsBulkPutRequest($_rest_tags_bulk = null)
    {

        $resourcePath = '/rest/tags/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($_rest_tags_bulk)) {
            $_tempBody = $_rest_tags_bulk;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsGet
     *
     * List tags
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restTagsGet($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {
        list($response) = $this->restTagsGetWithHttpInfo($with, $tag_name, $tag_availability, $tag_lang, $color);
        return $response;
    }

    /**
     * Operation restTagsGetWithHttpInfo
     *
     * List tags
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsGetWithHttpInfo($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {
        $request = $this->restTagsGetRequest($with, $tag_name, $tag_availability, $tag_lang, $color);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsGetAsync
     *
     * List tags
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsGetAsync($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {
        return $this->restTagsGetAsyncWithHttpInfo($with, $tag_name, $tag_availability, $tag_lang, $color)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsGetAsyncWithHttpInfo
     *
     * List tags
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsGetAsyncWithHttpInfo($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {
        $returnType = 'object';
        $request = $this->restTagsGetRequest($with, $tag_name, $tag_availability, $tag_lang, $color);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsGet'
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param  string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param  string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param  string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsGetRequest($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {

        $resourcePath = '/rest/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }
        // query params
        if (is_array($tag_name)) {
            $tag_name = ObjectSerializer::serializeCollection($tag_name, '', true);
        }
        if ($tag_name !== null) {
            $queryParams['tagName'] = $tag_name;
        }
        // query params
        if (is_array($tag_availability)) {
            $tag_availability = ObjectSerializer::serializeCollection($tag_availability, '', true);
        }
        if ($tag_availability !== null) {
            $queryParams['tagAvailability'] = $tag_availability;
        }
        // query params
        if (is_array($tag_lang)) {
            $tag_lang = ObjectSerializer::serializeCollection($tag_lang, '', true);
        }
        if ($tag_lang !== null) {
            $queryParams['tagLang'] = $tag_lang;
        }
        // query params
        if (is_array($color)) {
            $color = ObjectSerializer::serializeCollection($color, '', true);
        }
        if ($color !== null) {
            $queryParams['color'] = $color;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdDelete
     *
     * Delete tag
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restTagsIdDelete($id)
    {
        $this->restTagsIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation restTagsIdDeleteWithHttpInfo
     *
     * Delete tag
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsIdDeleteWithHttpInfo($id)
    {
        $request = $this->restTagsIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdDeleteAsync
     *
     * Delete tag
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsIdDeleteAsync($id)
    {
        return $this->restTagsIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdDeleteAsyncWithHttpInfo
     *
     * Delete tag
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->restTagsIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdDelete'
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdDelete'
            );
        }

        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdGet
     *
     * Get tag by ID
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Tag
     */
    public function restTagsIdGet($id)
    {
        list($response) = $this->restTagsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation restTagsIdGetWithHttpInfo
     *
     * Get tag by ID
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsIdGetWithHttpInfo($id)
    {
        $request = $this->restTagsIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Tag' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Tag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Tag';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdGetAsync
     *
     * Get tag by ID
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsIdGetAsync($id)
    {
        return $this->restTagsIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdGetAsyncWithHttpInfo
     *
     * Get tag by ID
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\Tag';
        $request = $this->restTagsIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdGet'
     *
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdGet'
            );
        }

        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdPut
     *
     * Update tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  \OpenAPI\Client\Model\InlineObject247 $_rest_tags_id _rest_tags_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Tag
     */
    public function restTagsIdPut($id, $_rest_tags_id = null)
    {
        list($response) = $this->restTagsIdPutWithHttpInfo($id, $_rest_tags_id);
        return $response;
    }

    /**
     * Operation restTagsIdPutWithHttpInfo
     *
     * Update tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  \OpenAPI\Client\Model\InlineObject247 $_rest_tags_id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsIdPutWithHttpInfo($id, $_rest_tags_id = null)
    {
        $request = $this->restTagsIdPutRequest($id, $_rest_tags_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Tag' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Tag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Tag';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdPutAsync
     *
     * Update tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  \OpenAPI\Client\Model\InlineObject247 $_rest_tags_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsIdPutAsync($id, $_rest_tags_id = null)
    {
        return $this->restTagsIdPutAsyncWithHttpInfo($id, $_rest_tags_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdPutAsyncWithHttpInfo
     *
     * Update tag
     *
     * @param  int $id The ID of the tag (required)
     * @param  \OpenAPI\Client\Model\InlineObject247 $_rest_tags_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsIdPutAsyncWithHttpInfo($id, $_rest_tags_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\Tag';
        $request = $this->restTagsIdPutRequest($id, $_rest_tags_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdPut'
     *
     * @param  int $id The ID of the tag (required)
     * @param  \OpenAPI\Client\Model\InlineObject247 $_rest_tags_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsIdPutRequest($id, $_rest_tags_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdPut'
            );
        }

        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($_rest_tags_id)) {
            $_tempBody = $_rest_tags_id;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDelete
     *
     * Delete tag relationship
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDelete($id, $tag_type, $relationship_uuid)
    {
        list($response) = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo($id, $tag_type, $relationship_uuid);
        return $response;
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo
     *
     * Delete tag relationship
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo($id, $tag_type, $relationship_uuid)
    {
        $request = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest($id, $tag_type, $relationship_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsync
     *
     * Delete tag relationship
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsync($id, $tag_type, $relationship_uuid)
    {
        return $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo($id, $tag_type, $relationship_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo
     *
     * Delete tag relationship
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo($id, $tag_type, $relationship_uuid)
    {
        $returnType = 'object';
        $request = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest($id, $tag_type, $relationship_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
     *
     * @param  int $id The ID of the tag (required)
     * @param  string $tag_type The type of the relationship, i.e. &lt;b&gt;board&lt;/b&gt; (required)
     * @param  string $relationship_uuid The UUID of the relationship (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest($id, $tag_type, $relationship_uuid)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }
        // verify the required parameter 'tag_type' is set
        if ($tag_type === null || (is_array($tag_type) && count($tag_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_type when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }
        // verify the required parameter 'relationship_uuid' is set
        if ($relationship_uuid === null || (is_array($relationship_uuid) && count($relationship_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_uuid when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }

        $resourcePath = '/rest/tags/{id}/relationships/{tagType}/{relationshipUUID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tag_type !== null) {
            $resourcePath = str_replace(
                '{' . 'tagType' . '}',
                ObjectSerializer::toPathValue($tag_type),
                $resourcePath
            );
        }
        // path params
        if ($relationship_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'relationshipUUID' . '}',
                ObjectSerializer::toPathValue($relationship_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsPost
     *
     * Create a tag
     *
     * @param  \OpenAPI\Client\Model\InlineObject243 $_rest_tags _rest_tags (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Tag
     */
    public function restTagsPost($_rest_tags = null)
    {
        list($response) = $this->restTagsPostWithHttpInfo($_rest_tags);
        return $response;
    }

    /**
     * Operation restTagsPostWithHttpInfo
     *
     * Create a tag
     *
     * @param  \OpenAPI\Client\Model\InlineObject243 $_rest_tags (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsPostWithHttpInfo($_rest_tags = null)
    {
        $request = $this->restTagsPostRequest($_rest_tags);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Tag' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Tag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Tag';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Tag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsPostAsync
     *
     * Create a tag
     *
     * @param  \OpenAPI\Client\Model\InlineObject243 $_rest_tags (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsPostAsync($_rest_tags = null)
    {
        return $this->restTagsPostAsyncWithHttpInfo($_rest_tags)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsPostAsyncWithHttpInfo
     *
     * Create a tag
     *
     * @param  \OpenAPI\Client\Model\InlineObject243 $_rest_tags (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsPostAsyncWithHttpInfo($_rest_tags = null)
    {
        $returnType = '\OpenAPI\Client\Model\Tag';
        $request = $this->restTagsPostRequest($_rest_tags);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsPost'
     *
     * @param  \OpenAPI\Client\Model\InlineObject243 $_rest_tags (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsPostRequest($_rest_tags = null)
    {

        $resourcePath = '/rest/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($_rest_tags)) {
            $_tempBody = $_rest_tags;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsDelete
     *
     * Delete tag relationships
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restTagsRelationshipsDelete()
    {
        list($response) = $this->restTagsRelationshipsDeleteWithHttpInfo();
        return $response;
    }

    /**
     * Operation restTagsRelationshipsDeleteWithHttpInfo
     *
     * Delete tag relationships
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsDeleteWithHttpInfo()
    {
        $request = $this->restTagsRelationshipsDeleteRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsDeleteAsync
     *
     * Delete tag relationships
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsDeleteAsync()
    {
        return $this->restTagsRelationshipsDeleteAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsDeleteAsyncWithHttpInfo
     *
     * Delete tag relationships
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsDeleteAsyncWithHttpInfo()
    {
        $returnType = 'object';
        $request = $this->restTagsRelationshipsDeleteRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsDelete'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsRelationshipsDeleteRequest()
    {

        $resourcePath = '/rest/tags/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsGet
     *
     * List relationships
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restTagsRelationshipsGet($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {
        list($response) = $this->restTagsRelationshipsGetWithHttpInfo($with, $tag_id, $tag_type, $relationship_value);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsGetWithHttpInfo
     *
     * List relationships
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsGetWithHttpInfo($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {
        $request = $this->restTagsRelationshipsGetRequest($with, $tag_id, $tag_type, $relationship_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsGetAsync
     *
     * List relationships
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsGetAsync($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {
        return $this->restTagsRelationshipsGetAsyncWithHttpInfo($with, $tag_id, $tag_type, $relationship_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsGetAsyncWithHttpInfo
     *
     * List relationships
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsGetAsyncWithHttpInfo($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {
        $returnType = 'object';
        $request = $this->restTagsRelationshipsGetRequest($with, $tag_id, $tag_type, $relationship_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsGet'
     *
     * @param  string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param  int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param  string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param  int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsRelationshipsGetRequest($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {

        $resourcePath = '/rest/tags/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }
        // query params
        if (is_array($tag_id)) {
            $tag_id = ObjectSerializer::serializeCollection($tag_id, '', true);
        }
        if ($tag_id !== null) {
            $queryParams['tagId'] = $tag_id;
        }
        // query params
        if (is_array($tag_type)) {
            $tag_type = ObjectSerializer::serializeCollection($tag_type, '', true);
        }
        if ($tag_type !== null) {
            $queryParams['tagType'] = $tag_type;
        }
        // query params
        if (is_array($relationship_value)) {
            $relationship_value = ObjectSerializer::serializeCollection($relationship_value, '', true);
        }
        if ($relationship_value !== null) {
            $queryParams['relationshipValue'] = $relationship_value;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsPost
     *
     * Create tag relationship
     *
     * @param  int $tag_id The ID of the tag. (optional)
     * @param  string $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \OpenAPI\Client\Model\InlineObject246 $_rest_tags_relationships _rest_tags_relationships (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TagRelationship
     */
    public function restTagsRelationshipsPost($tag_id = null, $tag_type = null, $relationship_value = null, $relatonship_uuid5 = null, $_rest_tags_relationships = null)
    {
        list($response) = $this->restTagsRelationshipsPostWithHttpInfo($tag_id, $tag_type, $relationship_value, $relatonship_uuid5, $_rest_tags_relationships);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsPostWithHttpInfo
     *
     * Create tag relationship
     *
     * @param  int $tag_id The ID of the tag. (optional)
     * @param  string $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \OpenAPI\Client\Model\InlineObject246 $_rest_tags_relationships (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TagRelationship, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsPostWithHttpInfo($tag_id = null, $tag_type = null, $relationship_value = null, $relatonship_uuid5 = null, $_rest_tags_relationships = null)
    {
        $request = $this->restTagsRelationshipsPostRequest($tag_id, $tag_type, $relationship_value, $relatonship_uuid5, $_rest_tags_relationships);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TagRelationship' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TagRelationship', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TagRelationship';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TagRelationship',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsPostAsync
     *
     * Create tag relationship
     *
     * @param  int $tag_id The ID of the tag. (optional)
     * @param  string $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \OpenAPI\Client\Model\InlineObject246 $_rest_tags_relationships (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsPostAsync($tag_id = null, $tag_type = null, $relationship_value = null, $relatonship_uuid5 = null, $_rest_tags_relationships = null)
    {
        return $this->restTagsRelationshipsPostAsyncWithHttpInfo($tag_id, $tag_type, $relationship_value, $relatonship_uuid5, $_rest_tags_relationships)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsPostAsyncWithHttpInfo
     *
     * Create tag relationship
     *
     * @param  int $tag_id The ID of the tag. (optional)
     * @param  string $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \OpenAPI\Client\Model\InlineObject246 $_rest_tags_relationships (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsPostAsyncWithHttpInfo($tag_id = null, $tag_type = null, $relationship_value = null, $relatonship_uuid5 = null, $_rest_tags_relationships = null)
    {
        $returnType = '\OpenAPI\Client\Model\TagRelationship';
        $request = $this->restTagsRelationshipsPostRequest($tag_id, $tag_type, $relationship_value, $relatonship_uuid5, $_rest_tags_relationships);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsPost'
     *
     * @param  int $tag_id The ID of the tag. (optional)
     * @param  string $tag_type The type of tag. Allowed values are category, ticket, variation, board, contact. (optional)
     * @param  int $relationship_value The ID of the data record for which a tag relationship is created. (optional)
     * @param  string $relatonship_uuid5 The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key. (optional)
     * @param  \OpenAPI\Client\Model\InlineObject246 $_rest_tags_relationships (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsRelationshipsPostRequest($tag_id = null, $tag_type = null, $relationship_value = null, $relatonship_uuid5 = null, $_rest_tags_relationships = null)
    {

        $resourcePath = '/rest/tags/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($tag_id)) {
            $tag_id = ObjectSerializer::serializeCollection($tag_id, '', true);
        }
        if ($tag_id !== null) {
            $queryParams['tagId'] = $tag_id;
        }
        // query params
        if (is_array($tag_type)) {
            $tag_type = ObjectSerializer::serializeCollection($tag_type, '', true);
        }
        if ($tag_type !== null) {
            $queryParams['tagType'] = $tag_type;
        }
        // query params
        if (is_array($relationship_value)) {
            $relationship_value = ObjectSerializer::serializeCollection($relationship_value, '', true);
        }
        if ($relationship_value !== null) {
            $queryParams['relationshipValue'] = $relationship_value;
        }
        // query params
        if (is_array($relatonship_uuid5)) {
            $relatonship_uuid5 = ObjectSerializer::serializeCollection($relatonship_uuid5, '', true);
        }
        if ($relatonship_uuid5 !== null) {
            $queryParams['relatonshipUUID5'] = $relatonship_uuid5;
        }



        // body params
        $_tempBody = null;
        if (isset($_rest_tags_relationships)) {
            $_tempBody = $_rest_tags_relationships;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDelete
     *
     * Delete tag relationship
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDelete($relationship_value, $relationship_type, $tag_type, $id)
    {
        $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo($relationship_value, $relationship_type, $tag_type, $id);
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo
     *
     * Delete tag relationship
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo($relationship_value, $relationship_type, $tag_type, $id)
    {
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest($relationship_value, $relationship_type, $tag_type, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsync
     *
     * Delete tag relationship
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsync($relationship_value, $relationship_type, $tag_type, $id)
    {
        return $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo($relationship_value, $relationship_type, $tag_type, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo
     *
     * Delete tag relationship
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo($relationship_value, $relationship_type, $tag_type, $id)
    {
        $returnType = '';
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest($relationship_value, $relationship_type, $tag_type, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsRelationshipValueTagTypeIdDelete'
     *
     * @param  int $relationship_value The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234. (required)
     * @param  string $relationship_type The type of the relationship, e.g. &lt;b&gt;category&lt;/b&gt;, &lt;b&gt;item&lt;/b&gt; or &lt;b&gt;ticket&lt;/b&gt; (required)
     * @param  string $tag_type The type of the tag (required)
     * @param  int $id The ID of the tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest($relationship_value, $relationship_type, $tag_type, $id)
    {
        // verify the required parameter 'relationship_value' is set
        if ($relationship_value === null || (is_array($relationship_value) && count($relationship_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_value when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }
        // verify the required parameter 'relationship_type' is set
        if ($relationship_type === null || (is_array($relationship_type) && count($relationship_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_type when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }
        // verify the required parameter 'tag_type' is set
        if ($tag_type === null || (is_array($tag_type) && count($tag_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_type when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }

        $resourcePath = '/rest/tags/relationships/{relationshipValue}/{tagType}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($relationship_type)) {
            $relationship_type = ObjectSerializer::serializeCollection($relationship_type, '', true);
        }
        if ($relationship_type !== null) {
            $queryParams['relationshipType'] = $relationship_type;
        }


        // path params
        if ($relationship_value !== null) {
            $resourcePath = str_replace(
                '{' . 'relationshipValue' . '}',
                ObjectSerializer::toPathValue($relationship_value),
                $resourcePath
            );
        }
        // path params
        if ($tag_type !== null) {
            $resourcePath = str_replace(
                '{' . 'tagType' . '}',
                ObjectSerializer::toPathValue($tag_type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdPut
     *
     * Update tag relationship
     *
     * @param  int $relationship_value relationship_value (required)
     * @param  int $tag_type tag_type (required)
     * @param  int $id id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TagRelationship
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPut($relationship_value, $tag_type, $id)
    {
        list($response) = $this->restTagsRelationshipsRelationshipValueTagTypeIdPutWithHttpInfo($relationship_value, $tag_type, $id);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdPutWithHttpInfo
     *
     * Update tag relationship
     *
     * @param  int $relationship_value (required)
     * @param  int $tag_type (required)
     * @param  int $id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TagRelationship, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPutWithHttpInfo($relationship_value, $tag_type, $id)
    {
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdPutRequest($relationship_value, $tag_type, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TagRelationship' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TagRelationship', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TagRelationship';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TagRelationship',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdPutAsync
     *
     * Update tag relationship
     *
     * @param  int $relationship_value (required)
     * @param  int $tag_type (required)
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPutAsync($relationship_value, $tag_type, $id)
    {
        return $this->restTagsRelationshipsRelationshipValueTagTypeIdPutAsyncWithHttpInfo($relationship_value, $tag_type, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdPutAsyncWithHttpInfo
     *
     * Update tag relationship
     *
     * @param  int $relationship_value (required)
     * @param  int $tag_type (required)
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdPutAsyncWithHttpInfo($relationship_value, $tag_type, $id)
    {
        $returnType = '\OpenAPI\Client\Model\TagRelationship';
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdPutRequest($relationship_value, $tag_type, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsRelationshipValueTagTypeIdPut'
     *
     * @param  int $relationship_value (required)
     * @param  int $tag_type (required)
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTagsRelationshipsRelationshipValueTagTypeIdPutRequest($relationship_value, $tag_type, $id)
    {
        // verify the required parameter 'relationship_value' is set
        if ($relationship_value === null || (is_array($relationship_value) && count($relationship_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_value when calling restTagsRelationshipsRelationshipValueTagTypeIdPut'
            );
        }
        // verify the required parameter 'tag_type' is set
        if ($tag_type === null || (is_array($tag_type) && count($tag_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_type when calling restTagsRelationshipsRelationshipValueTagTypeIdPut'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsRelationshipsRelationshipValueTagTypeIdPut'
            );
        }

        $resourcePath = '/rest/tags/relationships/{relationshipValue}/{tagType}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($relationship_value !== null) {
            $resourcePath = str_replace(
                '{' . 'relationshipValue' . '}',
                ObjectSerializer::toPathValue($relationship_value),
                $resourcePath
            );
        }
        // path params
        if ($tag_type !== null) {
            $resourcePath = str_replace(
                '{' . 'tagType' . '}',
                ObjectSerializer::toPathValue($tag_type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
