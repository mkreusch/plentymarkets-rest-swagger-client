<?php
/**
 * PluginSetApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PluginSetApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PluginSetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restPluginSetsGet
     *
     * List all Sets
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginSet[]
     */
    public function restPluginSetsGet()
    {
        list($response) = $this->restPluginSetsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restPluginSetsGetWithHttpInfo
     *
     * List all Sets
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginSet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsGetWithHttpInfo()
    {
        $request = $this->restPluginSetsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginSet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginSet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginSet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginSet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsGetAsync
     *
     * List all Sets
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsGetAsync()
    {
        return $this->restPluginSetsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsGetAsyncWithHttpInfo
     *
     * List all Sets
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsGetAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\PluginSet[]';
        $request = $this->restPluginSetsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsGetRequest()
    {

        $resourcePath = '/rest/plugin_sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsNewGitPluginDetailsPluginNameGet
     *
     * get git plugin description data
     *
     * @param  int $plugin_name plugin_name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGet($plugin_name)
    {
        list($response) = $this->restPluginSetsNewGitPluginDetailsPluginNameGetWithHttpInfo($plugin_name);
        return $response;
    }

    /**
     * Operation restPluginSetsNewGitPluginDetailsPluginNameGetWithHttpInfo
     *
     * get git plugin description data
     *
     * @param  int $plugin_name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGetWithHttpInfo($plugin_name)
    {
        $request = $this->restPluginSetsNewGitPluginDetailsPluginNameGetRequest($plugin_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsNewGitPluginDetailsPluginNameGetAsync
     *
     * get git plugin description data
     *
     * @param  int $plugin_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGetAsync($plugin_name)
    {
        return $this->restPluginSetsNewGitPluginDetailsPluginNameGetAsyncWithHttpInfo($plugin_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsNewGitPluginDetailsPluginNameGetAsyncWithHttpInfo
     *
     * get git plugin description data
     *
     * @param  int $plugin_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsNewGitPluginDetailsPluginNameGetAsyncWithHttpInfo($plugin_name)
    {
        $returnType = 'object[]';
        $request = $this->restPluginSetsNewGitPluginDetailsPluginNameGetRequest($plugin_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsNewGitPluginDetailsPluginNameGet'
     *
     * @param  int $plugin_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsNewGitPluginDetailsPluginNameGetRequest($plugin_name)
    {
        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restPluginSetsNewGitPluginDetailsPluginNameGet'
            );
        }

        $resourcePath = '/rest/plugin_sets_new/git_plugin_details/{pluginName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plugin_name !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginName' . '}',
                ObjectSerializer::toPathValue($plugin_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsNewPluginDetailsPluginNameVariationIdGet
     *
     * get plugin description data
     *
     * @param  int $plugin_name plugin_name (required)
     * @param  int $variation_id variation_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGet($plugin_name, $variation_id)
    {
        list($response) = $this->restPluginSetsNewPluginDetailsPluginNameVariationIdGetWithHttpInfo($plugin_name, $variation_id);
        return $response;
    }

    /**
     * Operation restPluginSetsNewPluginDetailsPluginNameVariationIdGetWithHttpInfo
     *
     * get plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGetWithHttpInfo($plugin_name, $variation_id)
    {
        $request = $this->restPluginSetsNewPluginDetailsPluginNameVariationIdGetRequest($plugin_name, $variation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsync
     *
     * get plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsync($plugin_name, $variation_id)
    {
        return $this->restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsyncWithHttpInfo($plugin_name, $variation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsyncWithHttpInfo
     *
     * get plugin description data
     *
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsNewPluginDetailsPluginNameVariationIdGetAsyncWithHttpInfo($plugin_name, $variation_id)
    {
        $returnType = 'object[]';
        $request = $this->restPluginSetsNewPluginDetailsPluginNameVariationIdGetRequest($plugin_name, $variation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsNewPluginDetailsPluginNameVariationIdGet'
     *
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsNewPluginDetailsPluginNameVariationIdGetRequest($plugin_name, $variation_id)
    {
        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restPluginSetsNewPluginDetailsPluginNameVariationIdGet'
            );
        }
        // verify the required parameter 'variation_id' is set
        if ($variation_id === null || (is_array($variation_id) && count($variation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variation_id when calling restPluginSetsNewPluginDetailsPluginNameVariationIdGet'
            );
        }

        $resourcePath = '/rest/plugin_sets_new/plugin_details/{pluginName}/{variationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($plugin_name !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginName' . '}',
                ObjectSerializer::toPathValue($plugin_name),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'variationId' . '}',
                ObjectSerializer::toPathValue($variation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet
     *
     * List all plugin translations csv.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  int $language_code2 language_code2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        $this->restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2);
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetWithHttpInfo
     *
     * List all plugin translations csv.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsync
     *
     * List all plugin translations csv.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsync($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        return $this->restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsyncWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsyncWithHttpInfo
     *
     * List all plugin translations csv.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetAsyncWithHttpInfo($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        $returnType = '';
        $request = $this->restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $language_code The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $language_code2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGetRequest($plugin_set_id, $language_code, $plugin_set_id2, $language_code2)
    {
        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
            );
        }
        // verify the required parameter 'language_code' is set
        if ($language_code === null || (is_array($language_code) && count($language_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code when calling restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
            );
        }
        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
            );
        }
        // verify the required parameter 'language_code2' is set
        if ($language_code2 === null || (is_array($language_code2) && count($language_code2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language_code2 when calling restPluginSetsPluginSetIdLanguagesCsvLanguageCodeGet'
            );
        }

        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages/csv/{languageCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($plugin_set_id)) {
            $plugin_set_id = ObjectSerializer::serializeCollection($plugin_set_id, '', true);
        }
        if ($plugin_set_id !== null) {
            $queryParams['$pluginSetId'] = $plugin_set_id;
        }
        // query params
        if (is_array($language_code)) {
            $language_code = ObjectSerializer::serializeCollection($language_code, '', true);
        }
        if ($language_code !== null) {
            $queryParams['$languageCode'] = $language_code;
        }


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }
        // path params
        if ($language_code2 !== null) {
            $resourcePath = str_replace(
                '{' . 'languageCode' . '}',
                ObjectSerializer::toPathValue($language_code2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesGet
     *
     * List all the plugins translations for a plugin set
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginTranslation[]
     */
    public function restPluginSetsPluginSetIdLanguagesGet($plugin_set_id, $plugin_set_id2)
    {
        list($response) = $this->restPluginSetsPluginSetIdLanguagesGetWithHttpInfo($plugin_set_id, $plugin_set_id2);
        return $response;
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesGetWithHttpInfo
     *
     * List all the plugins translations for a plugin set
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginTranslation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesGetWithHttpInfo($plugin_set_id, $plugin_set_id2)
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesGetRequest($plugin_set_id, $plugin_set_id2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginTranslation[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginTranslation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginTranslation[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginTranslation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesGetAsync
     *
     * List all the plugins translations for a plugin set
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesGetAsync($plugin_set_id, $plugin_set_id2)
    {
        return $this->restPluginSetsPluginSetIdLanguagesGetAsyncWithHttpInfo($plugin_set_id, $plugin_set_id2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesGetAsyncWithHttpInfo
     *
     * List all the plugins translations for a plugin set
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesGetAsyncWithHttpInfo($plugin_set_id, $plugin_set_id2)
    {
        $returnType = '\OpenAPI\Client\Model\PluginTranslation[]';
        $request = $this->restPluginSetsPluginSetIdLanguagesGetRequest($plugin_set_id, $plugin_set_id2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesGet'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  int $plugin_set_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsPluginSetIdLanguagesGetRequest($plugin_set_id, $plugin_set_id2)
    {
        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesGet'
            );
        }
        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesGet'
            );
        }

        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($plugin_set_id)) {
            $plugin_set_id = ObjectSerializer::serializeCollection($plugin_set_id, '', true);
        }
        if ($plugin_set_id !== null) {
            $queryParams['$pluginSetId'] = $plugin_set_id;
        }


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguageGet
     *
     * List all plugin translations merged.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  int $target_language2 target_language2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginTranslation[]
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGet($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        list($response) = $this->restPluginSetsPluginSetIdLanguagesTargetLanguageGetWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2);
        return $response;
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguageGetWithHttpInfo
     *
     * List all plugin translations merged.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginTranslation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGetWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesTargetLanguageGetRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginTranslation[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginTranslation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginTranslation[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginTranslation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsync
     *
     * List all plugin translations merged.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsync($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        return $this->restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsyncWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsyncWithHttpInfo
     *
     * List all plugin translations merged.
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguageGetAsyncWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        $returnType = '\OpenAPI\Client\Model\PluginTranslation[]';
        $request = $this->restPluginSetsPluginSetIdLanguagesTargetLanguageGetRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language we target (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsPluginSetIdLanguagesTargetLanguageGetRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
            );
        }
        // verify the required parameter 'target_language' is set
        if ($target_language === null || (is_array($target_language) && count($target_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_language when calling restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
            );
        }
        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
            );
        }
        // verify the required parameter 'target_language2' is set
        if ($target_language2 === null || (is_array($target_language2) && count($target_language2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_language2 when calling restPluginSetsPluginSetIdLanguagesTargetLanguageGet'
            );
        }

        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages/{targetLanguage}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($plugin_set_id)) {
            $plugin_set_id = ObjectSerializer::serializeCollection($plugin_set_id, '', true);
        }
        if ($plugin_set_id !== null) {
            $queryParams['$pluginSetId'] = $plugin_set_id;
        }
        // query params
        if (is_array($target_language)) {
            $target_language = ObjectSerializer::serializeCollection($target_language, '', true);
        }
        if ($target_language !== null) {
            $queryParams['$targetLanguage'] = $target_language;
        }


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }
        // path params
        if ($target_language2 !== null) {
            $resourcePath = str_replace(
                '{' . 'targetLanguage' . '}',
                ObjectSerializer::toPathValue($target_language2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguagePost
     *
     * Update all plugin translations
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 plugin_set_id2 (required)
     * @param  int $target_language2 target_language2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePost($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        $this->restPluginSetsPluginSetIdLanguagesTargetLanguagePostWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2);
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguagePostWithHttpInfo
     *
     * Update all plugin translations
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePostWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        $request = $this->restPluginSetsPluginSetIdLanguagesTargetLanguagePostRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsync
     *
     * Update all plugin translations
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsync($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        return $this->restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsyncWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsyncWithHttpInfo
     *
     * Update all plugin translations
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPluginSetIdLanguagesTargetLanguagePostAsyncWithHttpInfo($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        $returnType = '';
        $request = $this->restPluginSetsPluginSetIdLanguagesTargetLanguagePostRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
     *
     * @param  int $plugin_set_id The ID of the plugin set (required)
     * @param  string $target_language The code of the language (required)
     * @param  int $plugin_set_id2 (required)
     * @param  int $target_language2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsPluginSetIdLanguagesTargetLanguagePostRequest($plugin_set_id, $target_language, $plugin_set_id2, $target_language2)
    {
        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
            );
        }
        // verify the required parameter 'target_language' is set
        if ($target_language === null || (is_array($target_language) && count($target_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_language when calling restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
            );
        }
        // verify the required parameter 'plugin_set_id2' is set
        if ($plugin_set_id2 === null || (is_array($plugin_set_id2) && count($plugin_set_id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id2 when calling restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
            );
        }
        // verify the required parameter 'target_language2' is set
        if ($target_language2 === null || (is_array($target_language2) && count($target_language2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_language2 when calling restPluginSetsPluginSetIdLanguagesTargetLanguagePost'
            );
        }

        $resourcePath = '/rest/plugin_sets/{pluginSetId}/languages/{targetLanguage}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($plugin_set_id)) {
            $plugin_set_id = ObjectSerializer::serializeCollection($plugin_set_id, '', true);
        }
        if ($plugin_set_id !== null) {
            $queryParams['$pluginSetId'] = $plugin_set_id;
        }
        // query params
        if (is_array($target_language)) {
            $target_language = ObjectSerializer::serializeCollection($target_language, '', true);
        }
        if ($target_language !== null) {
            $queryParams['$targetLanguage'] = $target_language;
        }


        // path params
        if ($plugin_set_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id2),
                $resourcePath
            );
        }
        // path params
        if ($target_language2 !== null) {
            $resourcePath = str_replace(
                '{' . 'targetLanguage' . '}',
                ObjectSerializer::toPathValue($target_language2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPost
     *
     * Create a Set
     *
     * @param  int $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginSet
     */
    public function restPluginSetsPost($copy_plugin_set_id = null)
    {
        list($response) = $this->restPluginSetsPostWithHttpInfo($copy_plugin_set_id);
        return $response;
    }

    /**
     * Operation restPluginSetsPostWithHttpInfo
     *
     * Create a Set
     *
     * @param  int $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPostWithHttpInfo($copy_plugin_set_id = null)
    {
        $request = $this->restPluginSetsPostRequest($copy_plugin_set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginSet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginSet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPostAsync
     *
     * Create a Set
     *
     * @param  int $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPostAsync($copy_plugin_set_id = null)
    {
        return $this->restPluginSetsPostAsyncWithHttpInfo($copy_plugin_set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPostAsyncWithHttpInfo
     *
     * Create a Set
     *
     * @param  int $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPostAsyncWithHttpInfo($copy_plugin_set_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\PluginSet';
        $request = $this->restPluginSetsPostRequest($copy_plugin_set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPost'
     *
     * @param  int $copy_plugin_set_id The ID of the plugin set of which to copy the set entries from into the      * new set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsPostRequest($copy_plugin_set_id = null)
    {

        $resourcePath = '/rest/plugin_sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($copy_plugin_set_id)) {
            $copy_plugin_set_id = ObjectSerializer::serializeCollection($copy_plugin_set_id, '', true);
        }
        if ($copy_plugin_set_id !== null) {
            $queryParams['copyPluginSetId'] = $copy_plugin_set_id;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsPreviewHashGet
     *
     * Get the preview hash for a set
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginSetsPreviewHashGet()
    {
        list($response) = $this->restPluginSetsPreviewHashGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restPluginSetsPreviewHashGetWithHttpInfo
     *
     * Get the preview hash for a set
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsPreviewHashGetWithHttpInfo()
    {
        $request = $this->restPluginSetsPreviewHashGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsPreviewHashGetAsync
     *
     * Get the preview hash for a set
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPreviewHashGetAsync()
    {
        return $this->restPluginSetsPreviewHashGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsPreviewHashGetAsyncWithHttpInfo
     *
     * Get the preview hash for a set
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsPreviewHashGetAsyncWithHttpInfo()
    {
        $returnType = 'object';
        $request = $this->restPluginSetsPreviewHashGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsPreviewHashGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsPreviewHashGetRequest()
    {

        $resourcePath = '/rest/plugin_sets/preview_hash';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsS3InboxOpensourcePluginsGet
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginSet[]
     */
    public function restPluginSetsS3InboxOpensourcePluginsGet()
    {
        list($response) = $this->restPluginSetsS3InboxOpensourcePluginsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restPluginSetsS3InboxOpensourcePluginsGetWithHttpInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginSet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsS3InboxOpensourcePluginsGetWithHttpInfo()
    {
        $request = $this->restPluginSetsS3InboxOpensourcePluginsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginSet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginSet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginSet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginSet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsS3InboxOpensourcePluginsGetAsync
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsS3InboxOpensourcePluginsGetAsync()
    {
        return $this->restPluginSetsS3InboxOpensourcePluginsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsS3InboxOpensourcePluginsGetAsyncWithHttpInfo
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsS3InboxOpensourcePluginsGetAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\PluginSet[]';
        $request = $this->restPluginSetsS3InboxOpensourcePluginsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsS3InboxOpensourcePluginsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsS3InboxOpensourcePluginsGetRequest()
    {

        $resourcePath = '/rest/plugin_sets/s3-inbox-opensource-plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdDelete
     *
     * Delete a set
     *
     * @param  int $set_id set_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdDelete($set_id)
    {
        list($response) = $this->restPluginSetsSetIdDeleteWithHttpInfo($set_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdDeleteWithHttpInfo
     *
     * Delete a set
     *
     * @param  int $set_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdDeleteWithHttpInfo($set_id)
    {
        $request = $this->restPluginSetsSetIdDeleteRequest($set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdDeleteAsync
     *
     * Delete a set
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdDeleteAsync($set_id)
    {
        return $this->restPluginSetsSetIdDeleteAsyncWithHttpInfo($set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdDeleteAsyncWithHttpInfo
     *
     * Delete a set
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdDeleteAsyncWithHttpInfo($set_id)
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdDeleteRequest($set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdDelete'
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdDeleteRequest($set_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdDelete'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdGet
     *
     * Get a set
     *
     * @param  int $set_id set_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginSet
     */
    public function restPluginSetsSetIdGet($set_id)
    {
        list($response) = $this->restPluginSetsSetIdGetWithHttpInfo($set_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdGetWithHttpInfo
     *
     * Get a set
     *
     * @param  int $set_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdGetWithHttpInfo($set_id)
    {
        $request = $this->restPluginSetsSetIdGetRequest($set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginSet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginSet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginSet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdGetAsync
     *
     * Get a set
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdGetAsync($set_id)
    {
        return $this->restPluginSetsSetIdGetAsyncWithHttpInfo($set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdGetAsyncWithHttpInfo
     *
     * Get a set
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdGetAsyncWithHttpInfo($set_id)
    {
        $returnType = '\OpenAPI\Client\Model\PluginSet';
        $request = $this->restPluginSetsSetIdGetRequest($set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdGet'
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdGetRequest($set_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdGet'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsGet
     *
     * List all Plugins of Set
     *
     * @param  int $set_id set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsGet($set_id, $include_stage = null)
    {
        list($response) = $this->restPluginSetsSetIdPluginsGetWithHttpInfo($set_id, $include_stage);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetWithHttpInfo
     *
     * List all Plugins of Set
     *
     * @param  int $set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsGetWithHttpInfo($set_id, $include_stage = null)
    {
        $request = $this->restPluginSetsSetIdPluginsGetRequest($set_id, $include_stage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetAsync
     *
     * List all Plugins of Set
     *
     * @param  int $set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsGetAsync($set_id, $include_stage = null)
    {
        return $this->restPluginSetsSetIdPluginsGetAsyncWithHttpInfo($set_id, $include_stage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetAsyncWithHttpInfo
     *
     * List all Plugins of Set
     *
     * @param  int $set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsGetAsyncWithHttpInfo($set_id, $include_stage = null)
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsGetRequest($set_id, $include_stage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsGet'
     *
     * @param  int $set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPluginsGetRequest($set_id, $include_stage = null)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsGet'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($include_stage)) {
            $include_stage = ObjectSerializer::serializeCollection($include_stage, '', true);
        }
        if ($include_stage !== null) {
            $queryParams['&#39;includeStage'] = $include_stage;
        }


        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_name plugin_name (required)
     * @param  int $variation_id variation_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet($set_id, $plugin_name, $variation_id)
    {
        $this->restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetWithHttpInfo($set_id, $plugin_name, $variation_id);
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetWithHttpInfo
     *
     * @param  int $set_id (required)
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetWithHttpInfo($set_id, $plugin_name, $variation_id)
    {
        $request = $this->restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetRequest($set_id, $plugin_name, $variation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsync
     *
     * 
     *
     * @param  int $set_id (required)
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsync($set_id, $plugin_name, $variation_id)
    {
        return $this->restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsyncWithHttpInfo($set_id, $plugin_name, $variation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $set_id (required)
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetAsyncWithHttpInfo($set_id, $plugin_name, $variation_id)
    {
        $returnType = '';
        $request = $this->restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetRequest($set_id, $plugin_name, $variation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_name (required)
     * @param  int $variation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGetRequest($set_id, $plugin_name, $variation_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'
            );
        }
        // verify the required parameter 'plugin_name' is set
        if ($plugin_name === null || (is_array($plugin_name) && count($plugin_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_name when calling restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'
            );
        }
        // verify the required parameter 'variation_id' is set
        if ($variation_id === null || (is_array($variation_id) && count($variation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variation_id when calling restPluginSetsSetIdPluginsGetCompatibilityPluginNameVariationIdGet'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/plugins/get_compatibility/{pluginName}/{variationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_name !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginName' . '}',
                ObjectSerializer::toPathValue($plugin_name),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'variationId' . '}',
                ObjectSerializer::toPathValue($variation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdDelete
     *
     * Remove a plugin from a set
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsPluginIdDelete($set_id, $plugin_id)
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdDeleteWithHttpInfo($set_id, $plugin_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdDeleteWithHttpInfo
     *
     * Remove a plugin from a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdDeleteWithHttpInfo($set_id, $plugin_id)
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdDeleteRequest($set_id, $plugin_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdDeleteAsync
     *
     * Remove a plugin from a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdDeleteAsync($set_id, $plugin_id)
    {
        return $this->restPluginSetsSetIdPluginsPluginIdDeleteAsyncWithHttpInfo($set_id, $plugin_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdDeleteAsyncWithHttpInfo
     *
     * Remove a plugin from a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdDeleteAsyncWithHttpInfo($set_id, $plugin_id)
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsPluginIdDeleteRequest($set_id, $plugin_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdDelete'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPluginsPluginIdDeleteRequest($set_id, $plugin_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdDelete'
            );
        }
        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdDelete'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost
     *
     * Install a git plugin into a set
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost($set_id, $plugin_id)
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostWithHttpInfo($set_id, $plugin_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostWithHttpInfo
     *
     * Install a git plugin into a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostWithHttpInfo($set_id, $plugin_id)
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostRequest($set_id, $plugin_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsync
     *
     * Install a git plugin into a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsync($set_id, $plugin_id)
    {
        return $this->restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsyncWithHttpInfo($set_id, $plugin_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsyncWithHttpInfo
     *
     * Install a git plugin into a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostAsyncWithHttpInfo($set_id, $plugin_id)
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostRequest($set_id, $plugin_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPluginsPluginIdInstallGitPluginPostRequest($set_id, $plugin_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'
            );
        }
        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdInstallGitPluginPost'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}/install_git_plugin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPost
     *
     * Add a plugin to a set
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsPluginIdPost($set_id, $plugin_id)
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdPostWithHttpInfo($set_id, $plugin_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPostWithHttpInfo
     *
     * Add a plugin to a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdPostWithHttpInfo($set_id, $plugin_id)
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdPostRequest($set_id, $plugin_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPostAsync
     *
     * Add a plugin to a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdPostAsync($set_id, $plugin_id)
    {
        return $this->restPluginSetsSetIdPluginsPluginIdPostAsyncWithHttpInfo($set_id, $plugin_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPostAsyncWithHttpInfo
     *
     * Add a plugin to a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdPostAsyncWithHttpInfo($set_id, $plugin_id)
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsPluginIdPostRequest($set_id, $plugin_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdPost'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPluginsPluginIdPostRequest($set_id, $plugin_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdPost'
            );
        }
        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdPost'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPut
     *
     * Change a plugin's 'active' status for a set.
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPluginsPluginIdPut($set_id, $plugin_id)
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdPutWithHttpInfo($set_id, $plugin_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPutWithHttpInfo
     *
     * Change a plugin's 'active' status for a set.
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdPutWithHttpInfo($set_id, $plugin_id)
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdPutRequest($set_id, $plugin_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPutAsync
     *
     * Change a plugin's 'active' status for a set.
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdPutAsync($set_id, $plugin_id)
    {
        return $this->restPluginSetsSetIdPluginsPluginIdPutAsyncWithHttpInfo($set_id, $plugin_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdPutAsyncWithHttpInfo
     *
     * Change a plugin's 'active' status for a set.
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdPutAsyncWithHttpInfo($set_id, $plugin_id)
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPluginsPluginIdPutRequest($set_id, $plugin_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdPut'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPluginsPluginIdPutRequest($set_id, $plugin_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdPut'
            );
        }
        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdPut'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdSetPositionPost
     *
     * Set a plugin's position in a set
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_id plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginSetEntry
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPost($set_id, $plugin_id)
    {
        list($response) = $this->restPluginSetsSetIdPluginsPluginIdSetPositionPostWithHttpInfo($set_id, $plugin_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdSetPositionPostWithHttpInfo
     *
     * Set a plugin's position in a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginSetEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPostWithHttpInfo($set_id, $plugin_id)
    {
        $request = $this->restPluginSetsSetIdPluginsPluginIdSetPositionPostRequest($set_id, $plugin_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginSetEntry' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginSetEntry', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginSetEntry';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginSetEntry',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdSetPositionPostAsync
     *
     * Set a plugin's position in a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPostAsync($set_id, $plugin_id)
    {
        return $this->restPluginSetsSetIdPluginsPluginIdSetPositionPostAsyncWithHttpInfo($set_id, $plugin_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsPluginIdSetPositionPostAsyncWithHttpInfo
     *
     * Set a plugin's position in a set
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsPluginIdSetPositionPostAsyncWithHttpInfo($set_id, $plugin_id)
    {
        $returnType = '\OpenAPI\Client\Model\PluginSetEntry';
        $request = $this->restPluginSetsSetIdPluginsPluginIdSetPositionPostRequest($set_id, $plugin_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsPluginIdSetPositionPost'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPluginsPluginIdSetPositionPostRequest($set_id, $plugin_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsPluginIdSetPositionPost'
            );
        }
        // verify the required parameter 'plugin_id' is set
        if ($plugin_id === null || (is_array($plugin_id) && count($plugin_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_id when calling restPluginSetsSetIdPluginsPluginIdSetPositionPost'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/plugins/{pluginId}/setPosition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }
        // path params
        if ($plugin_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginId' . '}',
                ObjectSerializer::toPathValue($plugin_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPluginsSearchGet
     *
     * Search plugins
     *
     * @param  int $set_id set_id (required)
     * @param  int $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string $name Search for plugins with a specific name. (optional)
     * @param  bool $in_stage Search for plugins that are in stage. (optional)
     * @param  bool $in_productive Search for plugins that are in productive. (optional)
     * @param  string $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool $installed Only search for installed / not installed plugins. (optional)
     * @param  bool $active Only search for plugins that are active / inactive. (optional)
     * @param  int $items_per_page How many plugins to include per page of the search result. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20051
     */
    public function restPluginSetsSetIdPluginsSearchGet($set_id, $plugin_set_id = null, $name = null, $in_stage = null, $in_productive = null, $type = null, $check_requirements = null, $check_update = null, $source = null, $installed = null, $active = null, $items_per_page = null)
    {
        list($response) = $this->restPluginSetsSetIdPluginsSearchGetWithHttpInfo($set_id, $plugin_set_id, $name, $in_stage, $in_productive, $type, $check_requirements, $check_update, $source, $installed, $active, $items_per_page);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPluginsSearchGetWithHttpInfo
     *
     * Search plugins
     *
     * @param  int $set_id (required)
     * @param  int $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string $name Search for plugins with a specific name. (optional)
     * @param  bool $in_stage Search for plugins that are in stage. (optional)
     * @param  bool $in_productive Search for plugins that are in productive. (optional)
     * @param  string $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool $installed Only search for installed / not installed plugins. (optional)
     * @param  bool $active Only search for plugins that are active / inactive. (optional)
     * @param  int $items_per_page How many plugins to include per page of the search result. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20051, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPluginsSearchGetWithHttpInfo($set_id, $plugin_set_id = null, $name = null, $in_stage = null, $in_productive = null, $type = null, $check_requirements = null, $check_update = null, $source = null, $installed = null, $active = null, $items_per_page = null)
    {
        $request = $this->restPluginSetsSetIdPluginsSearchGetRequest($set_id, $plugin_set_id, $name, $in_stage, $in_productive, $type, $check_requirements, $check_update, $source, $installed, $active, $items_per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20051' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20051', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20051';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20051',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPluginsSearchGetAsync
     *
     * Search plugins
     *
     * @param  int $set_id (required)
     * @param  int $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string $name Search for plugins with a specific name. (optional)
     * @param  bool $in_stage Search for plugins that are in stage. (optional)
     * @param  bool $in_productive Search for plugins that are in productive. (optional)
     * @param  string $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool $installed Only search for installed / not installed plugins. (optional)
     * @param  bool $active Only search for plugins that are active / inactive. (optional)
     * @param  int $items_per_page How many plugins to include per page of the search result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsSearchGetAsync($set_id, $plugin_set_id = null, $name = null, $in_stage = null, $in_productive = null, $type = null, $check_requirements = null, $check_update = null, $source = null, $installed = null, $active = null, $items_per_page = null)
    {
        return $this->restPluginSetsSetIdPluginsSearchGetAsyncWithHttpInfo($set_id, $plugin_set_id, $name, $in_stage, $in_productive, $type, $check_requirements, $check_update, $source, $installed, $active, $items_per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPluginsSearchGetAsyncWithHttpInfo
     *
     * Search plugins
     *
     * @param  int $set_id (required)
     * @param  int $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string $name Search for plugins with a specific name. (optional)
     * @param  bool $in_stage Search for plugins that are in stage. (optional)
     * @param  bool $in_productive Search for plugins that are in productive. (optional)
     * @param  string $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool $installed Only search for installed / not installed plugins. (optional)
     * @param  bool $active Only search for plugins that are active / inactive. (optional)
     * @param  int $items_per_page How many plugins to include per page of the search result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPluginsSearchGetAsyncWithHttpInfo($set_id, $plugin_set_id = null, $name = null, $in_stage = null, $in_productive = null, $type = null, $check_requirements = null, $check_update = null, $source = null, $installed = null, $active = null, $items_per_page = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20051';
        $request = $this->restPluginSetsSetIdPluginsSearchGetRequest($set_id, $plugin_set_id, $name, $in_stage, $in_productive, $type, $check_requirements, $check_update, $source, $installed, $active, $items_per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPluginsSearchGet'
     *
     * @param  int $set_id (required)
     * @param  int $plugin_set_id Search for plugins from a specific plugin set. (optional)
     * @param  string $name Search for plugins with a specific name. (optional)
     * @param  bool $in_stage Search for plugins that are in stage. (optional)
     * @param  bool $in_productive Search for plugins that are in productive. (optional)
     * @param  string $type Search for plugins of a given type. Available types are &#39;Template&#39; and &#39;Export&#39;. (optional)
     * @param  bool $check_requirements Add the requirements to the response. This will add the &#39;notInstalledRequirements&#39;,      * &#39;notActiveStageRequirements&#39; and &#39;notActiveProductiveRequirements&#39; fields to the returned plugin model(s). (optional)
     * @param  bool $check_update Check for updates. If an update for a plugin is available, this will add the      * &#39;updateInformation&#39; field to the returned plugin model(s). (optional)
     * @param  string $source Search for plugins from a specific source. Available sources are &#39;marketplace&#39;, &#39;git&#39;, and      * &#39;local&#39;. (optional)
     * @param  bool $installed Only search for installed / not installed plugins. (optional)
     * @param  bool $active Only search for plugins that are active / inactive. (optional)
     * @param  int $items_per_page How many plugins to include per page of the search result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPluginsSearchGetRequest($set_id, $plugin_set_id = null, $name = null, $in_stage = null, $in_productive = null, $type = null, $check_requirements = null, $check_update = null, $source = null, $installed = null, $active = null, $items_per_page = null)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPluginsSearchGet'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/plugins/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($plugin_set_id)) {
            $plugin_set_id = ObjectSerializer::serializeCollection($plugin_set_id, '', true);
        }
        if ($plugin_set_id !== null) {
            $queryParams['pluginSetId'] = $plugin_set_id;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if (is_array($in_stage)) {
            $in_stage = ObjectSerializer::serializeCollection($in_stage, '', true);
        }
        if ($in_stage !== null) {
            $queryParams['in-stage'] = $in_stage;
        }
        // query params
        if (is_array($in_productive)) {
            $in_productive = ObjectSerializer::serializeCollection($in_productive, '', true);
        }
        if ($in_productive !== null) {
            $queryParams['in-productive'] = $in_productive;
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if (is_array($check_requirements)) {
            $check_requirements = ObjectSerializer::serializeCollection($check_requirements, '', true);
        }
        if ($check_requirements !== null) {
            $queryParams['checkRequirements'] = $check_requirements;
        }
        // query params
        if (is_array($check_update)) {
            $check_update = ObjectSerializer::serializeCollection($check_update, '', true);
        }
        if ($check_update !== null) {
            $queryParams['checkUpdate'] = $check_update;
        }
        // query params
        if (is_array($source)) {
            $source = ObjectSerializer::serializeCollection($source, '', true);
        }
        if ($source !== null) {
            $queryParams['source'] = $source;
        }
        // query params
        if (is_array($installed)) {
            $installed = ObjectSerializer::serializeCollection($installed, '', true);
        }
        if ($installed !== null) {
            $queryParams['installed'] = $installed;
        }
        // query params
        if (is_array($active)) {
            $active = ObjectSerializer::serializeCollection($active, '', true);
        }
        if ($active !== null) {
            $queryParams['active'] = $active;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }


        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdPut
     *
     * Update a set
     *
     * @param  int $set_id set_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginSetsSetIdPut($set_id)
    {
        list($response) = $this->restPluginSetsSetIdPutWithHttpInfo($set_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdPutWithHttpInfo
     *
     * Update a set
     *
     * @param  int $set_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdPutWithHttpInfo($set_id)
    {
        $request = $this->restPluginSetsSetIdPutRequest($set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdPutAsync
     *
     * Update a set
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPutAsync($set_id)
    {
        return $this->restPluginSetsSetIdPutAsyncWithHttpInfo($set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdPutAsyncWithHttpInfo
     *
     * Update a set
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdPutAsyncWithHttpInfo($set_id)
    {
        $returnType = 'object';
        $request = $this->restPluginSetsSetIdPutRequest($set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdPut'
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdPutRequest($set_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdPut'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginSetsSetIdSetEntriesGet
     *
     * List all SetEntries of Set
     *
     * @param  int $set_id set_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PluginSetEntry[]
     */
    public function restPluginSetsSetIdSetEntriesGet($set_id)
    {
        list($response) = $this->restPluginSetsSetIdSetEntriesGetWithHttpInfo($set_id);
        return $response;
    }

    /**
     * Operation restPluginSetsSetIdSetEntriesGetWithHttpInfo
     *
     * List all SetEntries of Set
     *
     * @param  int $set_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PluginSetEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginSetsSetIdSetEntriesGetWithHttpInfo($set_id)
    {
        $request = $this->restPluginSetsSetIdSetEntriesGetRequest($set_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PluginSetEntry[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PluginSetEntry[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PluginSetEntry[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PluginSetEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginSetsSetIdSetEntriesGetAsync
     *
     * List all SetEntries of Set
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdSetEntriesGetAsync($set_id)
    {
        return $this->restPluginSetsSetIdSetEntriesGetAsyncWithHttpInfo($set_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginSetsSetIdSetEntriesGetAsyncWithHttpInfo
     *
     * List all SetEntries of Set
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginSetsSetIdSetEntriesGetAsyncWithHttpInfo($set_id)
    {
        $returnType = '\OpenAPI\Client\Model\PluginSetEntry[]';
        $request = $this->restPluginSetsSetIdSetEntriesGetRequest($set_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginSetsSetIdSetEntriesGet'
     *
     * @param  int $set_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginSetsSetIdSetEntriesGetRequest($set_id)
    {
        // verify the required parameter 'set_id' is set
        if ($set_id === null || (is_array($set_id) && count($set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_id when calling restPluginSetsSetIdSetEntriesGet'
            );
        }

        $resourcePath = '/rest/plugin_sets/{setId}/set_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'setId' . '}',
                ObjectSerializer::toPathValue($set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restPluginsPluginSetsPluginSetIdPluginsGet
     *
     * List all Plugins of Set
     *
     * @param  int $plugin_set_id plugin_set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGet($plugin_set_id, $include_stage = null)
    {
        list($response) = $this->restPluginsPluginSetsPluginSetIdPluginsGetWithHttpInfo($plugin_set_id, $include_stage);
        return $response;
    }

    /**
     * Operation restPluginsPluginSetsPluginSetIdPluginsGetWithHttpInfo
     *
     * List all Plugins of Set
     *
     * @param  int $plugin_set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGetWithHttpInfo($plugin_set_id, $include_stage = null)
    {
        $request = $this->restPluginsPluginSetsPluginSetIdPluginsGetRequest($plugin_set_id, $include_stage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restPluginsPluginSetsPluginSetIdPluginsGetAsync
     *
     * List all Plugins of Set
     *
     * @param  int $plugin_set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGetAsync($plugin_set_id, $include_stage = null)
    {
        return $this->restPluginsPluginSetsPluginSetIdPluginsGetAsyncWithHttpInfo($plugin_set_id, $include_stage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restPluginsPluginSetsPluginSetIdPluginsGetAsyncWithHttpInfo
     *
     * List all Plugins of Set
     *
     * @param  int $plugin_set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restPluginsPluginSetsPluginSetIdPluginsGetAsyncWithHttpInfo($plugin_set_id, $include_stage = null)
    {
        $returnType = 'object';
        $request = $this->restPluginsPluginSetsPluginSetIdPluginsGetRequest($plugin_set_id, $include_stage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restPluginsPluginSetsPluginSetIdPluginsGet'
     *
     * @param  int $plugin_set_id (required)
     * @param  bool $include_stage Include staged plugins in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restPluginsPluginSetsPluginSetIdPluginsGetRequest($plugin_set_id, $include_stage = null)
    {
        // verify the required parameter 'plugin_set_id' is set
        if ($plugin_set_id === null || (is_array($plugin_set_id) && count($plugin_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plugin_set_id when calling restPluginsPluginSetsPluginSetIdPluginsGet'
            );
        }

        $resourcePath = '/rest/plugins/plugin_sets/{pluginSetId}/plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($include_stage)) {
            $include_stage = ObjectSerializer::serializeCollection($include_stage, '', true);
        }
        if ($include_stage !== null) {
            $queryParams['&#39;includeStage'] = $include_stage;
        }


        // path params
        if ($plugin_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pluginSetId' . '}',
                ObjectSerializer::toPathValue($plugin_set_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
