<?php
/**
 * TicketApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TicketApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TicketApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restTicketsGet
     *
     * List tickets by filters
     *
     * @param  int $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20057
     */
    public function restTicketsGet($id = null, $type_id = null, $priority_id = null, $parent_ticket_id = null, $status_id = null, $confidential = null, $contact_id = null, $deadline_at = null, $title = null, $progress = null, $plenty_id = null, $source = null, $status_group_id = null, $role_id = null, $owner_id = null, $fulltext = null, $customer_class_id = null, $resubmission_at = null)
    {
        list($response) = $this->restTicketsGetWithHttpInfo($id, $type_id, $priority_id, $parent_ticket_id, $status_id, $confidential, $contact_id, $deadline_at, $title, $progress, $plenty_id, $source, $status_group_id, $role_id, $owner_id, $fulltext, $customer_class_id, $resubmission_at);
        return $response;
    }

    /**
     * Operation restTicketsGetWithHttpInfo
     *
     * List tickets by filters
     *
     * @param  int $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20057, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsGetWithHttpInfo($id = null, $type_id = null, $priority_id = null, $parent_ticket_id = null, $status_id = null, $confidential = null, $contact_id = null, $deadline_at = null, $title = null, $progress = null, $plenty_id = null, $source = null, $status_group_id = null, $role_id = null, $owner_id = null, $fulltext = null, $customer_class_id = null, $resubmission_at = null)
    {
        $request = $this->restTicketsGetRequest($id, $type_id, $priority_id, $parent_ticket_id, $status_id, $confidential, $contact_id, $deadline_at, $title, $progress, $plenty_id, $source, $status_group_id, $role_id, $owner_id, $fulltext, $customer_class_id, $resubmission_at);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20057' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20057', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20057';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20057',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsGetAsync
     *
     * List tickets by filters
     *
     * @param  int $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsGetAsync($id = null, $type_id = null, $priority_id = null, $parent_ticket_id = null, $status_id = null, $confidential = null, $contact_id = null, $deadline_at = null, $title = null, $progress = null, $plenty_id = null, $source = null, $status_group_id = null, $role_id = null, $owner_id = null, $fulltext = null, $customer_class_id = null, $resubmission_at = null)
    {
        return $this->restTicketsGetAsyncWithHttpInfo($id, $type_id, $priority_id, $parent_ticket_id, $status_id, $confidential, $contact_id, $deadline_at, $title, $progress, $plenty_id, $source, $status_group_id, $role_id, $owner_id, $fulltext, $customer_class_id, $resubmission_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsGetAsyncWithHttpInfo
     *
     * List tickets by filters
     *
     * @param  int $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsGetAsyncWithHttpInfo($id = null, $type_id = null, $priority_id = null, $parent_ticket_id = null, $status_id = null, $confidential = null, $contact_id = null, $deadline_at = null, $title = null, $progress = null, $plenty_id = null, $source = null, $status_group_id = null, $role_id = null, $owner_id = null, $fulltext = null, $customer_class_id = null, $resubmission_at = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20057';
        $request = $this->restTicketsGetRequest($id, $type_id, $priority_id, $parent_ticket_id, $status_id, $confidential, $contact_id, $deadline_at, $title, $progress, $plenty_id, $source, $status_group_id, $role_id, $owner_id, $fulltext, $customer_class_id, $resubmission_at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsGet'
     *
     * @param  int $id Filter that restricts the search result to tickets of a specific ticket ID (optional)
     * @param  int $type_id Filter that restricts the search result to tickets of specific ticket types (optional)
     * @param  int $priority_id Filter that restricts the search result to tickets of a specific ticket priority ID (optional)
     * @param  int $parent_ticket_id Filter that restricts the search result to tickets with a specified parent ticket ID (optional)
     * @param  int $status_id Filter that restricts the search result to tickets with a specified status ID (optional)
     * @param  int $confidential Filter that restricts the search result to tickets of a specific confidential value (optional)
     * @param  int $contact_id Filter that restricts the search result to tickets with a specified contact ID (optional)
     * @param  int $deadline_at Filter that restricts the search result to tickets with a specified deadline. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     * @param  int $title Filter that restricts the search result to tickets with a specified phrase in title (optional)
     * @param  int $progress Filter that restricts the search result to tickets with a specified progress in percent (optional)
     * @param  int $plenty_id Filter that restricts the search result to tickets with a specified client (store) ID (optional)
     * @param  int $source Filter that restricts the search result to tickets with a specific source value (optional)
     * @param  int $status_group_id Filter that restricts the search result to tickets with a specified status group ID (optional)
     * @param  int $role_id Filter that restricts the search result to tickets with a specified role ID (optional)
     * @param  int $owner_id Filter that restricts the search result to tickets with a specified owner ID (optional)
     * @param  int $fulltext Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact&#39;s firstName and lastName. (optional)
     * @param  int $customer_class_id Filter that restricts the search result to tickets with a specified customer class ID (optional)
     * @param  int $resubmission_at Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are &#39;yyyy-mm-dd hh-mm-ss&#39; or &#39;yyyy-mm-dd&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTicketsGetRequest($id = null, $type_id = null, $priority_id = null, $parent_ticket_id = null, $status_id = null, $confidential = null, $contact_id = null, $deadline_at = null, $title = null, $progress = null, $plenty_id = null, $source = null, $status_group_id = null, $role_id = null, $owner_id = null, $fulltext = null, $customer_class_id = null, $resubmission_at = null)
    {

        $resourcePath = '/rest/tickets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if (is_array($type_id)) {
            $type_id = ObjectSerializer::serializeCollection($type_id, '', true);
        }
        if ($type_id !== null) {
            $queryParams['typeId'] = $type_id;
        }
        // query params
        if (is_array($priority_id)) {
            $priority_id = ObjectSerializer::serializeCollection($priority_id, '', true);
        }
        if ($priority_id !== null) {
            $queryParams['priorityId'] = $priority_id;
        }
        // query params
        if (is_array($parent_ticket_id)) {
            $parent_ticket_id = ObjectSerializer::serializeCollection($parent_ticket_id, '', true);
        }
        if ($parent_ticket_id !== null) {
            $queryParams['parentTicketId'] = $parent_ticket_id;
        }
        // query params
        if (is_array($status_id)) {
            $status_id = ObjectSerializer::serializeCollection($status_id, '', true);
        }
        if ($status_id !== null) {
            $queryParams['statusId'] = $status_id;
        }
        // query params
        if (is_array($confidential)) {
            $confidential = ObjectSerializer::serializeCollection($confidential, '', true);
        }
        if ($confidential !== null) {
            $queryParams['confidential'] = $confidential;
        }
        // query params
        if (is_array($contact_id)) {
            $contact_id = ObjectSerializer::serializeCollection($contact_id, '', true);
        }
        if ($contact_id !== null) {
            $queryParams['contactId'] = $contact_id;
        }
        // query params
        if (is_array($deadline_at)) {
            $deadline_at = ObjectSerializer::serializeCollection($deadline_at, '', true);
        }
        if ($deadline_at !== null) {
            $queryParams['deadlineAt'] = $deadline_at;
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($progress)) {
            $progress = ObjectSerializer::serializeCollection($progress, '', true);
        }
        if ($progress !== null) {
            $queryParams['progress'] = $progress;
        }
        // query params
        if (is_array($plenty_id)) {
            $plenty_id = ObjectSerializer::serializeCollection($plenty_id, '', true);
        }
        if ($plenty_id !== null) {
            $queryParams['plentyId'] = $plenty_id;
        }
        // query params
        if (is_array($source)) {
            $source = ObjectSerializer::serializeCollection($source, '', true);
        }
        if ($source !== null) {
            $queryParams['source'] = $source;
        }
        // query params
        if (is_array($status_group_id)) {
            $status_group_id = ObjectSerializer::serializeCollection($status_group_id, '', true);
        }
        if ($status_group_id !== null) {
            $queryParams['statusGroupId'] = $status_group_id;
        }
        // query params
        if (is_array($role_id)) {
            $role_id = ObjectSerializer::serializeCollection($role_id, '', true);
        }
        if ($role_id !== null) {
            $queryParams['roleId'] = $role_id;
        }
        // query params
        if (is_array($owner_id)) {
            $owner_id = ObjectSerializer::serializeCollection($owner_id, '', true);
        }
        if ($owner_id !== null) {
            $queryParams['ownerId'] = $owner_id;
        }
        // query params
        if (is_array($fulltext)) {
            $fulltext = ObjectSerializer::serializeCollection($fulltext, '', true);
        }
        if ($fulltext !== null) {
            $queryParams['fulltext'] = $fulltext;
        }
        // query params
        if (is_array($customer_class_id)) {
            $customer_class_id = ObjectSerializer::serializeCollection($customer_class_id, '', true);
        }
        if ($customer_class_id !== null) {
            $queryParams['customerClassId'] = $customer_class_id;
        }
        // query params
        if (is_array($resubmission_at)) {
            $resubmission_at = ObjectSerializer::serializeCollection($resubmission_at, '', true);
        }
        if ($resubmission_at !== null) {
            $queryParams['resubmissionAt'] = $resubmission_at;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsPost
     *
     * Create ticket
     *
     * @param  \OpenAPI\Client\Model\InlineObject248 $_rest_tickets _rest_tickets (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ticket
     */
    public function restTicketsPost($_rest_tickets = null)
    {
        list($response) = $this->restTicketsPostWithHttpInfo($_rest_tickets);
        return $response;
    }

    /**
     * Operation restTicketsPostWithHttpInfo
     *
     * Create ticket
     *
     * @param  \OpenAPI\Client\Model\InlineObject248 $_rest_tickets (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsPostWithHttpInfo($_rest_tickets = null)
    {
        $request = $this->restTicketsPostRequest($_rest_tickets);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ticket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ticket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ticket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ticket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsPostAsync
     *
     * Create ticket
     *
     * @param  \OpenAPI\Client\Model\InlineObject248 $_rest_tickets (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsPostAsync($_rest_tickets = null)
    {
        return $this->restTicketsPostAsyncWithHttpInfo($_rest_tickets)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsPostAsyncWithHttpInfo
     *
     * Create ticket
     *
     * @param  \OpenAPI\Client\Model\InlineObject248 $_rest_tickets (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsPostAsyncWithHttpInfo($_rest_tickets = null)
    {
        $returnType = '\OpenAPI\Client\Model\Ticket';
        $request = $this->restTicketsPostRequest($_rest_tickets);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsPost'
     *
     * @param  \OpenAPI\Client\Model\InlineObject248 $_rest_tickets (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTicketsPostRequest($_rest_tickets = null)
    {

        $resourcePath = '/rest/tickets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($_rest_tickets)) {
            $_tempBody = $_rest_tickets;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsStatusNamesGet
     *
     * List status names
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TicketStatusName[]
     */
    public function restTicketsStatusNamesGet()
    {
        list($response) = $this->restTicketsStatusNamesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restTicketsStatusNamesGetWithHttpInfo
     *
     * List status names
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TicketStatusName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsStatusNamesGetWithHttpInfo()
    {
        $request = $this->restTicketsStatusNamesGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TicketStatusName[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TicketStatusName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TicketStatusName[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TicketStatusName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsStatusNamesGetAsync
     *
     * List status names
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsStatusNamesGetAsync()
    {
        return $this->restTicketsStatusNamesGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsStatusNamesGetAsyncWithHttpInfo
     *
     * List status names
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsStatusNamesGetAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\TicketStatusName[]';
        $request = $this->restTicketsStatusNamesGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsStatusNamesGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTicketsStatusNamesGetRequest()
    {

        $resourcePath = '/rest/tickets/status/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsStatusTypeNamesGet
     *
     * List status names with typeId
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TicketStatusName[]
     */
    public function restTicketsStatusTypeNamesGet()
    {
        list($response) = $this->restTicketsStatusTypeNamesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restTicketsStatusTypeNamesGetWithHttpInfo
     *
     * List status names with typeId
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TicketStatusName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsStatusTypeNamesGetWithHttpInfo()
    {
        $request = $this->restTicketsStatusTypeNamesGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TicketStatusName[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TicketStatusName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TicketStatusName[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TicketStatusName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsStatusTypeNamesGetAsync
     *
     * List status names with typeId
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsStatusTypeNamesGetAsync()
    {
        return $this->restTicketsStatusTypeNamesGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsStatusTypeNamesGetAsyncWithHttpInfo
     *
     * List status names with typeId
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsStatusTypeNamesGetAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\TicketStatusName[]';
        $request = $this->restTicketsStatusTypeNamesGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsStatusTypeNamesGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTicketsStatusTypeNamesGetRequest()
    {

        $resourcePath = '/rest/tickets/status/type/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsTicketIdGet
     *
     * Get ticket
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ticket
     */
    public function restTicketsTicketIdGet($ticket_id, $with = null)
    {
        list($response) = $this->restTicketsTicketIdGetWithHttpInfo($ticket_id, $with);
        return $response;
    }

    /**
     * Operation restTicketsTicketIdGetWithHttpInfo
     *
     * Get ticket
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsTicketIdGetWithHttpInfo($ticket_id, $with = null)
    {
        $request = $this->restTicketsTicketIdGetRequest($ticket_id, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ticket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ticket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ticket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ticket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsTicketIdGetAsync
     *
     * Get ticket
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsTicketIdGetAsync($ticket_id, $with = null)
    {
        return $this->restTicketsTicketIdGetAsyncWithHttpInfo($ticket_id, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsTicketIdGetAsyncWithHttpInfo
     *
     * Get ticket
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsTicketIdGetAsyncWithHttpInfo($ticket_id, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\Ticket';
        $request = $this->restTicketsTicketIdGetRequest($ticket_id, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsTicketIdGet'
     *
     * @param  int $ticket_id The ID of the ticket to be loaded. (required)
     * @param  int $with An array with relations to be loaded with the ticket. Possible values are &#39;order&#39; and &#39;contact&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTicketsTicketIdGetRequest($ticket_id, $with = null)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null || (is_array($ticket_id) && count($ticket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticket_id when calling restTicketsTicketIdGet'
            );
        }

        $resourcePath = '/rest/tickets/{ticketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsTicketIdPost
     *
     * Create message
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TicketMessage
     */
    public function restTicketsTicketIdPost($ticket_id)
    {
        list($response) = $this->restTicketsTicketIdPostWithHttpInfo($ticket_id);
        return $response;
    }

    /**
     * Operation restTicketsTicketIdPostWithHttpInfo
     *
     * Create message
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TicketMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsTicketIdPostWithHttpInfo($ticket_id)
    {
        $request = $this->restTicketsTicketIdPostRequest($ticket_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TicketMessage' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TicketMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TicketMessage';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TicketMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsTicketIdPostAsync
     *
     * Create message
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsTicketIdPostAsync($ticket_id)
    {
        return $this->restTicketsTicketIdPostAsyncWithHttpInfo($ticket_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsTicketIdPostAsyncWithHttpInfo
     *
     * Create message
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsTicketIdPostAsyncWithHttpInfo($ticket_id)
    {
        $returnType = '\OpenAPI\Client\Model\TicketMessage';
        $request = $this->restTicketsTicketIdPostRequest($ticket_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsTicketIdPost'
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTicketsTicketIdPostRequest($ticket_id)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null || (is_array($ticket_id) && count($ticket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticket_id when calling restTicketsTicketIdPost'
            );
        }

        $resourcePath = '/rest/tickets/{ticketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsTicketIdPut
     *
     * Update ticket
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ticket
     */
    public function restTicketsTicketIdPut($ticket_id)
    {
        list($response) = $this->restTicketsTicketIdPutWithHttpInfo($ticket_id);
        return $response;
    }

    /**
     * Operation restTicketsTicketIdPutWithHttpInfo
     *
     * Update ticket
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsTicketIdPutWithHttpInfo($ticket_id)
    {
        $request = $this->restTicketsTicketIdPutRequest($ticket_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Ticket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Ticket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Ticket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Ticket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsTicketIdPutAsync
     *
     * Update ticket
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsTicketIdPutAsync($ticket_id)
    {
        return $this->restTicketsTicketIdPutAsyncWithHttpInfo($ticket_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsTicketIdPutAsyncWithHttpInfo
     *
     * Update ticket
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsTicketIdPutAsyncWithHttpInfo($ticket_id)
    {
        $returnType = '\OpenAPI\Client\Model\Ticket';
        $request = $this->restTicketsTicketIdPutRequest($ticket_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsTicketIdPut'
     *
     * @param  int $ticket_id The ID of the ticket (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTicketsTicketIdPutRequest($ticket_id)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null || (is_array($ticket_id) && count($ticket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticket_id when calling restTicketsTicketIdPut'
            );
        }

        $resourcePath = '/rest/tickets/{ticketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticket_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTicketsTypesNamesGet
     *
     * List type names
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TicketTypeName[]
     */
    public function restTicketsTypesNamesGet()
    {
        list($response) = $this->restTicketsTypesNamesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restTicketsTypesNamesGetWithHttpInfo
     *
     * List type names
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TicketTypeName[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restTicketsTypesNamesGetWithHttpInfo()
    {
        $request = $this->restTicketsTypesNamesGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TicketTypeName[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TicketTypeName[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TicketTypeName[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TicketTypeName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTicketsTypesNamesGetAsync
     *
     * List type names
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsTypesNamesGetAsync()
    {
        return $this->restTicketsTypesNamesGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTicketsTypesNamesGetAsyncWithHttpInfo
     *
     * List type names
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restTicketsTypesNamesGetAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\TicketTypeName[]';
        $request = $this->restTicketsTypesNamesGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTicketsTypesNamesGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restTicketsTypesNamesGetRequest()
    {

        $resourcePath = '/rest/tickets/types/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
