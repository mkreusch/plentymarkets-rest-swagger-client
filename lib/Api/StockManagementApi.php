<?php
/**
 * StockManagementApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StockManagementApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StockManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restStockmanagementStockGet
     *
     * List stock
     *
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20052
     */
    public function restStockmanagementStockGet($updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        list($response) = $this->restStockmanagementStockGetWithHttpInfo($updated_at_from, $updated_at_to, $variation_id, $page, $items_per_page, $columns);
        return $response;
    }

    /**
     * Operation restStockmanagementStockGetWithHttpInfo
     *
     * List stock
     *
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20052, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementStockGetWithHttpInfo($updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        $request = $this->restStockmanagementStockGetRequest($updated_at_from, $updated_at_to, $variation_id, $page, $items_per_page, $columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20052' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20052', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20052';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20052',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementStockGetAsync
     *
     * List stock
     *
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementStockGetAsync($updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        return $this->restStockmanagementStockGetAsyncWithHttpInfo($updated_at_from, $updated_at_to, $variation_id, $page, $items_per_page, $columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementStockGetAsyncWithHttpInfo
     *
     * List stock
     *
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementStockGetAsyncWithHttpInfo($updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20052';
        $request = $this->restStockmanagementStockGetRequest($updated_at_from, $updated_at_to, $variation_id, $page, $items_per_page, $columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementStockGet'
     *
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementStockGetRequest($updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {

        $resourcePath = '/rest/stockmanagement/stock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($updated_at_from)) {
            $updated_at_from = ObjectSerializer::serializeCollection($updated_at_from, '', true);
        }
        if ($updated_at_from !== null) {
            $queryParams['updatedAtFrom'] = $updated_at_from;
        }
        // query params
        if (is_array($updated_at_to)) {
            $updated_at_to = ObjectSerializer::serializeCollection($updated_at_to, '', true);
        }
        if ($updated_at_to !== null) {
            $queryParams['updatedAtTo'] = $updated_at_to;
        }
        // query params
        if (is_array($variation_id)) {
            $variation_id = ObjectSerializer::serializeCollection($variation_id, '', true);
        }
        if ($variation_id !== null) {
            $queryParams['variationId'] = $variation_id;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementStockRedistributePut
     *
     * Redistribute stock
     *
     * @param  \OpenAPI\Client\Model\InlineObject235 $_rest_stockmanagement_stock_redistribute _rest_stockmanagement_stock_redistribute (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restStockmanagementStockRedistributePut($_rest_stockmanagement_stock_redistribute = null)
    {
        $this->restStockmanagementStockRedistributePutWithHttpInfo($_rest_stockmanagement_stock_redistribute);
    }

    /**
     * Operation restStockmanagementStockRedistributePutWithHttpInfo
     *
     * Redistribute stock
     *
     * @param  \OpenAPI\Client\Model\InlineObject235 $_rest_stockmanagement_stock_redistribute (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementStockRedistributePutWithHttpInfo($_rest_stockmanagement_stock_redistribute = null)
    {
        $request = $this->restStockmanagementStockRedistributePutRequest($_rest_stockmanagement_stock_redistribute);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementStockRedistributePutAsync
     *
     * Redistribute stock
     *
     * @param  \OpenAPI\Client\Model\InlineObject235 $_rest_stockmanagement_stock_redistribute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementStockRedistributePutAsync($_rest_stockmanagement_stock_redistribute = null)
    {
        return $this->restStockmanagementStockRedistributePutAsyncWithHttpInfo($_rest_stockmanagement_stock_redistribute)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementStockRedistributePutAsyncWithHttpInfo
     *
     * Redistribute stock
     *
     * @param  \OpenAPI\Client\Model\InlineObject235 $_rest_stockmanagement_stock_redistribute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementStockRedistributePutAsyncWithHttpInfo($_rest_stockmanagement_stock_redistribute = null)
    {
        $returnType = '';
        $request = $this->restStockmanagementStockRedistributePutRequest($_rest_stockmanagement_stock_redistribute);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementStockRedistributePut'
     *
     * @param  \OpenAPI\Client\Model\InlineObject235 $_rest_stockmanagement_stock_redistribute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementStockRedistributePutRequest($_rest_stockmanagement_stock_redistribute = null)
    {

        $resourcePath = '/rest/stockmanagement/stock/redistribute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($_rest_stockmanagement_stock_redistribute)) {
            $_tempBody = $_rest_stockmanagement_stock_redistribute;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementStockTypesTypeGet
     *
     * List stock by warehouse type
     *
     * @param  string $type The name of the warehouse type. Currently only &#39;sales&#39; is available. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20052
     */
    public function restStockmanagementStockTypesTypeGet($type, $page = null, $items_per_page = null, $columns = null, $updated_at_from = null, $updated_at_to = null, $variation_id = null)
    {
        list($response) = $this->restStockmanagementStockTypesTypeGetWithHttpInfo($type, $page, $items_per_page, $columns, $updated_at_from, $updated_at_to, $variation_id);
        return $response;
    }

    /**
     * Operation restStockmanagementStockTypesTypeGetWithHttpInfo
     *
     * List stock by warehouse type
     *
     * @param  string $type The name of the warehouse type. Currently only &#39;sales&#39; is available. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20052, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementStockTypesTypeGetWithHttpInfo($type, $page = null, $items_per_page = null, $columns = null, $updated_at_from = null, $updated_at_to = null, $variation_id = null)
    {
        $request = $this->restStockmanagementStockTypesTypeGetRequest($type, $page, $items_per_page, $columns, $updated_at_from, $updated_at_to, $variation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20052' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20052', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20052';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20052',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementStockTypesTypeGetAsync
     *
     * List stock by warehouse type
     *
     * @param  string $type The name of the warehouse type. Currently only &#39;sales&#39; is available. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementStockTypesTypeGetAsync($type, $page = null, $items_per_page = null, $columns = null, $updated_at_from = null, $updated_at_to = null, $variation_id = null)
    {
        return $this->restStockmanagementStockTypesTypeGetAsyncWithHttpInfo($type, $page, $items_per_page, $columns, $updated_at_from, $updated_at_to, $variation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementStockTypesTypeGetAsyncWithHttpInfo
     *
     * List stock by warehouse type
     *
     * @param  string $type The name of the warehouse type. Currently only &#39;sales&#39; is available. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementStockTypesTypeGetAsyncWithHttpInfo($type, $page = null, $items_per_page = null, $columns = null, $updated_at_from = null, $updated_at_to = null, $variation_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20052';
        $request = $this->restStockmanagementStockTypesTypeGetRequest($type, $page, $items_per_page, $columns, $updated_at_from, $updated_at_to, $variation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementStockTypesTypeGet'
     *
     * @param  string $type The name of the warehouse type. Currently only &#39;sales&#39; is available. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementStockTypesTypeGetRequest($type, $page = null, $items_per_page = null, $columns = null, $updated_at_from = null, $updated_at_to = null, $variation_id = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling restStockmanagementStockTypesTypeGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/stock/types/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($updated_at_from)) {
            $updated_at_from = ObjectSerializer::serializeCollection($updated_at_from, '', true);
        }
        if ($updated_at_from !== null) {
            $queryParams['updatedAtFrom'] = $updated_at_from;
        }
        // query params
        if (is_array($updated_at_to)) {
            $updated_at_to = ObjectSerializer::serializeCollection($updated_at_to, '', true);
        }
        if ($updated_at_to !== null) {
            $queryParams['updatedAtTo'] = $updated_at_to;
        }
        // query params
        if (is_array($variation_id)) {
            $variation_id = ObjectSerializer::serializeCollection($variation_id, '', true);
        }
        if ($variation_id !== null) {
            $queryParams['variationId'] = $variation_id;
        }


        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesGet
     *
     * List warehouses
     *
     * @param  int $with Related objects to be loaded. repairWarehouse is the only relation currently available. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restStockmanagementWarehousesGet($with = null)
    {
        list($response) = $this->restStockmanagementWarehousesGetWithHttpInfo($with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesGetWithHttpInfo
     *
     * List warehouses
     *
     * @param  int $with Related objects to be loaded. repairWarehouse is the only relation currently available. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesGetWithHttpInfo($with = null)
    {
        $request = $this->restStockmanagementWarehousesGetRequest($with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesGetAsync
     *
     * List warehouses
     *
     * @param  int $with Related objects to be loaded. repairWarehouse is the only relation currently available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesGetAsync($with = null)
    {
        return $this->restStockmanagementWarehousesGetAsyncWithHttpInfo($with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesGetAsyncWithHttpInfo
     *
     * List warehouses
     *
     * @param  int $with Related objects to be loaded. repairWarehouse is the only relation currently available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesGetAsyncWithHttpInfo($with = null)
    {
        $returnType = 'object';
        $request = $this->restStockmanagementWarehousesGetRequest($with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesGet'
     *
     * @param  int $with Related objects to be loaded. repairWarehouse is the only relation currently available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesGetRequest($with = null)
    {

        $resourcePath = '/rest/stockmanagement/warehouses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesPost
     *
     * Create a warehouse
     *
     * @param  \OpenAPI\Client\Model\InlineObject236 $_rest_stockmanagement_warehouses _rest_stockmanagement_warehouses (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Warehouse
     */
    public function restStockmanagementWarehousesPost($_rest_stockmanagement_warehouses = null)
    {
        list($response) = $this->restStockmanagementWarehousesPostWithHttpInfo($_rest_stockmanagement_warehouses);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesPostWithHttpInfo
     *
     * Create a warehouse
     *
     * @param  \OpenAPI\Client\Model\InlineObject236 $_rest_stockmanagement_warehouses (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Warehouse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesPostWithHttpInfo($_rest_stockmanagement_warehouses = null)
    {
        $request = $this->restStockmanagementWarehousesPostRequest($_rest_stockmanagement_warehouses);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Warehouse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Warehouse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Warehouse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Warehouse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesPostAsync
     *
     * Create a warehouse
     *
     * @param  \OpenAPI\Client\Model\InlineObject236 $_rest_stockmanagement_warehouses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesPostAsync($_rest_stockmanagement_warehouses = null)
    {
        return $this->restStockmanagementWarehousesPostAsyncWithHttpInfo($_rest_stockmanagement_warehouses)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesPostAsyncWithHttpInfo
     *
     * Create a warehouse
     *
     * @param  \OpenAPI\Client\Model\InlineObject236 $_rest_stockmanagement_warehouses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesPostAsyncWithHttpInfo($_rest_stockmanagement_warehouses = null)
    {
        $returnType = '\OpenAPI\Client\Model\Warehouse';
        $request = $this->restStockmanagementWarehousesPostRequest($_rest_stockmanagement_warehouses);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesPost'
     *
     * @param  \OpenAPI\Client\Model\InlineObject236 $_rest_stockmanagement_warehouses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesPostRequest($_rest_stockmanagement_warehouses = null)
    {

        $resourcePath = '/rest/stockmanagement/warehouses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($_rest_stockmanagement_warehouses)) {
            $_tempBody = $_rest_stockmanagement_warehouses;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdGet
     *
     * Get a warehouse
     *
     * @param  int $warehouse_id The id of the warehouse to be loaded (required)
     * @param  int $with Related objects to be loaded. &#39;repairWarehouse&#39; is the only relation currently available. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Warehouse
     */
    public function restStockmanagementWarehousesWarehouseIdGet($warehouse_id, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdGetWithHttpInfo($warehouse_id, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdGetWithHttpInfo
     *
     * Get a warehouse
     *
     * @param  int $warehouse_id The id of the warehouse to be loaded (required)
     * @param  int $with Related objects to be loaded. &#39;repairWarehouse&#39; is the only relation currently available. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Warehouse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdGetWithHttpInfo($warehouse_id, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdGetRequest($warehouse_id, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Warehouse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Warehouse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Warehouse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Warehouse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdGetAsync
     *
     * Get a warehouse
     *
     * @param  int $warehouse_id The id of the warehouse to be loaded (required)
     * @param  int $with Related objects to be loaded. &#39;repairWarehouse&#39; is the only relation currently available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdGetAsync($warehouse_id, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdGetAsyncWithHttpInfo($warehouse_id, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdGetAsyncWithHttpInfo
     *
     * Get a warehouse
     *
     * @param  int $warehouse_id The id of the warehouse to be loaded (required)
     * @param  int $with Related objects to be loaded. &#39;repairWarehouse&#39; is the only relation currently available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdGetAsyncWithHttpInfo($warehouse_id, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\Warehouse';
        $request = $this->restStockmanagementWarehousesWarehouseIdGetRequest($warehouse_id, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdGet'
     *
     * @param  int $warehouse_id The id of the warehouse to be loaded (required)
     * @param  int $with Related objects to be loaded. &#39;repairWarehouse&#39; is the only relation currently available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdGetRequest($warehouse_id, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksGet
     *
     * List racks
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20053
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksGet($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksGetWithHttpInfo($warehouse_id, $page, $items_per_page, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksGetWithHttpInfo
     *
     * List racks
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20053, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksGetWithHttpInfo($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksGetRequest($warehouse_id, $page, $items_per_page, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20053' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20053', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20053';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20053',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksGetAsync
     *
     * List racks
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksGetAsync($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksGetAsyncWithHttpInfo($warehouse_id, $page, $items_per_page, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksGetAsyncWithHttpInfo
     *
     * List racks
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksGetAsyncWithHttpInfo($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20053';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksGetRequest($warehouse_id, $page, $items_per_page, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksGet'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksGetRequest($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksPost
     *
     * Create a rack
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rack
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksPost($warehouse_id)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksPostWithHttpInfo($warehouse_id);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksPostWithHttpInfo
     *
     * Create a rack
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rack, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksPostWithHttpInfo($warehouse_id)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksPostRequest($warehouse_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Rack' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Rack', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Rack';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Rack',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksPostAsync
     *
     * Create a rack
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksPostAsync($warehouse_id)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksPostAsyncWithHttpInfo($warehouse_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksPostAsyncWithHttpInfo
     *
     * Create a rack
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksPostAsyncWithHttpInfo($warehouse_id)
    {
        $returnType = '\OpenAPI\Client\Model\Rack';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksPostRequest($warehouse_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksPost'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksPostRequest($warehouse_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksPost'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGet
     *
     * Get a rack
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rack
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGet($warehouse_id, $rack_id, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetWithHttpInfo($warehouse_id, $rack_id, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetWithHttpInfo
     *
     * Get a rack
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rack, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetWithHttpInfo($warehouse_id, $rack_id, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetRequest($warehouse_id, $rack_id, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Rack' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Rack', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Rack';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Rack',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetAsync
     *
     * Get a rack
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetAsync($warehouse_id, $rack_id, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetAsyncWithHttpInfo($warehouse_id, $rack_id, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetAsyncWithHttpInfo
     *
     * Get a rack
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetAsyncWithHttpInfo($warehouse_id, $rack_id, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\Rack';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetRequest($warehouse_id, $rack_id, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGet'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;shelves&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGetRequest($warehouse_id, $rack_id, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGet'
            );
        }
        // verify the required parameter 'rack_id' is set
        if ($rack_id === null || (is_array($rack_id) && count($rack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rack_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks/{rackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($rack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rackId' . '}',
                ObjectSerializer::toPathValue($rack_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGet
     *
     * List shelves
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20054
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGet($warehouse_id, $rack_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetWithHttpInfo($warehouse_id, $rack_id, $page, $items_per_page, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetWithHttpInfo
     *
     * List shelves
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20054, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetWithHttpInfo($warehouse_id, $rack_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetRequest($warehouse_id, $rack_id, $page, $items_per_page, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20054' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20054', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20054';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20054',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetAsync
     *
     * List shelves
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetAsync($warehouse_id, $rack_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetAsyncWithHttpInfo($warehouse_id, $rack_id, $page, $items_per_page, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetAsyncWithHttpInfo
     *
     * List shelves
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetAsyncWithHttpInfo($warehouse_id, $rack_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20054';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetRequest($warehouse_id, $rack_id, $page, $items_per_page, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGet'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGetRequest($warehouse_id, $rack_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGet'
            );
        }
        // verify the required parameter 'rack_id' is set
        if ($rack_id === null || (is_array($rack_id) && count($rack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rack_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks/{rackId}/shelves';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($rack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rackId' . '}',
                ObjectSerializer::toPathValue($rack_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPost
     *
     * Create a shelf
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Shelf
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPost($warehouse_id, $rack_id)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostWithHttpInfo($warehouse_id, $rack_id);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostWithHttpInfo
     *
     * Create a shelf
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Shelf, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostWithHttpInfo($warehouse_id, $rack_id)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostRequest($warehouse_id, $rack_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Shelf' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Shelf', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Shelf';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Shelf',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostAsync
     *
     * Create a shelf
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostAsync($warehouse_id, $rack_id)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostAsyncWithHttpInfo($warehouse_id, $rack_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostAsyncWithHttpInfo
     *
     * Create a shelf
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostAsyncWithHttpInfo($warehouse_id, $rack_id)
    {
        $returnType = '\OpenAPI\Client\Model\Shelf';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostRequest($warehouse_id, $rack_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPost'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPostRequest($warehouse_id, $rack_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPost'
            );
        }
        // verify the required parameter 'rack_id' is set
        if ($rack_id === null || (is_array($rack_id) && count($rack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rack_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesPost'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks/{rackId}/shelves';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($rack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rackId' . '}',
                ObjectSerializer::toPathValue($rack_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGet
     *
     * Get a shelf
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Shelf
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGet($warehouse_id, $rack_id, $shelf_id, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetWithHttpInfo
     *
     * Get a shelf
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Shelf, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetRequest($warehouse_id, $rack_id, $shelf_id, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Shelf' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Shelf', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Shelf';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Shelf',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetAsync
     *
     * Get a shelf
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetAsync($warehouse_id, $rack_id, $shelf_id, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetAsyncWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetAsyncWithHttpInfo
     *
     * Get a shelf
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetAsyncWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\Shelf';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetRequest($warehouse_id, $rack_id, $shelf_id, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGet'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;storageLocations&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGetRequest($warehouse_id, $rack_id, $shelf_id, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGet'
            );
        }
        // verify the required parameter 'rack_id' is set
        if ($rack_id === null || (is_array($rack_id) && count($rack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rack_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGet'
            );
        }
        // verify the required parameter 'shelf_id' is set
        if ($shelf_id === null || (is_array($shelf_id) && count($shelf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shelf_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks/{rackId}/shelves/{shelfId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($rack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rackId' . '}',
                ObjectSerializer::toPathValue($rack_id),
                $resourcePath
            );
        }
        // path params
        if ($shelf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shelfId' . '}',
                ObjectSerializer::toPathValue($shelf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGet
     *
     * List storage locations
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20055
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGet($warehouse_id, $rack_id, $shelf_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $page, $items_per_page, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetWithHttpInfo
     *
     * List storage locations
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20055, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetRequest($warehouse_id, $rack_id, $shelf_id, $page, $items_per_page, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20055' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20055', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20055';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20055',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetAsync
     *
     * List storage locations
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetAsync($warehouse_id, $rack_id, $shelf_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetAsyncWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $page, $items_per_page, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetAsyncWithHttpInfo
     *
     * List storage locations
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetAsyncWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20055';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetRequest($warehouse_id, $rack_id, $shelf_id, $page, $items_per_page, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGet'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGetRequest($warehouse_id, $rack_id, $shelf_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGet'
            );
        }
        // verify the required parameter 'rack_id' is set
        if ($rack_id === null || (is_array($rack_id) && count($rack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rack_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGet'
            );
        }
        // verify the required parameter 'shelf_id' is set
        if ($shelf_id === null || (is_array($shelf_id) && count($shelf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shelf_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks/{rackId}/shelves/{shelfId}/storageLocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($rack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rackId' . '}',
                ObjectSerializer::toPathValue($rack_id),
                $resourcePath
            );
        }
        // path params
        if ($shelf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shelfId' . '}',
                ObjectSerializer::toPathValue($shelf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPost
     *
     * Create a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StorageLocation
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPost($warehouse_id, $rack_id, $shelf_id)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostWithHttpInfo($warehouse_id, $rack_id, $shelf_id);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostWithHttpInfo
     *
     * Create a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StorageLocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostWithHttpInfo($warehouse_id, $rack_id, $shelf_id)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostRequest($warehouse_id, $rack_id, $shelf_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\StorageLocation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StorageLocation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StorageLocation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StorageLocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostAsync
     *
     * Create a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostAsync($warehouse_id, $rack_id, $shelf_id)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostAsyncWithHttpInfo($warehouse_id, $rack_id, $shelf_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostAsyncWithHttpInfo
     *
     * Create a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostAsyncWithHttpInfo($warehouse_id, $rack_id, $shelf_id)
    {
        $returnType = '\OpenAPI\Client\Model\StorageLocation';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostRequest($warehouse_id, $rack_id, $shelf_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPost'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPostRequest($warehouse_id, $rack_id, $shelf_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPost'
            );
        }
        // verify the required parameter 'rack_id' is set
        if ($rack_id === null || (is_array($rack_id) && count($rack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rack_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPost'
            );
        }
        // verify the required parameter 'shelf_id' is set
        if ($shelf_id === null || (is_array($shelf_id) && count($shelf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shelf_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsPost'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks/{rackId}/shelves/{shelfId}/storageLocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($rack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rackId' . '}',
                ObjectSerializer::toPathValue($rack_id),
                $resourcePath
            );
        }
        // path params
        if ($shelf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shelfId' . '}',
                ObjectSerializer::toPathValue($shelf_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGet
     *
     * Get a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StorageLocation
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGet($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetWithHttpInfo
     *
     * Get a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StorageLocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetRequest($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\StorageLocation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StorageLocation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StorageLocation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StorageLocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetAsync
     *
     * Get a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetAsync($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetAsyncWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetAsyncWithHttpInfo
     *
     * Get a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetAsyncWithHttpInfo($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\StorageLocation';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetRequest($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGet'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $rack_id The id of the rack. (required)
     * @param  int $shelf_id The id of the shelf. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGetRequest($warehouse_id, $rack_id, $shelf_id, $storage_location_id, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGet'
            );
        }
        // verify the required parameter 'rack_id' is set
        if ($rack_id === null || (is_array($rack_id) && count($rack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rack_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGet'
            );
        }
        // verify the required parameter 'shelf_id' is set
        if ($shelf_id === null || (is_array($shelf_id) && count($shelf_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shelf_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGet'
            );
        }
        // verify the required parameter 'storage_location_id' is set
        if ($storage_location_id === null || (is_array($storage_location_id) && count($storage_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storage_location_id when calling restStockmanagementWarehousesWarehouseIdManagementRacksRackIdShelvesShelfIdStorageLocationsStorageLocationIdGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/racks/{rackId}/shelves/{shelfId}/storageLocations/{storageLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($rack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rackId' . '}',
                ObjectSerializer::toPathValue($rack_id),
                $resourcePath
            );
        }
        // path params
        if ($shelf_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shelfId' . '}',
                ObjectSerializer::toPathValue($shelf_id),
                $resourcePath
            );
        }
        // path params
        if ($storage_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storageLocationId' . '}',
                ObjectSerializer::toPathValue($storage_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGet
     *
     * List storage locations
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20055
     */
    public function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGet($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetWithHttpInfo($warehouse_id, $page, $items_per_page, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetWithHttpInfo
     *
     * List storage locations
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20055, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetWithHttpInfo($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetRequest($warehouse_id, $page, $items_per_page, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20055' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20055', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20055';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20055',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetAsync
     *
     * List storage locations
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetAsync($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetAsyncWithHttpInfo($warehouse_id, $page, $items_per_page, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetAsyncWithHttpInfo
     *
     * List storage locations
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetAsyncWithHttpInfo($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20055';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetRequest($warehouse_id, $page, $items_per_page, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGet'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page Number of items per page. (optional)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGetRequest($warehouse_id, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementStorageLocationsGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/storageLocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGet
     *
     * Get a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StorageLocation
     */
    public function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGet($warehouse_id, $storage_location_id, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetWithHttpInfo($warehouse_id, $storage_location_id, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetWithHttpInfo
     *
     * Get a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StorageLocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetWithHttpInfo($warehouse_id, $storage_location_id, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetRequest($warehouse_id, $storage_location_id, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\StorageLocation' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\StorageLocation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\StorageLocation';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StorageLocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetAsync
     *
     * Get a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetAsync($warehouse_id, $storage_location_id, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetAsyncWithHttpInfo($warehouse_id, $storage_location_id, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetAsyncWithHttpInfo
     *
     * Get a storage location
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetAsyncWithHttpInfo($warehouse_id, $storage_location_id, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\StorageLocation';
        $request = $this->restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetRequest($warehouse_id, $storage_location_id, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGet'
     *
     * @param  int $warehouse_id The id of the warehouse. (required)
     * @param  int $storage_location_id The id of the storage location. (required)
     * @param  int $columns The attributes to be loaded. (optional)
     * @param  int $with The relations to be loaded. Possible values are &#39;warehouse&#39;, &#39;rack&#39; and &#39;shelf&#39;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGetRequest($warehouse_id, $storage_location_id, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGet'
            );
        }
        // verify the required parameter 'storage_location_id' is set
        if ($storage_location_id === null || (is_array($storage_location_id) && count($storage_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storage_location_id when calling restStockmanagementWarehousesWarehouseIdManagementStorageLocationsStorageLocationIdGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/management/storageLocations/{storageLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($storage_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storageLocationId' . '}',
                ObjectSerializer::toPathValue($storage_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPut
     *
     * Book incoming stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject237 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items _rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPut($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items = null)
    {
        $this->restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items);
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutWithHttpInfo
     *
     * Book incoming stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject237 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutAsync
     *
     * Book incoming stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject237 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutAsync($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutAsyncWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutAsyncWithHttpInfo
     *
     * Book incoming stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject237 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutAsyncWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items = null)
    {
        $returnType = '';
        $request = $this->restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPut'
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject237 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdStockBookIncomingItemsPut'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/stock/bookIncomingItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items)) {
            $_tempBody = $_rest_stockmanagement_warehouses_warehouse_id_stock_book_incoming_items;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPut
     *
     * Book outgoing stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject238 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items _rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPut($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items = null)
    {
        $this->restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items);
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutWithHttpInfo
     *
     * Book outgoing stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject238 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutAsync
     *
     * Book outgoing stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject238 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutAsync($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutAsyncWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutAsyncWithHttpInfo
     *
     * Book outgoing stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject238 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutAsyncWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items = null)
    {
        $returnType = '';
        $request = $this->restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPut'
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject238 $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdStockBookOutgoingItemsPut'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/stock/bookOutgoingItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items)) {
            $_tempBody = $_rest_stockmanagement_warehouses_warehouse_id_stock_book_outgoing_items;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockCorrectionPut
     *
     * Correct stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject239 $_rest_stockmanagement_warehouses_warehouse_id_stock_correction _rest_stockmanagement_warehouses_warehouse_id_stock_correction (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restStockmanagementWarehousesWarehouseIdStockCorrectionPut($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction = null)
    {
        $this->restStockmanagementWarehousesWarehouseIdStockCorrectionPutWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction);
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockCorrectionPutWithHttpInfo
     *
     * Correct stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject239 $_rest_stockmanagement_warehouses_warehouse_id_stock_correction (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdStockCorrectionPutWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockCorrectionPutAsync
     *
     * Correct stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject239 $_rest_stockmanagement_warehouses_warehouse_id_stock_correction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockCorrectionPutAsync($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdStockCorrectionPutAsyncWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockCorrectionPutAsyncWithHttpInfo
     *
     * Correct stock
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject239 $_rest_stockmanagement_warehouses_warehouse_id_stock_correction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockCorrectionPutAsyncWithHttpInfo($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction = null)
    {
        $returnType = '';
        $request = $this->restStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdStockCorrectionPut'
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  \OpenAPI\Client\Model\InlineObject239 $_rest_stockmanagement_warehouses_warehouse_id_stock_correction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest($warehouse_id, $_rest_stockmanagement_warehouses_warehouse_id_stock_correction = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdStockCorrectionPut'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/stock/correction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($_rest_stockmanagement_warehouses_warehouse_id_stock_correction)) {
            $_tempBody = $_rest_stockmanagement_warehouses_warehouse_id_stock_correction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockGet
     *
     * List stock by warehouse
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20052
     */
    public function restStockmanagementWarehousesWarehouseIdStockGet($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdStockGetWithHttpInfo($warehouse_id, $updated_at_from, $updated_at_to, $variation_id, $page, $items_per_page, $columns);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockGetWithHttpInfo
     *
     * List stock by warehouse
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20052, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdStockGetWithHttpInfo($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdStockGetRequest($warehouse_id, $updated_at_from, $updated_at_to, $variation_id, $page, $items_per_page, $columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20052' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20052', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20052';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20052',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockGetAsync
     *
     * List stock by warehouse
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockGetAsync($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdStockGetAsyncWithHttpInfo($warehouse_id, $updated_at_from, $updated_at_to, $variation_id, $page, $items_per_page, $columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockGetAsyncWithHttpInfo
     *
     * List stock by warehouse
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockGetAsyncWithHttpInfo($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20052';
        $request = $this->restStockmanagementWarehousesWarehouseIdStockGetRequest($warehouse_id, $updated_at_from, $updated_at_to, $variation_id, $page, $items_per_page, $columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdStockGet'
     *
     * @param  int $warehouse_id The ID of the warehouse. (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. The id of the variation must be specified. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdStockGetRequest($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $page = null, $items_per_page = null, $columns = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdStockGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/stock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($updated_at_from)) {
            $updated_at_from = ObjectSerializer::serializeCollection($updated_at_from, '', true);
        }
        if ($updated_at_from !== null) {
            $queryParams['updatedAtFrom'] = $updated_at_from;
        }
        // query params
        if (is_array($updated_at_to)) {
            $updated_at_to = ObjectSerializer::serializeCollection($updated_at_to, '', true);
        }
        if ($updated_at_to !== null) {
            $queryParams['updatedAtTo'] = $updated_at_to;
        }
        // query params
        if (is_array($variation_id)) {
            $variation_id = ObjectSerializer::serializeCollection($variation_id, '', true);
        }
        if ($variation_id !== null) {
            $queryParams['variationId'] = $variation_id;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockMovementsGet
     *
     * List stock movements
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $page The requested page. The default page that will be returned is page 1. (required)
     * @param  int $items_per_page The number of items per page. The default number per page is 50. (required)
     * @param  int $variation_id The ID of the variation (optional)
     * @param  int $item_id The ID of the item (optional)
     * @param  string $created_at_from Get entries with createdAt date after this date (optional)
     * @param  string $created_at_to Get entries with createdAt date before this date (optional)
     * @param  int $year Get entries from the archive for the given year. All movements older than 3 months are stored in the archive. (optional)
     * @param  int $columns The properties to be loaded (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20022
     */
    public function restStockmanagementWarehousesWarehouseIdStockMovementsGet($warehouse_id, $page, $items_per_page, $variation_id = null, $item_id = null, $created_at_from = null, $created_at_to = null, $year = null, $columns = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdStockMovementsGetWithHttpInfo($warehouse_id, $page, $items_per_page, $variation_id, $item_id, $created_at_from, $created_at_to, $year, $columns);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockMovementsGetWithHttpInfo
     *
     * List stock movements
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $page The requested page. The default page that will be returned is page 1. (required)
     * @param  int $items_per_page The number of items per page. The default number per page is 50. (required)
     * @param  int $variation_id The ID of the variation (optional)
     * @param  int $item_id The ID of the item (optional)
     * @param  string $created_at_from Get entries with createdAt date after this date (optional)
     * @param  string $created_at_to Get entries with createdAt date before this date (optional)
     * @param  int $year Get entries from the archive for the given year. All movements older than 3 months are stored in the archive. (optional)
     * @param  int $columns The properties to be loaded (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20022, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdStockMovementsGetWithHttpInfo($warehouse_id, $page, $items_per_page, $variation_id = null, $item_id = null, $created_at_from = null, $created_at_to = null, $year = null, $columns = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdStockMovementsGetRequest($warehouse_id, $page, $items_per_page, $variation_id, $item_id, $created_at_from, $created_at_to, $year, $columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20022' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20022', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20022';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20022',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockMovementsGetAsync
     *
     * List stock movements
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $page The requested page. The default page that will be returned is page 1. (required)
     * @param  int $items_per_page The number of items per page. The default number per page is 50. (required)
     * @param  int $variation_id The ID of the variation (optional)
     * @param  int $item_id The ID of the item (optional)
     * @param  string $created_at_from Get entries with createdAt date after this date (optional)
     * @param  string $created_at_to Get entries with createdAt date before this date (optional)
     * @param  int $year Get entries from the archive for the given year. All movements older than 3 months are stored in the archive. (optional)
     * @param  int $columns The properties to be loaded (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockMovementsGetAsync($warehouse_id, $page, $items_per_page, $variation_id = null, $item_id = null, $created_at_from = null, $created_at_to = null, $year = null, $columns = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdStockMovementsGetAsyncWithHttpInfo($warehouse_id, $page, $items_per_page, $variation_id, $item_id, $created_at_from, $created_at_to, $year, $columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockMovementsGetAsyncWithHttpInfo
     *
     * List stock movements
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $page The requested page. The default page that will be returned is page 1. (required)
     * @param  int $items_per_page The number of items per page. The default number per page is 50. (required)
     * @param  int $variation_id The ID of the variation (optional)
     * @param  int $item_id The ID of the item (optional)
     * @param  string $created_at_from Get entries with createdAt date after this date (optional)
     * @param  string $created_at_to Get entries with createdAt date before this date (optional)
     * @param  int $year Get entries from the archive for the given year. All movements older than 3 months are stored in the archive. (optional)
     * @param  int $columns The properties to be loaded (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockMovementsGetAsyncWithHttpInfo($warehouse_id, $page, $items_per_page, $variation_id = null, $item_id = null, $created_at_from = null, $created_at_to = null, $year = null, $columns = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20022';
        $request = $this->restStockmanagementWarehousesWarehouseIdStockMovementsGetRequest($warehouse_id, $page, $items_per_page, $variation_id, $item_id, $created_at_from, $created_at_to, $year, $columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdStockMovementsGet'
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $page The requested page. The default page that will be returned is page 1. (required)
     * @param  int $items_per_page The number of items per page. The default number per page is 50. (required)
     * @param  int $variation_id The ID of the variation (optional)
     * @param  int $item_id The ID of the item (optional)
     * @param  string $created_at_from Get entries with createdAt date after this date (optional)
     * @param  string $created_at_to Get entries with createdAt date before this date (optional)
     * @param  int $year Get entries from the archive for the given year. All movements older than 3 months are stored in the archive. (optional)
     * @param  int $columns The properties to be loaded (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdStockMovementsGetRequest($warehouse_id, $page, $items_per_page, $variation_id = null, $item_id = null, $created_at_from = null, $created_at_to = null, $year = null, $columns = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdStockMovementsGet'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling restStockmanagementWarehousesWarehouseIdStockMovementsGet'
            );
        }
        // verify the required parameter 'items_per_page' is set
        if ($items_per_page === null || (is_array($items_per_page) && count($items_per_page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $items_per_page when calling restStockmanagementWarehousesWarehouseIdStockMovementsGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/stock/movements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($variation_id)) {
            $variation_id = ObjectSerializer::serializeCollection($variation_id, '', true);
        }
        if ($variation_id !== null) {
            $queryParams['variationId'] = $variation_id;
        }
        // query params
        if (is_array($item_id)) {
            $item_id = ObjectSerializer::serializeCollection($item_id, '', true);
        }
        if ($item_id !== null) {
            $queryParams['itemId'] = $item_id;
        }
        // query params
        if (is_array($created_at_from)) {
            $created_at_from = ObjectSerializer::serializeCollection($created_at_from, '', true);
        }
        if ($created_at_from !== null) {
            $queryParams['createdAtFrom'] = $created_at_from;
        }
        // query params
        if (is_array($created_at_to)) {
            $created_at_to = ObjectSerializer::serializeCollection($created_at_to, '', true);
        }
        if ($created_at_to !== null) {
            $queryParams['createdAtTo'] = $created_at_to;
        }
        // query params
        if (is_array($year)) {
            $year = ObjectSerializer::serializeCollection($year, '', true);
        }
        if ($year !== null) {
            $queryParams['year'] = $year;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockStorageLocationsGet
     *
     * List stock of a warehouse per storage location
     *
     * @param  int $warehouse_id warehouse_id (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. (optional)
     * @param  int $storage_location_id Filter that restricts the search result to stock of a storage location. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  int $with Load additional relations for a StockStorageLocation. Possible values:     &lt;ul&gt;     &lt;li&gt;&#39;storageLocation&#39; &#x3D; The storageLocation this stock information belongs to.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;storageLocation&lt;/code&gt; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse20023
     */
    public function restStockmanagementWarehousesWarehouseIdStockStorageLocationsGet($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $storage_location_id = null, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetWithHttpInfo($warehouse_id, $updated_at_from, $updated_at_to, $variation_id, $storage_location_id, $page, $items_per_page, $columns, $with);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetWithHttpInfo
     *
     * List stock of a warehouse per storage location
     *
     * @param  int $warehouse_id (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. (optional)
     * @param  int $storage_location_id Filter that restricts the search result to stock of a storage location. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  int $with Load additional relations for a StockStorageLocation. Possible values:     &lt;ul&gt;     &lt;li&gt;&#39;storageLocation&#39; &#x3D; The storageLocation this stock information belongs to.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;storageLocation&lt;/code&gt; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse20023, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetWithHttpInfo($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $storage_location_id = null, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetRequest($warehouse_id, $updated_at_from, $updated_at_to, $variation_id, $storage_location_id, $page, $items_per_page, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse20023' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse20023', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse20023';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse20023',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetAsync
     *
     * List stock of a warehouse per storage location
     *
     * @param  int $warehouse_id (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. (optional)
     * @param  int $storage_location_id Filter that restricts the search result to stock of a storage location. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  int $with Load additional relations for a StockStorageLocation. Possible values:     &lt;ul&gt;     &lt;li&gt;&#39;storageLocation&#39; &#x3D; The storageLocation this stock information belongs to.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;storageLocation&lt;/code&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetAsync($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $storage_location_id = null, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        return $this->restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetAsyncWithHttpInfo($warehouse_id, $updated_at_from, $updated_at_to, $variation_id, $storage_location_id, $page, $items_per_page, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetAsyncWithHttpInfo
     *
     * List stock of a warehouse per storage location
     *
     * @param  int $warehouse_id (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. (optional)
     * @param  int $storage_location_id Filter that restricts the search result to stock of a storage location. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  int $with Load additional relations for a StockStorageLocation. Possible values:     &lt;ul&gt;     &lt;li&gt;&#39;storageLocation&#39; &#x3D; The storageLocation this stock information belongs to.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;storageLocation&lt;/code&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetAsyncWithHttpInfo($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $storage_location_id = null, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse20023';
        $request = $this->restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetRequest($warehouse_id, $updated_at_from, $updated_at_to, $variation_id, $storage_location_id, $page, $items_per_page, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdStockStorageLocationsGet'
     *
     * @param  int $warehouse_id (required)
     * @param  string $updated_at_from Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  string $updated_at_to Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#39;2016-10-24T13:33:23+02:00&#39;. (optional)
     * @param  int $variation_id Filter that restricts the search result to stock with a variation. (optional)
     * @param  int $storage_location_id Filter that restricts the search result to stock of a storage location. (optional)
     * @param  int $page The requested page. (optional)
     * @param  int $items_per_page The number of items per page. (optional)
     * @param  int $columns The properties to be loaded. (optional)
     * @param  int $with Load additional relations for a StockStorageLocation. Possible values:     &lt;ul&gt;     &lt;li&gt;&#39;storageLocation&#39; &#x3D; The storageLocation this stock information belongs to.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;storageLocation&lt;/code&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdStockStorageLocationsGetRequest($warehouse_id, $updated_at_from = null, $updated_at_to = null, $variation_id = null, $storage_location_id = null, $page = null, $items_per_page = null, $columns = null, $with = null)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdStockStorageLocationsGet'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/stock/storageLocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($updated_at_from)) {
            $updated_at_from = ObjectSerializer::serializeCollection($updated_at_from, '', true);
        }
        if ($updated_at_from !== null) {
            $queryParams['updatedAtFrom'] = $updated_at_from;
        }
        // query params
        if (is_array($updated_at_to)) {
            $updated_at_to = ObjectSerializer::serializeCollection($updated_at_to, '', true);
        }
        if ($updated_at_to !== null) {
            $queryParams['updatedAtTo'] = $updated_at_to;
        }
        // query params
        if (is_array($variation_id)) {
            $variation_id = ObjectSerializer::serializeCollection($variation_id, '', true);
        }
        if ($variation_id !== null) {
            $queryParams['variationId'] = $variation_id;
        }
        // query params
        if (is_array($storage_location_id)) {
            $storage_location_id = ObjectSerializer::serializeCollection($storage_location_id, '', true);
        }
        if ($storage_location_id !== null) {
            $queryParams['storageLocationId'] = $storage_location_id;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($items_per_page)) {
            $items_per_page = ObjectSerializer::serializeCollection($items_per_page, '', true);
        }
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = $items_per_page;
        }
        // query params
        if (is_array($columns)) {
            $columns = ObjectSerializer::serializeCollection($columns, '', true);
        }
        if ($columns !== null) {
            $queryParams['columns'] = $columns;
        }
        // query params
        if (is_array($with)) {
            $with = ObjectSerializer::serializeCollection($with, '', true);
        }
        if ($with !== null) {
            $queryParams['with'] = $with;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockUnpackVariationPut
     *
     * Unpack variation
     *
     * @param  int $variation_stock_intake The new item that will be booked in as result of the unpacking (required)
     * @param  int $variation_stock_correction The item that is unpacked (required)
     * @param  int $warehouse_id warehouse_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Warehouse
     */
    public function restStockmanagementWarehousesWarehouseIdStockUnpackVariationPut($variation_stock_intake, $variation_stock_correction, $warehouse_id)
    {
        list($response) = $this->restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutWithHttpInfo($variation_stock_intake, $variation_stock_correction, $warehouse_id);
        return $response;
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutWithHttpInfo
     *
     * Unpack variation
     *
     * @param  int $variation_stock_intake The new item that will be booked in as result of the unpacking (required)
     * @param  int $variation_stock_correction The item that is unpacked (required)
     * @param  int $warehouse_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Warehouse, HTTP status code, HTTP response headers (array of strings)
     */
    public function restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutWithHttpInfo($variation_stock_intake, $variation_stock_correction, $warehouse_id)
    {
        $request = $this->restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutRequest($variation_stock_intake, $variation_stock_correction, $warehouse_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Warehouse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Warehouse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Warehouse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Warehouse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutAsync
     *
     * Unpack variation
     *
     * @param  int $variation_stock_intake The new item that will be booked in as result of the unpacking (required)
     * @param  int $variation_stock_correction The item that is unpacked (required)
     * @param  int $warehouse_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutAsync($variation_stock_intake, $variation_stock_correction, $warehouse_id)
    {
        return $this->restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutAsyncWithHttpInfo($variation_stock_intake, $variation_stock_correction, $warehouse_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutAsyncWithHttpInfo
     *
     * Unpack variation
     *
     * @param  int $variation_stock_intake The new item that will be booked in as result of the unpacking (required)
     * @param  int $variation_stock_correction The item that is unpacked (required)
     * @param  int $warehouse_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutAsyncWithHttpInfo($variation_stock_intake, $variation_stock_correction, $warehouse_id)
    {
        $returnType = '\OpenAPI\Client\Model\Warehouse';
        $request = $this->restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutRequest($variation_stock_intake, $variation_stock_correction, $warehouse_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restStockmanagementWarehousesWarehouseIdStockUnpackVariationPut'
     *
     * @param  int $variation_stock_intake The new item that will be booked in as result of the unpacking (required)
     * @param  int $variation_stock_correction The item that is unpacked (required)
     * @param  int $warehouse_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restStockmanagementWarehousesWarehouseIdStockUnpackVariationPutRequest($variation_stock_intake, $variation_stock_correction, $warehouse_id)
    {
        // verify the required parameter 'variation_stock_intake' is set
        if ($variation_stock_intake === null || (is_array($variation_stock_intake) && count($variation_stock_intake) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variation_stock_intake when calling restStockmanagementWarehousesWarehouseIdStockUnpackVariationPut'
            );
        }
        // verify the required parameter 'variation_stock_correction' is set
        if ($variation_stock_correction === null || (is_array($variation_stock_correction) && count($variation_stock_correction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variation_stock_correction when calling restStockmanagementWarehousesWarehouseIdStockUnpackVariationPut'
            );
        }
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restStockmanagementWarehousesWarehouseIdStockUnpackVariationPut'
            );
        }

        $resourcePath = '/rest/stockmanagement/warehouses/{warehouseId}/stock/unpackVariation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($variation_stock_intake)) {
            $variation_stock_intake = ObjectSerializer::serializeCollection($variation_stock_intake, '', true);
        }
        if ($variation_stock_intake !== null) {
            $queryParams['VariationStockIntake'] = $variation_stock_intake;
        }
        // query params
        if (is_array($variation_stock_correction)) {
            $variation_stock_correction = ObjectSerializer::serializeCollection($variation_stock_correction, '', true);
        }
        if ($variation_stock_correction !== null) {
            $queryParams['VariationStockCorrection'] = $variation_stock_correction;
        }


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
